

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Sat Jul 08 18:15:53 2017

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75  0000                     
    76                           	psect	idataCOMRAM
    77  00430B                     __pidataCOMRAM:
    78                           	opt stack 0
    79                           
    80                           ;initializer for _ctr
    81  00430B  00                 	db	low _uart_str
    82  00430C  01                 	db	high _uart_str
    83                           
    84                           	psect	idataBANK0
    85  004308                     __pidataBANK0:
    86                           	opt stack 0
    87                           
    88                           ;initializer for _DEFAULT_FEEDRATE
    89  004308  00                 	db	0
    90  004309  7A                 	db	122
    91  00430A  44                 	db	68
    92                           
    93                           	psect	smallconst
    94  000800                     __psmallconst:
    95                           	opt stack 0
    96  000800  00                 	db	0
    97  000801                     _dpowers:
    98                           	opt stack 0
    99  000801  0001               	dw	1
   100  000803  0000               	dw	0
   101  000805  000A               	dw	10
   102  000807  0000               	dw	0
   103  000809  0064               	dw	100
   104  00080B  0000               	dw	0
   105  00080D  03E8               	dw	1000
   106  00080F  0000               	dw	0
   107  000811  2710               	dw	10000
   108  000813  0000               	dw	0
   109  000815  86A0               	dw	34464
   110  000817  0001               	dw	1
   111  000819  4240               	dw	16960
   112  00081B  000F               	dw	15
   113  00081D  9680               	dw	38528
   114  00081F  0098               	dw	152
   115  000821  E100               	dw	57600
   116  000823  05F5               	dw	1525
   117  000825  CA00               	dw	51712
   118  000827  3B9A               	dw	15258
   119  000829                     __end_of_dpowers:
   120                           	opt stack 0
   121  000829                     __npowers_:
   122                           	opt stack 0
   123  000829  00                 	db	0
   124  00082A  80                 	db	128
   125  00082B  3F                 	db	63
   126  00082C  CD                 	db	205
   127  00082D  CC                 	db	204
   128  00082E  3D                 	db	61
   129  00082F  D7                 	db	215
   130  000830  23                 	db	35
   131  000831  3C                 	db	60
   132  000832  12                 	db	18
   133  000833  83                 	db	131
   134  000834  3A                 	db	58
   135  000835  B7                 	db	183
   136  000836  D1                 	db	209
   137  000837  38                 	db	56
   138  000838  C6                 	db	198
   139  000839  27                 	db	39
   140  00083A  37                 	db	55
   141  00083B  38                 	db	56
   142  00083C  86                 	db	134
   143  00083D  35                 	db	53
   144  00083E  C0                 	db	192
   145  00083F  D6                 	db	214
   146  000840  33                 	db	51
   147  000841  CC                 	db	204
   148  000842  2B                 	db	43
   149  000843  32                 	db	50
   150  000844  70                 	db	112
   151  000845  89                 	db	137
   152  000846  30                 	db	48
   153  000847  E7                 	db	231
   154  000848  DB                 	db	219
   155  000849  2E                 	db	46
   156  00084A  E5                 	db	229
   157  00084B  3C                 	db	60
   158  00084C  1E                 	db	30
   159  00084D  42                 	db	66
   160  00084E  A2                 	db	162
   161  00084F  0D                 	db	13
   162  000850                     __end_of__npowers_:
   163                           	opt stack 0
   164  000850                     __powers_:
   165                           	opt stack 0
   166  000850  00                 	db	0
   167  000851  80                 	db	128
   168  000852  3F                 	db	63
   169  000853  00                 	db	0
   170  000854  20                 	db	32
   171  000855  41                 	db	65
   172  000856  00                 	db	0
   173  000857  C8                 	db	200
   174  000858  42                 	db	66
   175  000859  00                 	db	0
   176  00085A  7A                 	db	122
   177  00085B  44                 	db	68
   178  00085C  40                 	db	64
   179  00085D  1C                 	db	28
   180  00085E  46                 	db	70
   181  00085F  50                 	db	80
   182  000860  C3                 	db	195
   183  000861  47                 	db	71
   184  000862  24                 	db	36
   185  000863  74                 	db	116
   186  000864  49                 	db	73
   187  000865  97                 	db	151
   188  000866  18                 	db	24
   189  000867  4B                 	db	75
   190  000868  BC                 	db	188
   191  000869  BE                 	db	190
   192  00086A  4C                 	db	76
   193  00086B  6B                 	db	107
   194  00086C  6E                 	db	110
   195  00086D  4E                 	db	78
   196  00086E  03                 	db	3
   197  00086F  15                 	db	21
   198  000870  50                 	db	80
   199  000871  79                 	db	121
   200  000872  AD                 	db	173
   201  000873  60                 	db	96
   202  000874  F3                 	db	243
   203  000875  49                 	db	73
   204  000876  71                 	db	113
   205  000877                     __end_of__powers_:
   206                           	opt stack 0
   207  0000                     _ADCON1bits	set	4033
   208  0000                     _BAUDCONbits	set	4024
   209  0000                     _INTCON2bits	set	4081
   210  0000                     _LATAbits	set	3977
   211  0000                     _LATBbits	set	3978
   212  0000                     _LATCbits	set	3979
   213  0000                     _LATDbits	set	3980
   214  0000                     _LATEbits	set	3981
   215  0000                     _OSCCONbits	set	4051
   216  0000                     _PORTA	set	3968
   217  0000                     _PORTB	set	3969
   218  0000                     _PORTBbits	set	3969
   219  0000                     _PORTC	set	3970
   220  0000                     _PORTD	set	3971
   221  0000                     _PORTE	set	3972
   222  0000                     _RCREG	set	4014
   223  0000                     _RCSTAbits	set	4011
   224  0000                     _SPBRG	set	4015
   225  0000                     _T0CONbits	set	4053
   226  0000                     _TMR0L	set	4054
   227  0000                     _TRISAbits	set	3986
   228  0000                     _TRISBbits	set	3987
   229  0000                     _TRISCbits	set	3988
   230  0000                     _TRISDbits	set	3989
   231  0000                     _TRISEbits	set	3990
   232  0000                     _TXREG	set	4013
   233  0000                     _TXSTAbits	set	4012
   234  0000                     _BRGH	set	32098
   235  0000                     _GIE	set	32663
   236  0000                     _IPEN	set	32391
   237  0000                     _PEIE	set	32662
   238  0000                     _RBIE	set	32659
   239  0000                     _RBIF	set	32656
   240  0000                     _RCIE	set	31981
   241  0000                     _RCIF	set	31989
   242  0000                     _TMR0IE	set	32661
   243  0000                     _TMR0IF	set	32658
   244  0000                     _TRMT	set	32097
   245  000877                     STR_3:
   246  000877  58                 	db	88	;'X'
   247  000878  25                 	db	37
   248  000879  2E                 	db	46
   249  00087A  33                 	db	51	;'3'
   250  00087B  66                 	db	102	;'f'
   251  00087C  20                 	db	32
   252  00087D  59                 	db	89	;'Y'
   253  00087E  25                 	db	37
   254  00087F  2E                 	db	46
   255  000880  33                 	db	51	;'3'
   256  000881  66                 	db	102	;'f'
   257  000882  20                 	db	32
   258  000883  5A                 	db	90	;'Z'
   259  000884  25                 	db	37
   260  000885  2E                 	db	46
   261  000886  33                 	db	51	;'3'
   262  000887  66                 	db	102	;'f'
   263  000888  0A                 	db	10
   264  000889  00                 	db	0
   265  00088A                     STR_6:
   266  00088A  49                 	db	73	;'I'
   267  00088B  4E                 	db	78	;'N'
   268  00088C  56                 	db	86	;'V'
   269  00088D  41                 	db	65	;'A'
   270  00088E  4C                 	db	76	;'L'
   271  00088F  49                 	db	73	;'I'
   272  000890  44                 	db	68	;'D'
   273  000891  20                 	db	32
   274  000892  41                 	db	65	;'A'
   275  000893  52                 	db	82	;'R'
   276  000894  47                 	db	71	;'G'
   277  000895  55                 	db	85	;'U'
   278  000896  4D                 	db	77	;'M'
   279  000897  45                 	db	69	;'E'
   280  000898  4E                 	db	78	;'N'
   281  000899  54                 	db	84	;'T'
   282  00089A  0A                 	db	10
   283  00089B  00                 	db	0
   284  00089C                     STR_5:
   285  00089C  49                 	db	73	;'I'
   286  00089D  4E                 	db	78	;'N'
   287  00089E  56                 	db	86	;'V'
   288  00089F  41                 	db	65	;'A'
   289  0008A0  4C                 	db	76	;'L'
   290  0008A1  49                 	db	73	;'I'
   291  0008A2  44                 	db	68	;'D'
   292  0008A3  20                 	db	32
   293  0008A4  43                 	db	67	;'C'
   294  0008A5  4F                 	db	79	;'O'
   295  0008A6  4D                 	db	77	;'M'
   296  0008A7  4D                 	db	77	;'M'
   297  0008A8  41                 	db	65	;'A'
   298  0008A9  4E                 	db	78	;'N'
   299  0008AA  44                 	db	68	;'D'
   300  0008AB  0A                 	db	10
   301  0008AC  00                 	db	0
   302  0008AD                     STR_4:
   303  0008AD  25                 	db	37
   304  0008AE  2E                 	db	46
   305  0008AF  33                 	db	51	;'3'
   306  0008B0  66                 	db	102	;'f'
   307  0008B1  20                 	db	32
   308  0008B2  25                 	db	37
   309  0008B3  2E                 	db	46
   310  0008B4  33                 	db	51	;'3'
   311  0008B5  66                 	db	102	;'f'
   312  0008B6  20                 	db	32
   313  0008B7  25                 	db	37
   314  0008B8  2E                 	db	46
   315  0008B9  33                 	db	51	;'3'
   316  0008BA  66                 	db	102	;'f'
   317  0008BB  0A                 	db	10
   318  0008BC  00                 	db	0
   319  0008BD                     STR_8:
   320  0008BD  55                 	db	85	;'U'
   321  0008BE  4E                 	db	78	;'N'
   322  0008BF  4B                 	db	75	;'K'
   323  0008C0  4E                 	db	78	;'N'
   324  0008C1  4F                 	db	79	;'O'
   325  0008C2  57                 	db	87	;'W'
   326  0008C3  4E                 	db	78	;'N'
   327  0008C4  20                 	db	32
   328  0008C5  53                 	db	83	;'S'
   329  0008C6  54                 	db	84	;'T'
   330  0008C7  41                 	db	65	;'A'
   331  0008C8  54                 	db	84	;'T'
   332  0008C9  45                 	db	69	;'E'
   333  0008CA  0A                 	db	10
   334  0008CB  00                 	db	0
   335  0008CC                     STR_7:
   336  0008CC  4F                 	db	79	;'O'
   337  0008CD  55                 	db	85	;'U'
   338  0008CE  54                 	db	84	;'T'
   339  0008CF  20                 	db	32
   340  0008D0  4F                 	db	79	;'O'
   341  0008D1  46                 	db	70	;'F'
   342  0008D2  20                 	db	32
   343  0008D3  42                 	db	66	;'B'
   344  0008D4  4F                 	db	79	;'O'
   345  0008D5  55                 	db	85	;'U'
   346  0008D6  4E                 	db	78	;'N'
   347  0008D7  44                 	db	68	;'D'
   348  0008D8  53                 	db	83	;'S'
   349  0008D9  0A                 	db	10
   350  0008DA  00                 	db	0
   351  0008DB                     STR_1:
   352  0008DB  20                 	db	32
   353  0008DC  00                 	db	0
   354  0000                     
   355                           ; #config settings
   356  0008DD  00                 	db	0	; dummy byte at the end
   357  0000                     
   358                           	psect	cinit
   359  003D08                     __pcinit:
   360                           	opt stack 0
   361  003D08                     start_initialization:
   362                           	opt stack 0
   363  003D08                     __initialization:
   364                           	opt stack 0
   365                           
   366                           ; Clear objects allocated to BANK1 (40 bytes)
   367  003D08  EE01  F000         	lfsr	0,__pbssBANK1
   368  003D0C  0E28               	movlw	40
   369  003D0E                     clear_0:
   370  003D0E  6AEE               	clrf	postinc0,c
   371  003D10  06E8               	decf	wreg,f,c
   372  003D12  E1FD               	bnz	clear_0
   373                           
   374                           ; Clear objects allocated to BANK0 (9 bytes)
   375  003D14  EE00  F0E3         	lfsr	0,__pbssBANK0
   376  003D18  0E09               	movlw	9
   377  003D1A                     clear_1:
   378  003D1A  6AEE               	clrf	postinc0,c
   379  003D1C  06E8               	decf	wreg,f,c
   380  003D1E  E1FD               	bnz	clear_1
   381                           
   382                           ; Clear objects allocated to COMRAM (8 bytes)
   383  003D20  EE00  F046         	lfsr	0,__pbssCOMRAM
   384  003D24  0E08               	movlw	8
   385  003D26                     clear_2:
   386  003D26  6AEE               	clrf	postinc0,c
   387  003D28  06E8               	decf	wreg,f,c
   388  003D2A  E1FD               	bnz	clear_2
   389                           
   390                           ; Initialize objects allocated to BANK0 (3 bytes)
   391                           ; load TBLPTR registers with __pidataBANK0
   392  003D2C  0E08               	movlw	low __pidataBANK0
   393  003D2E  6EF6               	movwf	tblptrl,c
   394  003D30  0E43               	movlw	high __pidataBANK0
   395  003D32  6EF7               	movwf	tblptrh,c
   396  003D34  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   397  003D36  6EF8               	movwf	tblptru,c
   398  003D38  0009               	tblrd		*+	;fetch initializer
   399  003D3A  CFF5 F0EC          	movff	tablat,__pdataBANK0
   400  003D3E  0009               	tblrd		*+	;fetch initializer
   401  003D40  CFF5 F0ED          	movff	tablat,__pdataBANK0+1
   402  003D44  0009               	tblrd		*+	;fetch initializer
   403  003D46  CFF5 F0EE          	movff	tablat,__pdataBANK0+2
   404                           
   405                           ; Initialize objects allocated to COMRAM (2 bytes)
   406                           ; load TBLPTR registers with __pidataCOMRAM
   407  003D4A  0E0B               	movlw	low __pidataCOMRAM
   408  003D4C  6EF6               	movwf	tblptrl,c
   409  003D4E  0E43               	movlw	high __pidataCOMRAM
   410  003D50  6EF7               	movwf	tblptrh,c
   411  003D52  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   412  003D54  6EF8               	movwf	tblptru,c
   413  003D56  0009               	tblrd		*+	;fetch initializer
   414  003D58  CFF5 F04E          	movff	tablat,__pdataCOMRAM
   415  003D5C  0009               	tblrd		*+	;fetch initializer
   416  003D5E  CFF5 F04F          	movff	tablat,__pdataCOMRAM+1
   417  003D62                     end_of_initialization:
   418                           	opt stack 0
   419  003D62                     __end_of__initialization:
   420                           	opt stack 0
   421  003D62  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   422  003D64  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   423  003D66  0E00               	movlw	low (__Lmediumconst shr (0+16))
   424  003D68  6EF8               	movwf	tblptru,c
   425  003D6A  0100               	movlb	0
   426  003D6C  EF95  F020         	goto	_main	;jump to C main() function
   427                           tblptru	equ	0xFF8
   428                           tblptrh	equ	0xFF7
   429                           tblptrl	equ	0xFF6
   430                           tablat	equ	0xFF5
   431                           postinc0	equ	0xFEE
   432                           wreg	equ	0xFE8
   433                           
   434                           	psect	bssCOMRAM
   435  000046                     __pbssCOMRAM:
   436                           	opt stack 0
   437  000046                     _RPOS:
   438                           	opt stack 0
   439  000046                     	ds	3
   440  000049                     _SYSTEM_TIME:
   441                           	opt stack 0
   442  000049                     	ds	2
   443  00004B                     strtok@sp:
   444                           	opt stack 0
   445  00004B                     	ds	2
   446  00004D                     _GCODE_PENDING:
   447                           	opt stack 0
   448  00004D                     	ds	1
   449                           tblptru	equ	0xFF8
   450                           tblptrh	equ	0xFF7
   451                           tblptrl	equ	0xFF6
   452                           tablat	equ	0xFF5
   453                           postinc0	equ	0xFEE
   454                           wreg	equ	0xFE8
   455                           
   456                           	psect	dataCOMRAM
   457  00004E                     __pdataCOMRAM:
   458                           	opt stack 0
   459  00004E                     _ctr:
   460                           	opt stack 0
   461  00004E                     	ds	2
   462                           tblptru	equ	0xFF8
   463                           tblptrh	equ	0xFF7
   464                           tblptrl	equ	0xFF6
   465                           tablat	equ	0xFF5
   466                           postinc0	equ	0xFEE
   467                           wreg	equ	0xFE8
   468                           
   469                           	psect	bssBANK0
   470  0000E3                     __pbssBANK0:
   471                           	opt stack 0
   472  0000E3                     _XPOS:
   473                           	opt stack 0
   474  0000E3                     	ds	3
   475  0000E6                     _YPOS:
   476                           	opt stack 0
   477  0000E6                     	ds	3
   478  0000E9                     _ZPOS:
   479                           	opt stack 0
   480  0000E9                     	ds	3
   481                           tblptru	equ	0xFF8
   482                           tblptrh	equ	0xFF7
   483                           tblptrl	equ	0xFF6
   484                           tablat	equ	0xFF5
   485                           postinc0	equ	0xFEE
   486                           wreg	equ	0xFE8
   487                           
   488                           	psect	dataBANK0
   489  0000EC                     __pdataBANK0:
   490                           	opt stack 0
   491  0000EC                     _DEFAULT_FEEDRATE:
   492                           	opt stack 0
   493  0000EC                     	ds	3
   494                           tblptru	equ	0xFF8
   495                           tblptrh	equ	0xFF7
   496                           tblptrl	equ	0xFF6
   497                           tablat	equ	0xFF5
   498                           postinc0	equ	0xFEE
   499                           wreg	equ	0xFE8
   500                           
   501                           	psect	bssBANK1
   502  000100                     __pbssBANK1:
   503                           	opt stack 0
   504  000100                     _uart_str:
   505                           	opt stack 0
   506  000100                     	ds	40
   507                           tblptru	equ	0xFF8
   508                           tblptrh	equ	0xFF7
   509                           tblptrl	equ	0xFF6
   510                           tablat	equ	0xFF5
   511                           postinc0	equ	0xFEE
   512                           wreg	equ	0xFE8
   513                           
   514                           	psect	cstackBANK0
   515  000060                     __pcstackBANK0:
   516                           	opt stack 0
   517  000060                     ___ftadd@sign:
   518                           	opt stack 0
   519  000060                     ___fttol@sign1:
   520                           	opt stack 0
   521                           
   522                           ; 1 bytes @ 0x0
   523  000060                     	ds	1
   524  000061                     ___ftadd@exp2:
   525                           	opt stack 0
   526  000061                     ___fttol@lval:
   527                           	opt stack 0
   528                           
   529                           ; 4 bytes @ 0x1
   530  000061                     	ds	1
   531  000062                     ___ftadd@exp1:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x2
   535  000062                     	ds	1
   536  000063                     ?___ftsub:
   537                           	opt stack 0
   538  000063                     ___ftsub@f1:
   539                           	opt stack 0
   540                           
   541                           ; 3 bytes @ 0x3
   542  000063                     	ds	2
   543  000065                     ___fttol@exp1:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x5
   547  000065                     	ds	1
   548  000066                     ?_calculate_motordelay:
   549                           	opt stack 0
   550  000066                     calculate_motordelay@feedrate:
   551                           	opt stack 0
   552  000066                     moveToSwitch@limit:
   553                           	opt stack 0
   554  000066                     linearMove1Axis@arg:
   555                           	opt stack 0
   556  000066                     ___ftsub@f2:
   557                           	opt stack 0
   558                           
   559                           ; 3 bytes @ 0x6
   560  000066                     	ds	2
   561  000068                     moveToSwitch@axis:
   562                           	opt stack 0
   563  000068                     calculate_motordelay@i:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x8
   567  000068                     	ds	1
   568  000069                     ?_sprintf:
   569                           	opt stack 0
   570  000069                     linearMove1Axis@feedrate:
   571                           	opt stack 0
   572  000069                     moveToSwitch@delay:
   573                           	opt stack 0
   574  000069                     sprintf@sp:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x9
   578  000069                     	ds	1
   579  00006A                     calculate_motordelay@steps:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0xA
   583  00006A                     	ds	1
   584  00006B                     linearMove1Axis@steps:
   585                           	opt stack 0
   586  00006B                     sprintf@f:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0xB
   590  00006B                     	ds	1
   591  00006C                     calculate_motordelay@halfdelay:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0xC
   595  00006C                     	ds	1
   596  00006D                     linearMove1Axis@del:
   597                           	opt stack 0
   598                           
   599                           ; 3 bytes @ 0xD
   600  00006D                     	ds	1
   601  00006E                     _calculate_motordelay$2115:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0xE
   605  00006E                     	ds	2
   606  000070                     linearMove1Axis@i:
   607                           	opt stack 0
   608  000070                     calculate_motordelay@init_feedrate:
   609                           	opt stack 0
   610                           
   611                           ; 2 bytes @ 0x10
   612  000070                     	ds	2
   613  000072                     linearMove1Axis@calc_delay:
   614                           	opt stack 0
   615  000072                     calculate_motordelay@acc_max:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x12
   619  000072                     	ds	2
   620  000074                     linearMove1Axis@axis:
   621                           	opt stack 0
   622  000074                     calculate_motordelay@x:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x14
   626  000074                     	ds	1
   627  000075                     homeAxis@axis:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x15
   631  000075                     	ds	1
   632  000076                     ??_sprintf:
   633  000076                     calculate_motordelay@depth:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0x16
   637  000076                     	ds	2
   638  000078                     linearMove2Axis@x_target:
   639                           	opt stack 0
   640                           
   641                           ; 3 bytes @ 0x18
   642  000078                     	ds	3
   643  00007B                     linearMove2Axis@y_target:
   644                           	opt stack 0
   645                           
   646                           ; 3 bytes @ 0x1B
   647  00007B                     	ds	1
   648  00007C                     _sprintf$2119:
   649                           	opt stack 0
   650                           
   651                           ; 3 bytes @ 0x1C
   652  00007C                     	ds	2
   653  00007E                     linearMove2Axis@feedrate:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x1E
   657  00007E                     	ds	1
   658  00007F                     sprintf@ap:
   659                           	opt stack 0
   660                           
   661                           ; 2 bytes @ 0x1F
   662  00007F                     	ds	1
   663  000080                     linearMove2Axis@singlearg:
   664                           	opt stack 0
   665                           
   666                           ; 3 bytes @ 0x20
   667  000080                     	ds	1
   668  000081                     sprintf@flag:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0x21
   672  000081                     	ds	2
   673  000083                     linearMove2Axis@singleaxis:
   674                           	opt stack 0
   675  000083                     sprintf@val:
   676                           	opt stack 0
   677                           
   678                           ; 4 bytes @ 0x23
   679  000083                     	ds	1
   680  000084                     _linearMove2Axis$2114:
   681                           	opt stack 0
   682                           
   683                           ; 2 bytes @ 0x24
   684  000084                     	ds	2
   685  000086                     linearMove2Axis@del_x:
   686                           	opt stack 0
   687                           
   688                           ; 3 bytes @ 0x26
   689  000086                     	ds	1
   690  000087                     sprintf@exp:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x27
   694  000087                     	ds	2
   695  000089                     linearMove2Axis@del_y:
   696                           	opt stack 0
   697  000089                     sprintf@tmpval:
   698                           	opt stack 0
   699                           
   700                           ; 4 bytes @ 0x29
   701  000089                     	ds	3
   702  00008C                     linearMove2Axis@del:
   703                           	opt stack 0
   704                           
   705                           ; 3 bytes @ 0x2C
   706  00008C                     	ds	1
   707  00008D                     sprintf@prec:
   708                           	opt stack 0
   709                           
   710                           ; 2 bytes @ 0x2D
   711  00008D                     	ds	2
   712  00008F                     linearMove2Axis@steps:
   713                           	opt stack 0
   714  00008F                     sprintf@fval:
   715                           	opt stack 0
   716                           
   717                           ; 3 bytes @ 0x2F
   718  00008F                     	ds	2
   719  000091                     linearMove2Axis@i:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x31
   723  000091                     	ds	1
   724  000092                     sprintf@c:
   725                           	opt stack 0
   726                           
   727                           ; 1 bytes @ 0x32
   728  000092                     	ds	1
   729  000093                     linearMove2Axis@calc_delay:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x33
   733  000093                     	ds	2
   734  000095                     execGcode@Gparsed:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x35
   738  000095                     	ds	2
   739  000097                     
   740                           ; 1 bytes @ 0x37
   741  000097                     	ds	1
   742  000098                     execGcode@arg2:
   743                           	opt stack 0
   744                           
   745                           ; 3 bytes @ 0x38
   746  000098                     	ds	3
   747  00009B                     execGcode@i:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0x3B
   751  00009B                     	ds	2
   752  00009D                     execGcode@arg1:
   753                           	opt stack 0
   754                           
   755                           ; 3 bytes @ 0x3D
   756  00009D                     	ds	3
   757  0000A0                     execGcode@feedrate:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x40
   761  0000A0                     	ds	2
   762  0000A2                     execGcode@axis:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0x42
   766  0000A2                     	ds	1
   767  0000A3                     parseGcode@Gcode:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x43
   771  0000A3                     	ds	2
   772  0000A5                     parseGcode@finalposition:
   773                           	opt stack 0
   774                           
   775                           ; 40 bytes @ 0x45
   776  0000A5                     	ds	40
   777  0000CD                     parseGcode@gcode_process:
   778                           	opt stack 0
   779                           
   780                           ; 1 bytes @ 0x6D
   781  0000CD                     	ds	1
   782  0000CE                     parseGcode@comment_delim:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0x6E
   786  0000CE                     	ds	2
   787  0000D0                     parseGcode@Gparsed:
   788                           	opt stack 0
   789                           
   790                           ; 16 bytes @ 0x70
   791  0000D0                     	ds	16
   792  0000E0                     parseGcode@i:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x80
   796  0000E0                     	ds	1
   797  0000E1                     parseGcode@buf:
   798                           	opt stack 0
   799                           
   800                           ; 2 bytes @ 0x81
   801  0000E1                     	ds	2
   802                           tblptru	equ	0xFF8
   803                           tblptrh	equ	0xFF7
   804                           tblptrl	equ	0xFF6
   805                           tablat	equ	0xFF5
   806                           postinc0	equ	0xFEE
   807                           wreg	equ	0xFE8
   808                           
   809                           	psect	cstackCOMRAM
   810  000001                     __pcstackCOMRAM:
   811                           	opt stack 0
   812  000001                     UART_interrupt@byte:
   813                           	opt stack 0
   814                           
   815                           ; 1 bytes @ 0x0
   816  000001                     	ds	1
   817  000002                     ??_ISR:
   818                           
   819                           ; 1 bytes @ 0x1
   820  000002                     	ds	14
   821  000010                     ??_isdigit:
   822  000010                     ??_isspace:
   823  000010                     ?_strchr:
   824                           	opt stack 0
   825  000010                     ?___awmod:
   826                           	opt stack 0
   827  000010                     ?___ftpack:
   828                           	opt stack 0
   829  000010                     ?___ftneg:
   830                           	opt stack 0
   831  000010                     ?__tdiv_to_l_:
   832                           	opt stack 0
   833  000010                     ?__div_to_l_:
   834                           	opt stack 0
   835  000010                     ?___lmul:
   836                           	opt stack 0
   837  000010                     ?___aldiv:
   838                           	opt stack 0
   839  000010                     ?___lldiv:
   840                           	opt stack 0
   841  000010                     ?___llmod:
   842                           	opt stack 0
   843  000010                     writeUSB@byte:
   844                           	opt stack 0
   845  000010                     delay_us@us:
   846                           	opt stack 0
   847  000010                     delay_ms@ms:
   848                           	opt stack 0
   849  000010                     ___awmod@dividend:
   850                           	opt stack 0
   851  000010                     memset@p1:
   852                           	opt stack 0
   853  000010                     strchr@ptr:
   854                           	opt stack 0
   855  000010                     __div_to_l_@f1:
   856                           	opt stack 0
   857  000010                     ___ftpack@arg:
   858                           	opt stack 0
   859  000010                     __tdiv_to_l_@f1:
   860                           	opt stack 0
   861  000010                     ___ftge@ff1:
   862                           	opt stack 0
   863  000010                     ___ftneg@f1:
   864                           	opt stack 0
   865  000010                     ___lmul@multiplier:
   866                           	opt stack 0
   867  000010                     ___aldiv@dividend:
   868                           	opt stack 0
   869  000010                     ___lldiv@dividend:
   870                           	opt stack 0
   871  000010                     ___llmod@dividend:
   872                           	opt stack 0
   873                           
   874                           ; 4 bytes @ 0xF
   875  000010                     	ds	1
   876  000011                     _isdigit$1744:
   877                           	opt stack 0
   878  000011                     _isspace$1747:
   879                           	opt stack 0
   880  000011                     writeUSBstring@string:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x10
   884  000011                     	ds	1
   885  000012                     ??_delay_us:
   886  000012                     ??_delay_ms:
   887  000012                     isdigit@c:
   888                           	opt stack 0
   889  000012                     isspace@c:
   890                           	opt stack 0
   891  000012                     ___awmod@divisor:
   892                           	opt stack 0
   893  000012                     memset@c:
   894                           	opt stack 0
   895  000012                     strchr@chr:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x11
   899  000012                     	ds	1
   900  000013                     ??_writeUSBstring:
   901  000013                     ___ftpack@exp:
   902                           	opt stack 0
   903  000013                     __div_to_l_@f2:
   904                           	opt stack 0
   905  000013                     __tdiv_to_l_@f2:
   906                           	opt stack 0
   907  000013                     ___ftge@ff2:
   908                           	opt stack 0
   909                           
   910                           ; 3 bytes @ 0x12
   911  000013                     	ds	1
   912  000014                     ??_strchr:
   913  000014                     ___awmod@counter:
   914                           	opt stack 0
   915  000014                     ___ftpack@sign:
   916                           	opt stack 0
   917  000014                     delay_us@current_time:
   918                           	opt stack 0
   919  000014                     delay_ms@current_time:
   920                           	opt stack 0
   921  000014                     memset@n:
   922                           	opt stack 0
   923  000014                     ___lmul@multiplicand:
   924                           	opt stack 0
   925  000014                     ___aldiv@divisor:
   926                           	opt stack 0
   927  000014                     ___lldiv@divisor:
   928                           	opt stack 0
   929  000014                     ___llmod@divisor:
   930                           	opt stack 0
   931                           
   932                           ; 4 bytes @ 0x13
   933  000014                     	ds	1
   934  000015                     ??___ftpack:
   935  000015                     writeUSBstring@i:
   936                           	opt stack 0
   937  000015                     ___awmod@sign:
   938                           	opt stack 0
   939                           
   940                           ; 1 bytes @ 0x14
   941  000015                     	ds	1
   942  000016                     ??__tdiv_to_l_:
   943  000016                     ??___ftge:
   944  000016                     ?_strspn:
   945                           	opt stack 0
   946  000016                     ?_strcspn:
   947                           	opt stack 0
   948  000016                     ?___awdiv:
   949                           	opt stack 0
   950  000016                     delay_ms@us:
   951                           	opt stack 0
   952  000016                     ___awdiv@dividend:
   953                           	opt stack 0
   954  000016                     memset@p:
   955                           	opt stack 0
   956  000016                     strcspn@s1:
   957                           	opt stack 0
   958  000016                     strspn@s1:
   959                           	opt stack 0
   960  000016                     __div_to_l_@quot:
   961                           	opt stack 0
   962                           
   963                           ; 4 bytes @ 0x15
   964  000016                     	ds	2
   965  000018                     ?___altoft:
   966                           	opt stack 0
   967  000018                     ?___awtoft:
   968                           	opt stack 0
   969  000018                     ?___lltoft:
   970                           	opt stack 0
   971  000018                     ?___lwtoft:
   972                           	opt stack 0
   973  000018                     blinkInitLed@i:
   974                           	opt stack 0
   975  000018                     ___aldiv@counter:
   976                           	opt stack 0
   977  000018                     ___llmod@counter:
   978                           	opt stack 0
   979  000018                     ___awdiv@divisor:
   980                           	opt stack 0
   981  000018                     ___awtoft@c:
   982                           	opt stack 0
   983  000018                     ___lwtoft@c:
   984                           	opt stack 0
   985  000018                     strcspn@s2:
   986                           	opt stack 0
   987  000018                     strspn@s2:
   988                           	opt stack 0
   989  000018                     ___lmul@product:
   990                           	opt stack 0
   991  000018                     ___altoft@c:
   992                           	opt stack 0
   993  000018                     ___lldiv@quotient:
   994                           	opt stack 0
   995  000018                     ___lltoft@c:
   996                           	opt stack 0
   997                           
   998                           ; 4 bytes @ 0x17
   999  000018                     	ds	1
  1000  000019                     ___aldiv@sign:
  1001                           	opt stack 0
  1002  000019                     __tdiv_to_l_@quot:
  1003                           	opt stack 0
  1004                           
  1005                           ; 4 bytes @ 0x18
  1006  000019                     	ds	1
  1007  00001A                     ??_strspn:
  1008  00001A                     ??_strcspn:
  1009  00001A                     ___awdiv@counter:
  1010                           	opt stack 0
  1011  00001A                     __div_to_l_@cntr:
  1012                           	opt stack 0
  1013  00001A                     ___aldiv@quotient:
  1014                           	opt stack 0
  1015                           
  1016                           ; 4 bytes @ 0x19
  1017  00001A                     	ds	1
  1018  00001B                     ___awdiv@sign:
  1019                           	opt stack 0
  1020  00001B                     ___awtoft@sign:
  1021                           	opt stack 0
  1022  00001B                     __div_to_l_@exp1:
  1023                           	opt stack 0
  1024  00001B                     strcspn@i:
  1025                           	opt stack 0
  1026  00001B                     strspn@i:
  1027                           	opt stack 0
  1028                           
  1029                           ; 2 bytes @ 0x1A
  1030  00001B                     	ds	1
  1031  00001C                     ??___altoft:
  1032  00001C                     ??___lltoft:
  1033  00001C                     ?___ftdiv:
  1034                           	opt stack 0
  1035  00001C                     ___lldiv@counter:
  1036                           	opt stack 0
  1037  00001C                     ___awdiv@quotient:
  1038                           	opt stack 0
  1039  00001C                     ___ftdiv@f1:
  1040                           	opt stack 0
  1041                           
  1042                           ; 3 bytes @ 0x1B
  1043  00001C                     	ds	1
  1044  00001D                     ?_strtok:
  1045                           	opt stack 0
  1046  00001D                     __tdiv_to_l_@cntr:
  1047                           	opt stack 0
  1048  00001D                     strtok@s1:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x1C
  1052  00001D                     	ds	1
  1053  00001E                     ?___wmul:
  1054                           	opt stack 0
  1055  00001E                     __tdiv_to_l_@exp1:
  1056                           	opt stack 0
  1057  00001E                     setupUSB@baudrate:
  1058                           	opt stack 0
  1059  00001E                     ___wmul@multiplier:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x1D
  1063  00001E                     	ds	1
  1064  00001F                     strtok@s2:
  1065                           	opt stack 0
  1066  00001F                     ___ftdiv@f2:
  1067                           	opt stack 0
  1068                           
  1069                           ; 3 bytes @ 0x1E
  1070  00001F                     	ds	1
  1071  000020                     ___altoft@exp:
  1072                           	opt stack 0
  1073  000020                     ___lltoft@exp:
  1074                           	opt stack 0
  1075  000020                     ___wmul@multiplicand:
  1076                           	opt stack 0
  1077  000020                     setupUSB@x:
  1078                           	opt stack 0
  1079                           
  1080                           ; 4 bytes @ 0x1F
  1081  000020                     	ds	1
  1082  000021                     ___altoft@sign:
  1083                           	opt stack 0
  1084                           
  1085                           ; 1 bytes @ 0x20
  1086  000021                     	ds	1
  1087  000022                     ??___ftdiv:
  1088  000022                     ___wmul@product:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x21
  1092  000022                     	ds	2
  1093  000024                     ?___lwdiv:
  1094                           	opt stack 0
  1095  000024                     ?___ftmul:
  1096                           	opt stack 0
  1097  000024                     ___lwdiv@dividend:
  1098                           	opt stack 0
  1099  000024                     ___ftmul@f1:
  1100                           	opt stack 0
  1101                           
  1102                           ; 3 bytes @ 0x23
  1103  000024                     	ds	1
  1104  000025                     ___ftdiv@cntr:
  1105                           	opt stack 0
  1106                           
  1107                           ; 1 bytes @ 0x24
  1108  000025                     	ds	1
  1109  000026                     ___lwdiv@divisor:
  1110                           	opt stack 0
  1111  000026                     ___ftdiv@f3:
  1112                           	opt stack 0
  1113                           
  1114                           ; 3 bytes @ 0x25
  1115  000026                     	ds	1
  1116  000027                     ___ftmul@f2:
  1117                           	opt stack 0
  1118                           
  1119                           ; 3 bytes @ 0x26
  1120  000027                     	ds	1
  1121  000028                     ___lwdiv@quotient:
  1122                           	opt stack 0
  1123                           
  1124                           ; 2 bytes @ 0x27
  1125  000028                     	ds	1
  1126  000029                     ___ftdiv@exp:
  1127                           	opt stack 0
  1128                           
  1129                           ; 1 bytes @ 0x28
  1130  000029                     	ds	1
  1131  00002A                     ??___ftmul:
  1132  00002A                     ___ftdiv@sign:
  1133                           	opt stack 0
  1134  00002A                     ___lwdiv@counter:
  1135                           	opt stack 0
  1136                           
  1137                           ; 1 bytes @ 0x29
  1138  00002A                     	ds	3
  1139  00002D                     ___ftmul@exp:
  1140                           	opt stack 0
  1141                           
  1142                           ; 1 bytes @ 0x2C
  1143  00002D                     	ds	1
  1144  00002E                     ___ftmul@f3_as_product:
  1145                           	opt stack 0
  1146                           
  1147                           ; 3 bytes @ 0x2D
  1148  00002E                     	ds	3
  1149  000031                     ___ftmul@cntr:
  1150                           	opt stack 0
  1151                           
  1152                           ; 1 bytes @ 0x30
  1153  000031                     	ds	1
  1154  000032                     ___ftmul@sign:
  1155                           	opt stack 0
  1156                           
  1157                           ; 1 bytes @ 0x31
  1158  000032                     	ds	1
  1159  000033                     ?_fround:
  1160                           	opt stack 0
  1161  000033                     ?_scale:
  1162                           	opt stack 0
  1163  000033                     ?_strtod:
  1164                           	opt stack 0
  1165  000033                     strtod@s:
  1166                           	opt stack 0
  1167                           
  1168                           ; 2 bytes @ 0x32
  1169  000033                     	ds	2
  1170  000035                     strtod@res:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x34
  1174  000035                     	ds	1
  1175  000036                     _fround$2117:
  1176                           	opt stack 0
  1177  000036                     _scale$2118:
  1178                           	opt stack 0
  1179                           
  1180                           ; 3 bytes @ 0x35
  1181  000036                     	ds	1
  1182  000037                     ??_strtod:
  1183                           
  1184                           ; 1 bytes @ 0x36
  1185  000037                     	ds	1
  1186  000038                     strtod@eexp:
  1187                           	opt stack 0
  1188                           
  1189                           ; 1 bytes @ 0x37
  1190  000038                     	ds	1
  1191  000039                     scale@scl:
  1192                           	opt stack 0
  1193  000039                     strtod@flags:
  1194                           	opt stack 0
  1195  000039                     _fround$2116:
  1196                           	opt stack 0
  1197                           
  1198                           ; 3 bytes @ 0x38
  1199  000039                     	ds	1
  1200  00003A                     ?___fttol:
  1201                           	opt stack 0
  1202  00003A                     strtod@expon:
  1203                           	opt stack 0
  1204  00003A                     ___fttol@f1:
  1205                           	opt stack 0
  1206                           
  1207                           ; 3 bytes @ 0x39
  1208  00003A                     	ds	1
  1209  00003B                     strtod@_u:
  1210                           	opt stack 0
  1211                           
  1212                           ; 4 bytes @ 0x3A
  1213  00003B                     	ds	1
  1214  00003C                     fround@prec:
  1215                           	opt stack 0
  1216                           
  1217                           ; 1 bytes @ 0x3B
  1218  00003C                     	ds	1
  1219  00003D                     ?___ftadd:
  1220                           	opt stack 0
  1221  00003D                     ___ftadd@f1:
  1222                           	opt stack 0
  1223                           
  1224                           ; 3 bytes @ 0x3C
  1225  00003D                     	ds	1
  1226  00003E                     ??___fttol:
  1227                           
  1228                           ; 1 bytes @ 0x3D
  1229  00003E                     	ds	1
  1230  00003F                     ?_atof:
  1231                           	opt stack 0
  1232  00003F                     atof@s:
  1233                           	opt stack 0
  1234                           
  1235                           ; 2 bytes @ 0x3E
  1236  00003F                     	ds	1
  1237  000040                     ___ftadd@f2:
  1238                           	opt stack 0
  1239                           
  1240                           ; 3 bytes @ 0x3F
  1241  000040                     	ds	2
  1242  000042                     
  1243                           ; 1 bytes @ 0x41
  1244  000042                     	ds	1
  1245  000043                     ??_calculate_motordelay:
  1246  000043                     ??___ftadd:
  1247  000043                     moveToSwitch@speed:
  1248                           	opt stack 0
  1249                           
  1250                           ; 2 bytes @ 0x42
  1251  000043                     	ds	2
  1252  000045                     
  1253                           ; 1 bytes @ 0x44
  1254  000045                     	ds	1
  1255  000046                     tblptru	equ	0xFF8
  1256                           tblptrh	equ	0xFF7
  1257                           tblptrl	equ	0xFF6
  1258                           tablat	equ	0xFF5
  1259                           postinc0	equ	0xFEE
  1260                           wreg	equ	0xFE8
  1261                           
  1262                           ; 1 bytes @ 0x45
  1263 ;;
  1264 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1265 ;;
  1266 ;; *************** function _main *****************
  1267 ;; Defined at:
  1268 ;;		line 36 in file "main.c"
  1269 ;; Parameters:    Size  Location     Type
  1270 ;;		None
  1271 ;; Auto vars:     Size  Location     Type
  1272 ;;		None
  1273 ;; Return value:  Size  Location     Type
  1274 ;;                  1    wreg      void 
  1275 ;; Registers used:
  1276 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1277 ;; Tracked objects:
  1278 ;;		On entry : 0/0
  1279 ;;		On exit  : 0/0
  1280 ;;		Unchanged: 0/0
  1281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1282 ;;      Params:         0       0       0       0       0       0       0       0       0
  1283 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1284 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1285 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1286 ;;Total ram usage:        0 bytes
  1287 ;; Hardware stack levels required when called:    8
  1288 ;; This function calls:
  1289 ;;		_blinkInitLed
  1290 ;;		_parseGcode
  1291 ;;		_setupGPIO
  1292 ;;		_setupInterrupts
  1293 ;;		_setupOscillator
  1294 ;;		_setupTimer
  1295 ;;		_setupUSB
  1296 ;; This function is called by:
  1297 ;;		Startup code after reset
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           	psect	text0
  1302  00412A                     __ptext0:
  1303                           	opt stack 0
  1304  00412A                     _main:
  1305                           	opt stack 23
  1306                           
  1307                           ;main.c: 40: setupOscillator();
  1308                           
  1309                           ;incstack = 0
  1310  00412A  EC81  F021         	call	_setupOscillator	;wreg free
  1311                           
  1312                           ;main.c: 41: setupGPIO();
  1313  00412E  EC6D  F01F         	call	_setupGPIO	;wreg free
  1314                           
  1315                           ;main.c: 42: setupTimer();
  1316  004132  EC63  F021         	call	_setupTimer	;wreg free
  1317                           
  1318                           ;main.c: 43: setupUSB((9600));
  1319  004136  0E25               	movlw	37
  1320  004138  6E1F               	movwf	setupUSB@baudrate+1,c
  1321  00413A  0E80               	movlw	128
  1322  00413C  6E1E               	movwf	setupUSB@baudrate,c
  1323  00413E  EC80  F01B         	call	_setupUSB	;wreg free
  1324                           
  1325                           ;main.c: 45: setupInterrupts();
  1326  004142  EC6C  F021         	call	_setupInterrupts	;wreg free
  1327                           
  1328                           ;main.c: 48: blinkInitLed();
  1329  004146  ECE3  F020         	call	_blinkInitLed	;wreg free
  1330  00414A                     l6468:
  1331                           
  1332                           ;main.c: 53: {
  1333                           ;main.c: 54: if (GCODE_PENDING) {parseGcode(uart_str);}
  1334  00414A  504D               	movf	_GCODE_PENDING,w,c
  1335  00414C  B4D8               	btfsc	status,2,c
  1336  00414E  D7FD               	goto	l6468
  1337  004150  0E00               	movlw	low _uart_str
  1338  004152  0100               	movlb	0	; () banked
  1339  004154  6FA3               	movwf	parseGcode@Gcode& (0+255),b
  1340  004156  0E01               	movlw	high _uart_str
  1341  004158  0100               	movlb	0	; () banked
  1342  00415A  6FA4               	movwf	(parseGcode@Gcode+1)& (0+255),b
  1343  00415C  ECEE  F015         	call	_parseGcode	;wreg free
  1344  004160  D7F4               	goto	l6468
  1345  004162                     __end_of_main:
  1346                           	opt stack 0
  1347                           tblptru	equ	0xFF8
  1348                           tblptrh	equ	0xFF7
  1349                           tblptrl	equ	0xFF6
  1350                           tablat	equ	0xFF5
  1351                           postinc0	equ	0xFEE
  1352                           wreg	equ	0xFE8
  1353                           status	equ	0xFD8
  1354                           
  1355 ;; *************** function _setupUSB *****************
  1356 ;; Defined at:
  1357 ;;		line 12 in file "usb.c"
  1358 ;; Parameters:    Size  Location     Type
  1359 ;;  baudrate        2   29[COMRAM] int 
  1360 ;; Auto vars:     Size  Location     Type
  1361 ;;  x               4   31[COMRAM] long 
  1362 ;; Return value:  Size  Location     Type
  1363 ;;                  1    wreg      unsigned char 
  1364 ;; Registers used:
  1365 ;;		wreg, status,2, status,0, cstack
  1366 ;; Tracked objects:
  1367 ;;		On entry : 0/0
  1368 ;;		On exit  : 0/0
  1369 ;;		Unchanged: 0/0
  1370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1371 ;;      Params:         2       0       0       0       0       0       0       0       0
  1372 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1373 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1374 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1375 ;;Total ram usage:        6 bytes
  1376 ;; Hardware stack levels used:    1
  1377 ;; Hardware stack levels required when called:    3
  1378 ;; This function calls:
  1379 ;;		___aldiv
  1380 ;; This function is called by:
  1381 ;;		_main
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           	psect	text1
  1386  003700                     __ptext1:
  1387                           	opt stack 0
  1388  003700                     _setupUSB:
  1389                           	opt stack 27
  1390                           
  1391                           ;usb.c: 14: long x;
  1392                           ;usb.c: 17: BRGH = 0;
  1393                           
  1394                           ;incstack = 0
  1395  003700  94AC               	bcf	4012,2,c	;volatile
  1396                           
  1397                           ;usb.c: 18: x = ((20000000)>>6) / baudrate; --x;
  1398  003702  0EB4               	movlw	180
  1399  003704  6E10               	movwf	___aldiv@dividend,c
  1400  003706  0EC4               	movlw	196
  1401  003708  6E11               	movwf	___aldiv@dividend+1,c
  1402  00370A  0E04               	movlw	4
  1403  00370C  6E12               	movwf	___aldiv@dividend+2,c
  1404  00370E  0E00               	movlw	0
  1405  003710  6E13               	movwf	___aldiv@dividend+3,c
  1406  003712  C01E  F014         	movff	setupUSB@baudrate,___aldiv@divisor
  1407  003716  C01F  F015         	movff	setupUSB@baudrate+1,___aldiv@divisor+1
  1408  00371A  0E00               	movlw	0
  1409  00371C  BE15               	btfsc	___aldiv@divisor+1,7,c
  1410  00371E  0EFF               	movlw	-1
  1411  003720  6E16               	movwf	___aldiv@divisor+2,c
  1412  003722  6E17               	movwf	___aldiv@divisor+3,c
  1413  003724  EC1A  F01B         	call	___aldiv	;wreg free
  1414  003728  C010  F020         	movff	?___aldiv,setupUSB@x
  1415  00372C  C011  F021         	movff	?___aldiv+1,setupUSB@x+1
  1416  003730  C012  F022         	movff	?___aldiv+2,setupUSB@x+2
  1417  003734  C013  F023         	movff	?___aldiv+3,setupUSB@x+3
  1418  003738  0EFF               	movlw	255
  1419  00373A  2620               	addwf	setupUSB@x,f,c
  1420  00373C  0EFF               	movlw	255
  1421  00373E  2221               	addwfc	setupUSB@x+1,f,c
  1422  003740  0EFF               	movlw	255
  1423  003742  2222               	addwfc	setupUSB@x+2,f,c
  1424  003744  0EFF               	movlw	255
  1425  003746  2223               	addwfc	setupUSB@x+3,f,c
  1426                           
  1427                           ;usb.c: 20: if (x<3)
  1428  003748  BE23               	btfsc	setupUSB@x+3,7,c
  1429  00374A  D008               	goto	l5002
  1430  00374C  5023               	movf	setupUSB@x+3,w,c
  1431  00374E  1022               	iorwf	setupUSB@x+2,w,c
  1432  003750  1021               	iorwf	setupUSB@x+1,w,c
  1433  003752  E128               	bnz	l5008
  1434  003754  0E03               	movlw	3
  1435  003756  5C20               	subwf	setupUSB@x,w,c
  1436  003758  B0D8               	btfsc	status,0,c
  1437  00375A  D024               	goto	l5008
  1438  00375C                     l5002:
  1439                           
  1440                           ;usb.c: 21: {
  1441                           ;usb.c: 22: x = ((20000000)>>4) / baudrate; --x;
  1442  00375C  0ED0               	movlw	208
  1443  00375E  6E10               	movwf	___aldiv@dividend,c
  1444  003760  0E12               	movlw	18
  1445  003762  6E11               	movwf	___aldiv@dividend+1,c
  1446  003764  0E13               	movlw	19
  1447  003766  6E12               	movwf	___aldiv@dividend+2,c
  1448  003768  0E00               	movlw	0
  1449  00376A  6E13               	movwf	___aldiv@dividend+3,c
  1450  00376C  C01E  F014         	movff	setupUSB@baudrate,___aldiv@divisor
  1451  003770  C01F  F015         	movff	setupUSB@baudrate+1,___aldiv@divisor+1
  1452  003774  0E00               	movlw	0
  1453  003776  BE15               	btfsc	___aldiv@divisor+1,7,c
  1454  003778  0EFF               	movlw	-1
  1455  00377A  6E16               	movwf	___aldiv@divisor+2,c
  1456  00377C  6E17               	movwf	___aldiv@divisor+3,c
  1457  00377E  EC1A  F01B         	call	___aldiv	;wreg free
  1458  003782  C010  F020         	movff	?___aldiv,setupUSB@x
  1459  003786  C011  F021         	movff	?___aldiv+1,setupUSB@x+1
  1460  00378A  C012  F022         	movff	?___aldiv+2,setupUSB@x+2
  1461  00378E  C013  F023         	movff	?___aldiv+3,setupUSB@x+3
  1462  003792  0EFF               	movlw	255
  1463  003794  2620               	addwf	setupUSB@x,f,c
  1464  003796  0EFF               	movlw	255
  1465  003798  2221               	addwfc	setupUSB@x+1,f,c
  1466  00379A  0EFF               	movlw	255
  1467  00379C  2222               	addwfc	setupUSB@x+2,f,c
  1468  00379E  0EFF               	movlw	255
  1469  0037A0  2223               	addwfc	setupUSB@x+3,f,c
  1470                           
  1471                           ;usb.c: 24: BRGH = 1;
  1472  0037A2  84AC               	bsf	4012,2,c	;volatile
  1473  0037A4                     l5008:
  1474                           
  1475                           ;usb.c: 25: }
  1476                           ;usb.c: 26: if (x<3) {return -1;}
  1477  0037A4  BE23               	btfsc	setupUSB@x+3,7,c
  1478  0037A6  0012               	return	
  1479  0037A8  5023               	movf	setupUSB@x+3,w,c
  1480  0037AA  1022               	iorwf	setupUSB@x+2,w,c
  1481  0037AC  1021               	iorwf	setupUSB@x+1,w,c
  1482  0037AE  E104               	bnz	l57
  1483  0037B0  0E03               	movlw	3
  1484  0037B2  5C20               	subwf	setupUSB@x,w,c
  1485  0037B4  A0D8               	btfss	status,0,c
  1486  0037B6  0012               	return	
  1487  0037B8                     l57:
  1488                           
  1489                           ;usb.c: 28: SPBRG = x;
  1490  0037B8  C020  FFAF         	movff	setupUSB@x,4015	;volatile
  1491                           
  1492                           ;usb.c: 29: BAUDCONbits.BRG16 = 0;
  1493  0037BC  96B8               	bcf	4024,3,c	;volatile
  1494                           
  1495                           ;usb.c: 31: TXSTAbits.TX9 = 0;
  1496  0037BE  9CAC               	bcf	4012,6,c	;volatile
  1497                           
  1498                           ;usb.c: 32: TXSTAbits.SYNC = 0;
  1499  0037C0  98AC               	bcf	4012,4,c	;volatile
  1500                           
  1501                           ;usb.c: 33: RCSTAbits.CREN = 1;
  1502  0037C2  88AB               	bsf	4011,4,c	;volatile
  1503                           
  1504                           ;usb.c: 34: RCSTAbits.SPEN = 1;
  1505  0037C4  8EAB               	bsf	4011,7,c	;volatile
  1506                           
  1507                           ;usb.c: 35: TXSTAbits.TXEN = 1;
  1508  0037C6  8AAC               	bsf	4012,5,c	;volatile
  1509                           
  1510                           ;usb.c: 37: return 0;
  1511                           ;	Return value of _setupUSB is never used
  1512  0037C8  0012               	return		;funcret
  1513  0037CA                     __end_of_setupUSB:
  1514                           	opt stack 0
  1515                           tblptru	equ	0xFF8
  1516                           tblptrh	equ	0xFF7
  1517                           tblptrl	equ	0xFF6
  1518                           tablat	equ	0xFF5
  1519                           postinc0	equ	0xFEE
  1520                           wreg	equ	0xFE8
  1521                           status	equ	0xFD8
  1522                           
  1523 ;; *************** function ___aldiv *****************
  1524 ;; Defined at:
  1525 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\aldiv.c"
  1526 ;; Parameters:    Size  Location     Type
  1527 ;;  dividend        4   15[COMRAM] long 
  1528 ;;  divisor         4   19[COMRAM] long 
  1529 ;; Auto vars:     Size  Location     Type
  1530 ;;  quotient        4   25[COMRAM] long 
  1531 ;;  sign            1   24[COMRAM] unsigned char 
  1532 ;;  counter         1   23[COMRAM] unsigned char 
  1533 ;; Return value:  Size  Location     Type
  1534 ;;                  4   15[COMRAM] long 
  1535 ;; Registers used:
  1536 ;;		wreg, status,2, status,0
  1537 ;; Tracked objects:
  1538 ;;		On entry : 0/0
  1539 ;;		On exit  : 0/0
  1540 ;;		Unchanged: 0/0
  1541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1542 ;;      Params:         8       0       0       0       0       0       0       0       0
  1543 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1544 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1545 ;;      Totals:        14       0       0       0       0       0       0       0       0
  1546 ;;Total ram usage:       14 bytes
  1547 ;; Hardware stack levels used:    1
  1548 ;; Hardware stack levels required when called:    2
  1549 ;; This function calls:
  1550 ;;		Nothing
  1551 ;; This function is called by:
  1552 ;;		_setupUSB
  1553 ;; This function uses a non-reentrant model
  1554 ;;
  1555                           
  1556                           	psect	text2
  1557  003634                     __ptext2:
  1558                           	opt stack 0
  1559  003634                     ___aldiv:
  1560                           	opt stack 27
  1561                           
  1562                           ;incstack = 0
  1563  003634  0E00               	movlw	0
  1564  003636  6E19               	movwf	___aldiv@sign,c
  1565  003638  AE17               	btfss	___aldiv@divisor+3,7,c
  1566  00363A  D00A               	goto	l4886
  1567  00363C  1E17               	comf	___aldiv@divisor+3,f,c
  1568  00363E  1E16               	comf	___aldiv@divisor+2,f,c
  1569  003640  1E15               	comf	___aldiv@divisor+1,f,c
  1570  003642  6C14               	negf	___aldiv@divisor,c
  1571  003644  0E00               	movlw	0
  1572  003646  2215               	addwfc	___aldiv@divisor+1,f,c
  1573  003648  2216               	addwfc	___aldiv@divisor+2,f,c
  1574  00364A  2217               	addwfc	___aldiv@divisor+3,f,c
  1575  00364C  0E01               	movlw	1
  1576  00364E  6E19               	movwf	___aldiv@sign,c
  1577  003650                     l4886:
  1578  003650  AE13               	btfss	___aldiv@dividend+3,7,c
  1579  003652  D00A               	goto	l4892
  1580  003654  1E13               	comf	___aldiv@dividend+3,f,c
  1581  003656  1E12               	comf	___aldiv@dividend+2,f,c
  1582  003658  1E11               	comf	___aldiv@dividend+1,f,c
  1583  00365A  6C10               	negf	___aldiv@dividend,c
  1584  00365C  0E00               	movlw	0
  1585  00365E  2211               	addwfc	___aldiv@dividend+1,f,c
  1586  003660  2212               	addwfc	___aldiv@dividend+2,f,c
  1587  003662  2213               	addwfc	___aldiv@dividend+3,f,c
  1588  003664  0E01               	movlw	1
  1589  003666  1A19               	xorwf	___aldiv@sign,f,c
  1590  003668                     l4892:
  1591  003668  0E00               	movlw	0
  1592  00366A  6E1A               	movwf	___aldiv@quotient,c
  1593  00366C  0E00               	movlw	0
  1594  00366E  6E1B               	movwf	___aldiv@quotient+1,c
  1595  003670  0E00               	movlw	0
  1596  003672  6E1C               	movwf	___aldiv@quotient+2,c
  1597  003674  0E00               	movlw	0
  1598  003676  6E1D               	movwf	___aldiv@quotient+3,c
  1599  003678  5014               	movf	___aldiv@divisor,w,c
  1600  00367A  1015               	iorwf	___aldiv@divisor+1,w,c
  1601  00367C  1016               	iorwf	___aldiv@divisor+2,w,c
  1602  00367E  1017               	iorwf	___aldiv@divisor+3,w,c
  1603  003680  B4D8               	btfsc	status,2,c
  1604  003682  D02A               	goto	l4914
  1605  003684  0E01               	movlw	1
  1606  003686  6E18               	movwf	___aldiv@counter,c
  1607  003688  D006               	goto	l4900
  1608  00368A                     l4898:
  1609  00368A  90D8               	bcf	status,0,c
  1610  00368C  3614               	rlcf	___aldiv@divisor,f,c
  1611  00368E  3615               	rlcf	___aldiv@divisor+1,f,c
  1612  003690  3616               	rlcf	___aldiv@divisor+2,f,c
  1613  003692  3617               	rlcf	___aldiv@divisor+3,f,c
  1614  003694  2A18               	incf	___aldiv@counter,f,c
  1615  003696                     l4900:
  1616  003696  AE17               	btfss	___aldiv@divisor+3,7,c
  1617  003698  D7F8               	goto	l4898
  1618  00369A                     l4902:
  1619  00369A  90D8               	bcf	status,0,c
  1620  00369C  361A               	rlcf	___aldiv@quotient,f,c
  1621  00369E  361B               	rlcf	___aldiv@quotient+1,f,c
  1622  0036A0  361C               	rlcf	___aldiv@quotient+2,f,c
  1623  0036A2  361D               	rlcf	___aldiv@quotient+3,f,c
  1624  0036A4  5014               	movf	___aldiv@divisor,w,c
  1625  0036A6  5C10               	subwf	___aldiv@dividend,w,c
  1626  0036A8  5015               	movf	___aldiv@divisor+1,w,c
  1627  0036AA  5811               	subwfb	___aldiv@dividend+1,w,c
  1628  0036AC  5016               	movf	___aldiv@divisor+2,w,c
  1629  0036AE  5812               	subwfb	___aldiv@dividend+2,w,c
  1630  0036B0  5017               	movf	___aldiv@divisor+3,w,c
  1631  0036B2  5813               	subwfb	___aldiv@dividend+3,w,c
  1632  0036B4  A0D8               	btfss	status,0,c
  1633  0036B6  D009               	goto	l4910
  1634  0036B8  5014               	movf	___aldiv@divisor,w,c
  1635  0036BA  5E10               	subwf	___aldiv@dividend,f,c
  1636  0036BC  5015               	movf	___aldiv@divisor+1,w,c
  1637  0036BE  5A11               	subwfb	___aldiv@dividend+1,f,c
  1638  0036C0  5016               	movf	___aldiv@divisor+2,w,c
  1639  0036C2  5A12               	subwfb	___aldiv@dividend+2,f,c
  1640  0036C4  5017               	movf	___aldiv@divisor+3,w,c
  1641  0036C6  5A13               	subwfb	___aldiv@dividend+3,f,c
  1642  0036C8  801A               	bsf	___aldiv@quotient,0,c
  1643  0036CA                     l4910:
  1644  0036CA  90D8               	bcf	status,0,c
  1645  0036CC  3217               	rrcf	___aldiv@divisor+3,f,c
  1646  0036CE  3216               	rrcf	___aldiv@divisor+2,f,c
  1647  0036D0  3215               	rrcf	___aldiv@divisor+1,f,c
  1648  0036D2  3214               	rrcf	___aldiv@divisor,f,c
  1649  0036D4  2E18               	decfsz	___aldiv@counter,f,c
  1650  0036D6  D7E1               	goto	l4902
  1651  0036D8                     l4914:
  1652  0036D8  5019               	movf	___aldiv@sign,w,c
  1653  0036DA  B4D8               	btfsc	status,2,c
  1654  0036DC  D008               	goto	l4918
  1655  0036DE  1E1D               	comf	___aldiv@quotient+3,f,c
  1656  0036E0  1E1C               	comf	___aldiv@quotient+2,f,c
  1657  0036E2  1E1B               	comf	___aldiv@quotient+1,f,c
  1658  0036E4  6C1A               	negf	___aldiv@quotient,c
  1659  0036E6  0E00               	movlw	0
  1660  0036E8  221B               	addwfc	___aldiv@quotient+1,f,c
  1661  0036EA  221C               	addwfc	___aldiv@quotient+2,f,c
  1662  0036EC  221D               	addwfc	___aldiv@quotient+3,f,c
  1663  0036EE                     l4918:
  1664  0036EE  C01A  F010         	movff	___aldiv@quotient,?___aldiv
  1665  0036F2  C01B  F011         	movff	___aldiv@quotient+1,?___aldiv+1
  1666  0036F6  C01C  F012         	movff	___aldiv@quotient+2,?___aldiv+2
  1667  0036FA  C01D  F013         	movff	___aldiv@quotient+3,?___aldiv+3
  1668  0036FE  0012               	return	
  1669  003700                     __end_of___aldiv:
  1670                           	opt stack 0
  1671                           tblptru	equ	0xFF8
  1672                           tblptrh	equ	0xFF7
  1673                           tblptrl	equ	0xFF6
  1674                           tablat	equ	0xFF5
  1675                           postinc0	equ	0xFEE
  1676                           wreg	equ	0xFE8
  1677                           status	equ	0xFD8
  1678                           
  1679 ;; *************** function _setupTimer *****************
  1680 ;; Defined at:
  1681 ;;		line 85 in file "system.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;		None
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;		None
  1686 ;; Return value:  Size  Location     Type
  1687 ;;                  1    wreg      void 
  1688 ;; Registers used:
  1689 ;;		wreg, status,2
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1695 ;;      Params:         0       0       0       0       0       0       0       0       0
  1696 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1697 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1698 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1699 ;;Total ram usage:        0 bytes
  1700 ;; Hardware stack levels used:    1
  1701 ;; Hardware stack levels required when called:    2
  1702 ;; This function calls:
  1703 ;;		Nothing
  1704 ;; This function is called by:
  1705 ;;		_main
  1706 ;; This function uses a non-reentrant model
  1707 ;;
  1708                           
  1709                           	psect	text3
  1710  0042C6                     __ptext3:
  1711                           	opt stack 0
  1712  0042C6                     _setupTimer:
  1713                           	opt stack 28
  1714                           
  1715                           ;system.c: 87: T0CONbits.T08BIT = 1;
  1716                           
  1717                           ;incstack = 0
  1718  0042C6  8CD5               	bsf	4053,6,c	;volatile
  1719                           
  1720                           ;system.c: 88: T0CONbits.T0CS = 0;
  1721  0042C8  9AD5               	bcf	4053,5,c	;volatile
  1722                           
  1723                           ;system.c: 89: T0CONbits.PSA = 0;
  1724  0042CA  96D5               	bcf	4053,3,c	;volatile
  1725                           
  1726                           ;system.c: 91: T0CONbits.T0PS = 0b001;
  1727  0042CC  50D5               	movf	4053,w,c	;volatile
  1728  0042CE  0BF8               	andlw	-8
  1729  0042D0  0901               	iorlw	1
  1730  0042D2  6ED5               	movwf	4053,c	;volatile
  1731                           
  1732                           ;system.c: 93: T0CONbits.TMR0ON = 1;
  1733  0042D4  8ED5               	bsf	4053,7,c	;volatile
  1734  0042D6  0012               	return		;funcret
  1735  0042D8                     __end_of_setupTimer:
  1736                           	opt stack 0
  1737                           tblptru	equ	0xFF8
  1738                           tblptrh	equ	0xFF7
  1739                           tblptrl	equ	0xFF6
  1740                           tablat	equ	0xFF5
  1741                           postinc0	equ	0xFEE
  1742                           wreg	equ	0xFE8
  1743                           status	equ	0xFD8
  1744                           
  1745 ;; *************** function _setupOscillator *****************
  1746 ;; Defined at:
  1747 ;;		line 12 in file "system.c"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;		None
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;		None
  1752 ;; Return value:  Size  Location     Type
  1753 ;;                  1    wreg      void 
  1754 ;; Registers used:
  1755 ;;		wreg, status,2
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1761 ;;      Params:         0       0       0       0       0       0       0       0       0
  1762 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1763 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1764 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1765 ;;Total ram usage:        0 bytes
  1766 ;; Hardware stack levels used:    1
  1767 ;; Hardware stack levels required when called:    2
  1768 ;; This function calls:
  1769 ;;		Nothing
  1770 ;; This function is called by:
  1771 ;;		_main
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           	psect	text4
  1776  004302                     __ptext4:
  1777                           	opt stack 0
  1778  004302                     _setupOscillator:
  1779                           	opt stack 28
  1780                           
  1781                           ;system.c: 14: OSCCONbits.SCS = 0b00;
  1782                           
  1783                           ;incstack = 0
  1784  004302  0EFC               	movlw	-4
  1785  004304  16D3               	andwf	4051,f,c	;volatile
  1786  004306  0012               	return		;funcret
  1787  004308                     __end_of_setupOscillator:
  1788                           	opt stack 0
  1789                           tblptru	equ	0xFF8
  1790                           tblptrh	equ	0xFF7
  1791                           tblptrl	equ	0xFF6
  1792                           tablat	equ	0xFF5
  1793                           postinc0	equ	0xFEE
  1794                           wreg	equ	0xFE8
  1795                           status	equ	0xFD8
  1796                           
  1797 ;; *************** function _setupInterrupts *****************
  1798 ;; Defined at:
  1799 ;;		line 12 in file "interrupt.c"
  1800 ;; Parameters:    Size  Location     Type
  1801 ;;		None
  1802 ;; Auto vars:     Size  Location     Type
  1803 ;;		None
  1804 ;; Return value:  Size  Location     Type
  1805 ;;                  1    wreg      void 
  1806 ;; Registers used:
  1807 ;;		None
  1808 ;; Tracked objects:
  1809 ;;		On entry : 0/0
  1810 ;;		On exit  : 0/0
  1811 ;;		Unchanged: 0/0
  1812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1813 ;;      Params:         0       0       0       0       0       0       0       0       0
  1814 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1815 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1816 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1817 ;;Total ram usage:        0 bytes
  1818 ;; Hardware stack levels used:    1
  1819 ;; Hardware stack levels required when called:    2
  1820 ;; This function calls:
  1821 ;;		Nothing
  1822 ;; This function is called by:
  1823 ;;		_main
  1824 ;; This function uses a non-reentrant model
  1825 ;;
  1826                           
  1827                           	psect	text5
  1828  0042D8                     __ptext5:
  1829                           	opt stack 0
  1830  0042D8                     _setupInterrupts:
  1831                           	opt stack 28
  1832                           
  1833                           ;interrupt.c: 15: RCIF = 0;
  1834                           
  1835                           ;incstack = 0
  1836  0042D8  9A9E               	bcf	3998,5,c	;volatile
  1837                           
  1838                           ;interrupt.c: 16: RBIF = 0;
  1839  0042DA  90F2               	bcf	intcon,0,c	;volatile
  1840                           
  1841                           ;interrupt.c: 20: IPEN = 0;
  1842  0042DC  9ED0               	bcf	4048,7,c	;volatile
  1843                           
  1844                           ;interrupt.c: 21: PEIE = 1;
  1845  0042DE  8CF2               	bsf	intcon,6,c	;volatile
  1846                           
  1847                           ;interrupt.c: 23: RBIE = 0;
  1848  0042E0  96F2               	bcf	intcon,3,c	;volatile
  1849                           
  1850                           ;interrupt.c: 24: RCIE = 1;
  1851  0042E2  8A9D               	bsf	3997,5,c	;volatile
  1852                           
  1853                           ;interrupt.c: 25: TMR0IE = 1;
  1854  0042E4  8AF2               	bsf	intcon,5,c	;volatile
  1855                           
  1856                           ;interrupt.c: 26: GIE = 1;
  1857  0042E6  8EF2               	bsf	intcon,7,c	;volatile
  1858  0042E8  0012               	return		;funcret
  1859  0042EA                     __end_of_setupInterrupts:
  1860                           	opt stack 0
  1861                           tblptru	equ	0xFF8
  1862                           tblptrh	equ	0xFF7
  1863                           tblptrl	equ	0xFF6
  1864                           tablat	equ	0xFF5
  1865                           intcon	equ	0xFF2
  1866                           postinc0	equ	0xFEE
  1867                           wreg	equ	0xFE8
  1868                           status	equ	0xFD8
  1869                           
  1870 ;; *************** function _setupGPIO *****************
  1871 ;; Defined at:
  1872 ;;		line 26 in file "system.c"
  1873 ;; Parameters:    Size  Location     Type
  1874 ;;		None
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;		None
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      void 
  1879 ;; Registers used:
  1880 ;;		wreg
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1886 ;;      Params:         0       0       0       0       0       0       0       0       0
  1887 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1888 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1889 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1890 ;;Total ram usage:        0 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    2
  1893 ;; This function calls:
  1894 ;;		Nothing
  1895 ;; This function is called by:
  1896 ;;		_main
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           	psect	text6
  1901  003EDA                     __ptext6:
  1902                           	opt stack 0
  1903  003EDA                     _setupGPIO:
  1904                           	opt stack 28
  1905                           
  1906                           ;system.c: 28: ADCON1bits.PCFG = 0b1111;
  1907                           
  1908                           ;incstack = 0
  1909  003EDA  80C1               	bsf	4033,0,c	;volatile
  1910  003EDC  82C1               	bsf	4033,1,c	;volatile
  1911  003EDE  84C1               	bsf	4033,2,c	;volatile
  1912  003EE0  86C1               	bsf	4033,3,c	;volatile
  1913                           
  1914                           ;system.c: 31: PORTA; PORTB; PORTC; PORTD; PORTE;
  1915  003EE2  5080               	movf	3968,w,c	;volatile
  1916  003EE4  5081               	movf	3969,w,c	;volatile
  1917  003EE6  5082               	movf	3970,w,c	;volatile
  1918  003EE8  5083               	movf	3971,w,c	;volatile
  1919  003EEA  5084               	movf	3972,w,c	;volatile
  1920                           
  1921                           ;system.c: 36: TRISAbits.RA0 = 0;
  1922  003EEC  9092               	bcf	3986,0,c	;volatile
  1923                           
  1924                           ;system.c: 37: TRISAbits.RA1 = 0;
  1925  003EEE  9292               	bcf	3986,1,c	;volatile
  1926                           
  1927                           ;system.c: 38: TRISCbits.RC0 = 0;
  1928  003EF0  9094               	bcf	3988,0,c	;volatile
  1929                           
  1930                           ;system.c: 39: TRISDbits.RD4 = 0;
  1931  003EF2  9895               	bcf	3989,4,c	;volatile
  1932                           
  1933                           ;system.c: 40: TRISDbits.RD5 = 0;
  1934  003EF4  9A95               	bcf	3989,5,c	;volatile
  1935                           
  1936                           ;system.c: 43: TRISAbits.RA4 = 0;
  1937  003EF6  9892               	bcf	3986,4,c	;volatile
  1938                           
  1939                           ;system.c: 44: TRISAbits.RA5 = 0;
  1940  003EF8  9A92               	bcf	3986,5,c	;volatile
  1941                           
  1942                           ;system.c: 45: TRISEbits.RE0 = 0;
  1943  003EFA  9096               	bcf	3990,0,c	;volatile
  1944                           
  1945                           ;system.c: 46: TRISEbits.RE1 = 0;
  1946  003EFC  9296               	bcf	3990,1,c	;volatile
  1947                           
  1948                           ;system.c: 47: TRISCbits.RC2 = 0;
  1949  003EFE  9494               	bcf	3988,2,c	;volatile
  1950                           
  1951                           ;system.c: 48: TRISCbits.RC1 = 0;
  1952  003F00  9294               	bcf	3988,1,c	;volatile
  1953                           
  1954                           ;system.c: 49: TRISDbits.RD0 = 0;
  1955  003F02  9095               	bcf	3989,0,c	;volatile
  1956                           
  1957                           ;system.c: 50: TRISDbits.RD1 = 0;
  1958  003F04  9295               	bcf	3989,1,c	;volatile
  1959                           
  1960                           ;system.c: 51: TRISDbits.RD2 = 0;
  1961  003F06  9495               	bcf	3989,2,c	;volatile
  1962                           
  1963                           ;system.c: 52: TRISDbits.RD3 = 0;
  1964  003F08  9695               	bcf	3989,3,c	;volatile
  1965                           
  1966                           ;system.c: 55: TRISBbits.RB4 = 1;
  1967  003F0A  8893               	bsf	3987,4,c	;volatile
  1968                           
  1969                           ;system.c: 56: TRISBbits.RB5 = 1;
  1970  003F0C  8A93               	bsf	3987,5,c	;volatile
  1971                           
  1972                           ;system.c: 60: INTCON2bits.RBPU = 0b0;
  1973  003F0E  9EF1               	bcf	intcon2,7,c	;volatile
  1974                           
  1975                           ;system.c: 61: LATBbits.LATB4 = 1;
  1976  003F10  888A               	bsf	3978,4,c	;volatile
  1977                           
  1978                           ;system.c: 62: LATBbits.LATB5 = 1;
  1979  003F12  8A8A               	bsf	3978,5,c	;volatile
  1980                           
  1981                           ;system.c: 66: LATAbits.LATA0 = 1;
  1982  003F14  8089               	bsf	3977,0,c	;volatile
  1983                           
  1984                           ;system.c: 67: LATAbits.LATA1 = 1;
  1985  003F16  8289               	bsf	3977,1,c	;volatile
  1986                           
  1987                           ;system.c: 68: LATCbits.LATC0 = 0;
  1988  003F18  908B               	bcf	3979,0,c	;volatile
  1989                           
  1990                           ;system.c: 69: LATDbits.LATD4 = 1;
  1991  003F1A  888C               	bsf	3980,4,c	;volatile
  1992                           
  1993                           ;system.c: 70: LATDbits.LATD5 = 0;
  1994  003F1C  9A8C               	bcf	3980,5,c	;volatile
  1995                           
  1996                           ;system.c: 71: LATAbits.LATA5 = 1;
  1997  003F1E  8A89               	bsf	3977,5,c	;volatile
  1998                           
  1999                           ;system.c: 72: LATEbits.LATE1 = 1;
  2000  003F20  828D               	bsf	3981,1,c	;volatile
  2001                           
  2002                           ;system.c: 73: LATCbits.LATC1 = 1;
  2003  003F22  828B               	bsf	3979,1,c	;volatile
  2004                           
  2005                           ;system.c: 74: LATDbits.LATD1 = 1;
  2006  003F24  828C               	bsf	3980,1,c	;volatile
  2007                           
  2008                           ;system.c: 75: LATDbits.LATD3 = 1;
  2009  003F26  868C               	bsf	3980,3,c	;volatile
  2010  003F28  0012               	return		;funcret
  2011  003F2A                     __end_of_setupGPIO:
  2012                           	opt stack 0
  2013                           tblptru	equ	0xFF8
  2014                           tblptrh	equ	0xFF7
  2015                           tblptrl	equ	0xFF6
  2016                           tablat	equ	0xFF5
  2017                           intcon	equ	0xFF2
  2018                           intcon2	equ	0xFF1
  2019                           postinc0	equ	0xFEE
  2020                           wreg	equ	0xFE8
  2021                           status	equ	0xFD8
  2022                           
  2023 ;; *************** function _parseGcode *****************
  2024 ;; Defined at:
  2025 ;;		line 20 in file "gcode.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;  Gcode           2   67[BANK0 ] PTR unsigned char 
  2028 ;;		 -> uart_str(40), 
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;  finalpositio   40   69[BANK0 ] unsigned char [40]
  2031 ;;  Gparsed        16  112[BANK0 ] struct G_token_[4]
  2032 ;;  buf             2  129[BANK0 ] PTR unsigned char 
  2033 ;;		 -> NULL(0), uart_str(40), 
  2034 ;;  comment_deli    2  110[BANK0 ] PTR unsigned char 
  2035 ;;		 -> STR_2(2), STR_1(2), NULL(0), uart_str(40), 
  2036 ;;  i               1  128[BANK0 ] unsigned char 
  2037 ;;  gcode_proces    1  109[BANK0 ] unsigned char 
  2038 ;; Return value:  Size  Location     Type
  2039 ;;                  1    wreg      void 
  2040 ;; Registers used:
  2041 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2042 ;; Tracked objects:
  2043 ;;		On entry : 0/0
  2044 ;;		On exit  : 0/0
  2045 ;;		Unchanged: 0/0
  2046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2047 ;;      Params:         0       2       0       0       0       0       0       0       0
  2048 ;;      Locals:         0      62       0       0       0       0       0       0       0
  2049 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2050 ;;      Totals:         0      64       0       0       0       0       0       0       0
  2051 ;;Total ram usage:       64 bytes
  2052 ;; Hardware stack levels used:    1
  2053 ;; Hardware stack levels required when called:    7
  2054 ;; This function calls:
  2055 ;;		_atof
  2056 ;;		_execGcode
  2057 ;;		_memset
  2058 ;;		_sprintf
  2059 ;;		_strchr
  2060 ;;		_strtok
  2061 ;;		_writeUSBstring
  2062 ;; This function is called by:
  2063 ;;		_main
  2064 ;; This function uses a non-reentrant model
  2065 ;;
  2066                           
  2067                           	psect	text7
  2068  002BDC                     __ptext7:
  2069                           	opt stack 0
  2070  002BDC                     _parseGcode:
  2071                           	opt stack 23
  2072                           
  2073                           ;gcode.c: 22: char i=0;
  2074                           
  2075                           ;incstack = 0
  2076  002BDC  0E00               	movlw	0
  2077  002BDE  0100               	movlb	0	; () banked
  2078  002BE0  6FE0               	movwf	parseGcode@i& (0+255),b
  2079                           
  2080                           ; BSR set to: 0
  2081                           ;gcode.c: 23: char *buf=(0), *comment_delim=(0);
  2082  002BE2  0E00               	movlw	0
  2083  002BE4  0100               	movlb	0	; () banked
  2084  002BE6  6FE1               	movwf	parseGcode@buf& (0+255),b
  2085  002BE8  0E00               	movlw	0
  2086  002BEA  0100               	movlb	0	; () banked
  2087  002BEC  6FE2               	movwf	(parseGcode@buf+1)& (0+255),b
  2088                           
  2089                           ; BSR set to: 0
  2090  002BEE  0E00               	movlw	0
  2091  002BF0  0100               	movlb	0	; () banked
  2092  002BF2  6FCE               	movwf	parseGcode@comment_delim& (0+255),b
  2093  002BF4  0E00               	movlw	0
  2094  002BF6  0100               	movlb	0	; () banked
  2095  002BF8  6FCF               	movwf	(parseGcode@comment_delim+1)& (0+255),b
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;gcode.c: 24: G_token Gparsed[4];
  2099                           ;gcode.c: 26: char finalposition[40];
  2100                           ;gcode.c: 27: char gcode_process;
  2101                           ;gcode.c: 30: LATAbits.LATA1 = 0;
  2102  002BFA  9289               	bcf	3977,1,c	;volatile
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;gcode.c: 33: memset( Gparsed, 0, sizeof(Gparsed) );
  2106  002BFC  0ED0               	movlw	low parseGcode@Gparsed
  2107  002BFE  6E10               	movwf	memset@p1,c
  2108  002C00  0E00               	movlw	high parseGcode@Gparsed
  2109  002C02  6E11               	movwf	memset@p1+1,c
  2110  002C04  0E00               	movlw	0
  2111  002C06  6E13               	movwf	memset@c+1,c
  2112  002C08  0E00               	movlw	0
  2113  002C0A  6E12               	movwf	memset@c,c
  2114  002C0C  0E00               	movlw	0
  2115  002C0E  6E15               	movwf	memset@n+1,c
  2116  002C10  0E10               	movlw	16
  2117  002C12  6E14               	movwf	memset@n,c
  2118  002C14  ECCD  F020         	call	_memset	;wreg free
  2119                           
  2120                           ;gcode.c: 36: comment_delim = strchr(Gcode, ';');
  2121  002C18  C0A3  F010         	movff	parseGcode@Gcode,strchr@ptr
  2122  002C1C  C0A4  F011         	movff	parseGcode@Gcode+1,strchr@ptr+1
  2123  002C20  0E00               	movlw	0
  2124  002C22  6E13               	movwf	strchr@chr+1,c
  2125  002C24  0E3B               	movlw	59
  2126  002C26  6E12               	movwf	strchr@chr,c
  2127  002C28  EC4E  F01E         	call	_strchr	;wreg free
  2128  002C2C  C010  F0CE         	movff	?_strchr,parseGcode@comment_delim
  2129  002C30  C011  F0CF         	movff	?_strchr+1,parseGcode@comment_delim+1
  2130                           
  2131                           ;gcode.c: 37: if (comment_delim != (0)) {*comment_delim = '\0';}
  2132  002C34  0100               	movlb	0	; () banked
  2133  002C36  51CE               	movf	parseGcode@comment_delim& (0+255),w,b
  2134  002C38  0100               	movlb	0	; () banked
  2135  002C3A  11CF               	iorwf	(parseGcode@comment_delim+1)& (0+255),w,b
  2136  002C3C  B4D8               	btfsc	status,2,c
  2137  002C3E  D012               	goto	l6418
  2138                           
  2139                           ; BSR set to: 0
  2140  002C40  C0CE  FFF6         	movff	parseGcode@comment_delim,tblptrl
  2141  002C44  C0CF  FFF7         	movff	parseGcode@comment_delim+1,tblptrh
  2142  002C48  6AF8               	clrf	tblptru,c
  2143  002C4A  0E07               	movlw	(high __ramtop+-1)
  2144  002C4C  64F7               	cpfsgt	tblptrh,c
  2145  002C4E  D004               	bra	u7477
  2146  002C50  0E00               	movlw	0
  2147  002C52  6EF5               	movwf	tablat,c
  2148  002C54  000C               	tblwt		*
  2149  002C56  D006               	bra	u7470
  2150  002C58                     u7477:
  2151  002C58  CFF6 FFE9          	movff	tblptrl,fsr0l
  2152  002C5C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2153  002C60  0E00               	movlw	0
  2154  002C62  6EEF               	movwf	indf0,c
  2155  002C64                     u7470:
  2156  002C64                     l6418:
  2157                           
  2158                           ;gcode.c: 39: buf = strtok(Gcode, " ");
  2159  002C64  C0A3  F01D         	movff	parseGcode@Gcode,strtok@s1
  2160  002C68  C0A4  F01E         	movff	parseGcode@Gcode+1,strtok@s1+1
  2161  002C6C  0EDB               	movlw	low STR_1
  2162  002C6E  6E1F               	movwf	strtok@s2,c
  2163  002C70  0E08               	movlw	high STR_1
  2164  002C72  6E20               	movwf	strtok@s2+1,c
  2165  002C74  ECE5  F01B         	call	_strtok	;wreg free
  2166  002C78  C01D  F0E1         	movff	?_strtok,parseGcode@buf
  2167  002C7C  C01E  F0E2         	movff	?_strtok+1,parseGcode@buf+1
  2168                           
  2169                           ;gcode.c: 40: while(buf != (0))
  2170  002C80  D03B               	goto	l6430
  2171  002C82                     l6420:
  2172                           
  2173                           ;gcode.c: 41: {
  2174                           ;gcode.c: 43: Gparsed[i].flag = buf[0];
  2175  002C82  C0E1  FFD9         	movff	parseGcode@buf,fsr2l
  2176  002C86  C0E2  FFDA         	movff	parseGcode@buf+1,fsr2h
  2177  002C8A  0100               	movlb	0	; () banked
  2178  002C8C  51E0               	movf	parseGcode@i& (0+255),w,b
  2179  002C8E  0D04               	mullw	4
  2180  002C90  0ED0               	movlw	low parseGcode@Gparsed
  2181  002C92  24F3               	addwf	prodl,w,c
  2182  002C94  6EE1               	movwf	fsr1l,c
  2183  002C96  0E00               	movlw	high parseGcode@Gparsed
  2184  002C98  20F4               	addwfc	prodh,w,c
  2185  002C9A  6EE2               	movwf	fsr1h,c
  2186  002C9C  CFDF FFE7          	movff	indf2,indf1
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;gcode.c: 44: buf++;
  2190  002CA0  0100               	movlb	0	; () banked
  2191  002CA2  4BE1               	infsnz	parseGcode@buf& (0+255),f,b
  2192  002CA4  2BE2               	incf	(parseGcode@buf+1)& (0+255),f,b
  2193                           
  2194                           ; BSR set to: 0
  2195                           ;gcode.c: 45: Gparsed[i].arg = atof(buf);
  2196  002CA6  C0E1  F03F         	movff	parseGcode@buf,atof@s
  2197  002CAA  C0E2  F040         	movff	parseGcode@buf+1,atof@s+1
  2198  002CAE  EC43  F021         	call	_atof	;wreg free
  2199  002CB2  0100               	movlb	0	; () banked
  2200  002CB4  51E0               	movf	parseGcode@i& (0+255),w,b
  2201  002CB6  0D04               	mullw	4
  2202  002CB8  0E01               	movlw	1
  2203  002CBA  26F3               	addwf	prodl,f,c
  2204  002CBC  0E00               	movlw	0
  2205  002CBE  22F4               	addwfc	prodh,f,c
  2206  002CC0  0ED0               	movlw	low parseGcode@Gparsed
  2207  002CC2  24F3               	addwf	prodl,w,c
  2208  002CC4  6ED9               	movwf	fsr2l,c
  2209  002CC6  0E00               	movlw	high parseGcode@Gparsed
  2210  002CC8  20F4               	addwfc	prodh,w,c
  2211  002CCA  6EDA               	movwf	fsr2h,c
  2212  002CCC  C03F  FFDE         	movff	?_atof,postinc2
  2213  002CD0  C040  FFDE         	movff	?_atof+1,postinc2
  2214  002CD4  C041  FFDE         	movff	?_atof+2,postinc2
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;gcode.c: 48: buf = strtok((0), " ");
  2218  002CD8  0E00               	movlw	0
  2219  002CDA  6E1D               	movwf	strtok@s1,c
  2220  002CDC  0E00               	movlw	0
  2221  002CDE  6E1E               	movwf	strtok@s1+1,c
  2222  002CE0  0EDB               	movlw	low STR_1
  2223  002CE2  6E1F               	movwf	strtok@s2,c
  2224  002CE4  0E08               	movlw	high STR_1
  2225  002CE6  6E20               	movwf	strtok@s2+1,c
  2226  002CE8  ECE5  F01B         	call	_strtok	;wreg free
  2227  002CEC  C01D  F0E1         	movff	?_strtok,parseGcode@buf
  2228  002CF0  C01E  F0E2         	movff	?_strtok+1,parseGcode@buf+1
  2229                           
  2230                           ;gcode.c: 49: ++i;
  2231  002CF4  0100               	movlb	0	; () banked
  2232  002CF6  2BE0               	incf	parseGcode@i& (0+255),f,b
  2233  002CF8                     l6430:
  2234  002CF8  0100               	movlb	0	; () banked
  2235  002CFA  51E1               	movf	parseGcode@buf& (0+255),w,b
  2236  002CFC  0100               	movlb	0	; () banked
  2237  002CFE  11E2               	iorwf	(parseGcode@buf+1)& (0+255),w,b
  2238  002D00  A4D8               	btfss	status,2,c
  2239  002D02  D7BF               	goto	l6420
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;gcode.c: 50: }
  2243                           ;gcode.c: 53: gcode_process = execGcode(Gparsed);
  2244                           
  2245                           ; BSR set to: 0
  2246  002D04  0ED0               	movlw	low parseGcode@Gparsed
  2247  002D06  0100               	movlb	0	; () banked
  2248  002D08  6F95               	movwf	execGcode@Gparsed& (0+255),b
  2249  002D0A  0E00               	movlw	high parseGcode@Gparsed
  2250  002D0C  0100               	movlb	0	; () banked
  2251  002D0E  6F96               	movwf	(execGcode@Gparsed+1)& (0+255),b
  2252  002D10  EC7F  F011         	call	_execGcode	;wreg free
  2253  002D14  0100               	movlb	0	; () banked
  2254  002D16  6FCD               	movwf	parseGcode@gcode_process& (0+255),b
  2255                           
  2256                           ; BSR set to: 0
  2257                           ;gcode.c: 56: GCODE_PENDING = 0;
  2258  002D18  0E00               	movlw	0
  2259  002D1A  6E4D               	movwf	_GCODE_PENDING,c
  2260                           
  2261                           ; BSR set to: 0
  2262                           ;gcode.c: 58: memset(uart_str, 0, sizeof(uart_str));
  2263  002D1C  0E00               	movlw	low _uart_str
  2264  002D1E  6E10               	movwf	memset@p1,c
  2265  002D20  0E01               	movlw	high _uart_str
  2266  002D22  6E11               	movwf	memset@p1+1,c
  2267  002D24  0E00               	movlw	0
  2268  002D26  6E13               	movwf	memset@c+1,c
  2269  002D28  0E00               	movlw	0
  2270  002D2A  6E12               	movwf	memset@c,c
  2271  002D2C  0E00               	movlw	0
  2272  002D2E  6E15               	movwf	memset@n+1,c
  2273  002D30  0E28               	movlw	40
  2274  002D32  6E14               	movwf	memset@n,c
  2275  002D34  ECCD  F020         	call	_memset	;wreg free
  2276                           
  2277                           ;gcode.c: 59: LATAbits.LATA1 = 1;
  2278  002D38  8289               	bsf	3977,1,c	;volatile
  2279                           
  2280                           ;gcode.c: 63: switch (gcode_process)
  2281  002D3A  D043               	goto	l6454
  2282  002D3C                     l6440:
  2283  002D3C  0EA5               	movlw	low parseGcode@finalposition
  2284  002D3E  0100               	movlb	0	; () banked
  2285  002D40  6F69               	movwf	sprintf@sp& (0+255),b
  2286  002D42  0E00               	movlw	high parseGcode@finalposition
  2287  002D44  0100               	movlb	0	; () banked
  2288  002D46  6F6A               	movwf	(sprintf@sp+1)& (0+255),b
  2289  002D48  0E77               	movlw	low STR_3
  2290  002D4A  0100               	movlb	0	; () banked
  2291  002D4C  6F6B               	movwf	sprintf@f& (0+255),b
  2292  002D4E  0E08               	movlw	high STR_3
  2293  002D50  0100               	movlb	0	; () banked
  2294  002D52  6F6C               	movwf	(sprintf@f+1)& (0+255),b
  2295  002D54  C0E3  F06D         	movff	_XPOS,?_sprintf+4
  2296  002D58  C0E4  F06E         	movff	_XPOS+1,?_sprintf+5
  2297  002D5C  C0E5  F06F         	movff	_XPOS+2,?_sprintf+6
  2298  002D60  C0E6  F070         	movff	_YPOS,?_sprintf+7
  2299  002D64  C0E7  F071         	movff	_YPOS+1,?_sprintf+8
  2300  002D68  C0E8  F072         	movff	_YPOS+2,?_sprintf+9
  2301  002D6C  C0E9  F073         	movff	_ZPOS,?_sprintf+10
  2302  002D70  C0EA  F074         	movff	_ZPOS+1,?_sprintf+11
  2303  002D74  C0EB  F075         	movff	_ZPOS+2,?_sprintf+12
  2304  002D78  EC6F  F004         	call	_sprintf	;wreg free
  2305                           
  2306                           ;gcode.c: 68: writeUSBstring(finalposition);
  2307                           
  2308                           ;gcode.c: 67: else {sprintf(finalposition, "%.3f %.3f %.3f\n", XPOS, YPOS, ZPOS);}
  2309  002D7C  0EA5               	movlw	low parseGcode@finalposition
  2310  002D7E  6E11               	movwf	writeUSBstring@string,c
  2311  002D80  0E00               	movlw	high parseGcode@finalposition
  2312  002D82  6E12               	movwf	writeUSBstring@string+1,c
  2313  002D84  EC5F  F01D         	call	_writeUSBstring	;wreg free
  2314                           
  2315                           ;gcode.c: 69: break;
  2316  002D88  0012               	return	
  2317  002D8A                     l6446:
  2318                           
  2319                           ;gcode.c: 71: writeUSBstring("INVALID COMMAND\n");
  2320  002D8A  0E9C               	movlw	low STR_5
  2321  002D8C  6E11               	movwf	writeUSBstring@string,c
  2322  002D8E  0E08               	movlw	high STR_5
  2323  002D90  6E12               	movwf	writeUSBstring@string+1,c
  2324  002D92  EC5F  F01D         	call	_writeUSBstring	;wreg free
  2325                           
  2326                           ;gcode.c: 72: break;
  2327  002D96  0012               	return	
  2328  002D98                     l6448:
  2329                           
  2330                           ;gcode.c: 74: writeUSBstring("INVALID ARGUMENT\n");
  2331  002D98  0E8A               	movlw	low STR_6
  2332  002D9A  6E11               	movwf	writeUSBstring@string,c
  2333  002D9C  0E08               	movlw	high STR_6
  2334  002D9E  6E12               	movwf	writeUSBstring@string+1,c
  2335  002DA0  EC5F  F01D         	call	_writeUSBstring	;wreg free
  2336                           
  2337                           ;gcode.c: 75: break;
  2338  002DA4  0012               	return	
  2339  002DA6                     l6450:
  2340                           
  2341                           ;gcode.c: 77: writeUSBstring("OUT OF BOUNDS\n");
  2342  002DA6  0ECC               	movlw	low STR_7
  2343  002DA8  6E11               	movwf	writeUSBstring@string,c
  2344  002DAA  0E08               	movlw	high STR_7
  2345  002DAC  6E12               	movwf	writeUSBstring@string+1,c
  2346  002DAE  EC5F  F01D         	call	_writeUSBstring	;wreg free
  2347                           
  2348                           ;gcode.c: 78: break;
  2349  002DB2  0012               	return	
  2350  002DB4                     l6452:
  2351                           
  2352                           ;gcode.c: 81: writeUSBstring("UNKNOWN STATE\n");
  2353  002DB4  0EBD               	movlw	low STR_8
  2354  002DB6  6E11               	movwf	writeUSBstring@string,c
  2355  002DB8  0E08               	movlw	high STR_8
  2356  002DBA  6E12               	movwf	writeUSBstring@string+1,c
  2357  002DBC  EC5F  F01D         	call	_writeUSBstring	;wreg free
  2358                           
  2359                           ;gcode.c: 82: }
  2360  002DC0  0012               	return	
  2361  002DC2                     l6454:
  2362  002DC2  0100               	movlb	0	; () banked
  2363  002DC4  51CD               	movf	parseGcode@gcode_process& (0+255),w,b
  2364                           
  2365                           ; Switch size 1, requested type "space"
  2366                           ; Number of cases is 4, Range of values is 0 to 3
  2367                           ; switch strategies available:
  2368                           ; Name         Instructions Cycles
  2369                           ; simple_byte           13     7 (average)
  2370                           ;	Chosen strategy is simple_byte
  2371  002DC6  0A00               	xorlw	0	; case 0
  2372  002DC8  B4D8               	btfsc	status,2,c
  2373  002DCA  D7B8               	goto	l6440
  2374  002DCC  0A01               	xorlw	1	; case 1
  2375  002DCE  B4D8               	btfsc	status,2,c
  2376  002DD0  D7DC               	goto	l6446
  2377  002DD2  0A03               	xorlw	3	; case 2
  2378  002DD4  B4D8               	btfsc	status,2,c
  2379  002DD6  D7E0               	goto	l6448
  2380  002DD8  0A01               	xorlw	1	; case 3
  2381  002DDA  B4D8               	btfsc	status,2,c
  2382  002DDC  D7E4               	goto	l6450
  2383  002DDE  D7EA               	goto	l6452
  2384  002DE0                     __end_of_parseGcode:
  2385                           	opt stack 0
  2386                           tblptru	equ	0xFF8
  2387                           tblptrh	equ	0xFF7
  2388                           tblptrl	equ	0xFF6
  2389                           tablat	equ	0xFF5
  2390                           prodh	equ	0xFF4
  2391                           prodl	equ	0xFF3
  2392                           intcon	equ	0xFF2
  2393                           intcon2	equ	0xFF1
  2394                           indf0	equ	0xFEF
  2395                           postinc0	equ	0xFEE
  2396                           fsr0h	equ	0xFEA
  2397                           fsr0l	equ	0xFE9
  2398                           wreg	equ	0xFE8
  2399                           indf1	equ	0xFE7
  2400                           fsr1h	equ	0xFE2
  2401                           fsr1l	equ	0xFE1
  2402                           indf2	equ	0xFDF
  2403                           postinc2	equ	0xFDE
  2404                           fsr2h	equ	0xFDA
  2405                           fsr2l	equ	0xFD9
  2406                           status	equ	0xFD8
  2407                           
  2408 ;; *************** function _writeUSBstring *****************
  2409 ;; Defined at:
  2410 ;;		line 61 in file "usb.c"
  2411 ;; Parameters:    Size  Location     Type
  2412 ;;  string          2   16[COMRAM] PTR const unsigned char 
  2413 ;;		 -> STR_8(15), STR_7(15), STR_6(18), STR_5(17), 
  2414 ;;		 -> parseGcode@finalposition(40), 
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;  i               1   20[COMRAM] unsigned char 
  2417 ;; Return value:  Size  Location     Type
  2418 ;;                  1    wreg      void 
  2419 ;; Registers used:
  2420 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2421 ;; Tracked objects:
  2422 ;;		On entry : 0/0
  2423 ;;		On exit  : 0/0
  2424 ;;		Unchanged: 0/0
  2425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2426 ;;      Params:         2       0       0       0       0       0       0       0       0
  2427 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2428 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2429 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2430 ;;Total ram usage:        5 bytes
  2431 ;; Hardware stack levels used:    1
  2432 ;; Hardware stack levels required when called:    3
  2433 ;; This function calls:
  2434 ;;		_writeUSB
  2435 ;; This function is called by:
  2436 ;;		_parseGcode
  2437 ;; This function uses a non-reentrant model
  2438 ;;
  2439                           
  2440                           	psect	text8
  2441  003ABE                     __ptext8:
  2442                           	opt stack 0
  2443  003ABE                     _writeUSBstring:
  2444                           	opt stack 26
  2445                           
  2446                           ;usb.c: 63: unsigned char i;
  2447                           ;usb.c: 65: for (i=0; string[i] != '\0'; ++i)
  2448                           
  2449                           ;incstack = 0
  2450  003ABE  0E00               	movlw	0
  2451  003AC0  6E15               	movwf	writeUSBstring@i,c
  2452  003AC2  D01D               	goto	l4490
  2453  003AC4                     l4486:
  2454                           
  2455                           ;usb.c: 66: writeUSB(string[i]);
  2456  003AC4  5015               	movf	writeUSBstring@i,w,c
  2457  003AC6  0D01               	mullw	1
  2458  003AC8  C011  F013         	movff	writeUSBstring@string,??_writeUSBstring
  2459  003ACC  C012  F014         	movff	writeUSBstring@string+1,??_writeUSBstring+1
  2460  003AD0  50F3               	movf	prodl,w,c
  2461  003AD2  2613               	addwf	??_writeUSBstring,f,c
  2462  003AD4  50F4               	movf	prodh,w,c
  2463  003AD6  2214               	addwfc	??_writeUSBstring+1,f,c
  2464  003AD8  C013  FFF6         	movff	??_writeUSBstring,tblptrl
  2465  003ADC  C014  FFF7         	movff	??_writeUSBstring+1,tblptrh
  2466  003AE0  6AF8               	clrf	tblptru,c
  2467  003AE2  0E07               	movlw	(high __ramtop+-1)
  2468  003AE4  64F7               	cpfsgt	tblptrh,c
  2469  003AE6  D003               	bra	u4757
  2470  003AE8  0008               	tblrd		*
  2471  003AEA  50F5               	movf	tablat,w,c
  2472  003AEC  D005               	bra	u4750
  2473  003AEE                     u4757:
  2474  003AEE  CFF6 FFE9          	movff	tblptrl,fsr0l
  2475  003AF2  CFF7 FFEA          	movff	tblptrh,fsr0h
  2476  003AF6  50EF               	movf	indf0,w,c
  2477  003AF8                     u4750:
  2478  003AF8  EC75  F021         	call	_writeUSB
  2479  003AFC  2A15               	incf	writeUSBstring@i,f,c
  2480  003AFE                     l4490:
  2481  003AFE  5015               	movf	writeUSBstring@i,w,c
  2482  003B00  0D01               	mullw	1
  2483  003B02  C011  F013         	movff	writeUSBstring@string,??_writeUSBstring
  2484  003B06  C012  F014         	movff	writeUSBstring@string+1,??_writeUSBstring+1
  2485  003B0A  50F3               	movf	prodl,w,c
  2486  003B0C  2613               	addwf	??_writeUSBstring,f,c
  2487  003B0E  50F4               	movf	prodh,w,c
  2488  003B10  2214               	addwfc	??_writeUSBstring+1,f,c
  2489  003B12  C013  FFF6         	movff	??_writeUSBstring,tblptrl
  2490  003B16  C014  FFF7         	movff	??_writeUSBstring+1,tblptrh
  2491  003B1A  6AF8               	clrf	tblptru,c
  2492  003B1C  0E07               	movlw	(high __ramtop+-1)
  2493  003B1E  64F7               	cpfsgt	tblptrh,c
  2494  003B20  D003               	bra	u4767
  2495  003B22  0008               	tblrd		*
  2496  003B24  50F5               	movf	tablat,w,c
  2497  003B26  D005               	bra	u4760
  2498  003B28                     u4767:
  2499  003B28  CFF6 FFE9          	movff	tblptrl,fsr0l
  2500  003B2C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2501  003B30  50EF               	movf	indf0,w,c
  2502  003B32                     u4760:
  2503  003B32  0900               	iorlw	0
  2504  003B34  B4D8               	btfsc	status,2,c
  2505  003B36  0012               	return	
  2506  003B38  D7C5               	goto	l4486
  2507  003B3A                     __end_of_writeUSBstring:
  2508                           	opt stack 0
  2509                           tblptru	equ	0xFF8
  2510                           tblptrh	equ	0xFF7
  2511                           tblptrl	equ	0xFF6
  2512                           tablat	equ	0xFF5
  2513                           prodh	equ	0xFF4
  2514                           prodl	equ	0xFF3
  2515                           intcon	equ	0xFF2
  2516                           intcon2	equ	0xFF1
  2517                           indf0	equ	0xFEF
  2518                           postinc0	equ	0xFEE
  2519                           fsr0h	equ	0xFEA
  2520                           fsr0l	equ	0xFE9
  2521                           wreg	equ	0xFE8
  2522                           indf1	equ	0xFE7
  2523                           fsr1h	equ	0xFE2
  2524                           fsr1l	equ	0xFE1
  2525                           indf2	equ	0xFDF
  2526                           postinc2	equ	0xFDE
  2527                           fsr2h	equ	0xFDA
  2528                           fsr2l	equ	0xFD9
  2529                           status	equ	0xFD8
  2530                           
  2531 ;; *************** function _writeUSB *****************
  2532 ;; Defined at:
  2533 ;;		line 47 in file "usb.c"
  2534 ;; Parameters:    Size  Location     Type
  2535 ;;  byte            1    wreg     unsigned char 
  2536 ;; Auto vars:     Size  Location     Type
  2537 ;;  byte            1   15[COMRAM] unsigned char 
  2538 ;; Return value:  Size  Location     Type
  2539 ;;                  1    wreg      void 
  2540 ;; Registers used:
  2541 ;;		wreg
  2542 ;; Tracked objects:
  2543 ;;		On entry : 0/0
  2544 ;;		On exit  : 0/0
  2545 ;;		Unchanged: 0/0
  2546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2547 ;;      Params:         0       0       0       0       0       0       0       0       0
  2548 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2549 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2550 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2551 ;;Total ram usage:        1 bytes
  2552 ;; Hardware stack levels used:    1
  2553 ;; Hardware stack levels required when called:    2
  2554 ;; This function calls:
  2555 ;;		Nothing
  2556 ;; This function is called by:
  2557 ;;		_writeUSBstring
  2558 ;; This function uses a non-reentrant model
  2559 ;;
  2560                           
  2561                           	psect	text9
  2562  0042EA                     __ptext9:
  2563                           	opt stack 0
  2564  0042EA                     _writeUSB:
  2565                           	opt stack 26
  2566                           
  2567                           ;incstack = 0
  2568                           ;writeUSB@byte stored from wreg
  2569  0042EA  6E10               	movwf	writeUSB@byte,c
  2570  0042EC                     l61:
  2571  0042EC  A2AC               	btfss	4012,1,c	;volatile
  2572  0042EE  D7FE               	goto	l61
  2573                           
  2574                           ;usb.c: 51: TXREG = byte;
  2575  0042F0  C010  FFAD         	movff	writeUSB@byte,4013	;volatile
  2576  0042F4  0012               	return		;funcret
  2577  0042F6                     __end_of_writeUSB:
  2578                           	opt stack 0
  2579                           tblptru	equ	0xFF8
  2580                           tblptrh	equ	0xFF7
  2581                           tblptrl	equ	0xFF6
  2582                           tablat	equ	0xFF5
  2583                           prodh	equ	0xFF4
  2584                           prodl	equ	0xFF3
  2585                           intcon	equ	0xFF2
  2586                           intcon2	equ	0xFF1
  2587                           indf0	equ	0xFEF
  2588                           postinc0	equ	0xFEE
  2589                           fsr0h	equ	0xFEA
  2590                           fsr0l	equ	0xFE9
  2591                           wreg	equ	0xFE8
  2592                           indf1	equ	0xFE7
  2593                           fsr1h	equ	0xFE2
  2594                           fsr1l	equ	0xFE1
  2595                           indf2	equ	0xFDF
  2596                           postinc2	equ	0xFDE
  2597                           fsr2h	equ	0xFDA
  2598                           fsr2l	equ	0xFD9
  2599                           status	equ	0xFD8
  2600                           
  2601 ;; *************** function _strtok *****************
  2602 ;; Defined at:
  2603 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\strtok.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;  s1              2   28[COMRAM] PTR unsigned char 
  2606 ;;		 -> NULL(0), uart_str(40), 
  2607 ;;  s2              2   30[COMRAM] PTR const unsigned char 
  2608 ;;		 -> STR_2(2), STR_1(2), 
  2609 ;; Auto vars:     Size  Location     Type
  2610 ;;		None
  2611 ;; Return value:  Size  Location     Type
  2612 ;;                  2   28[COMRAM] PTR unsigned char 
  2613 ;; Registers used:
  2614 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2620 ;;      Params:         4       0       0       0       0       0       0       0       0
  2621 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2622 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2623 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2624 ;;Total ram usage:        4 bytes
  2625 ;; Hardware stack levels used:    1
  2626 ;; Hardware stack levels required when called:    4
  2627 ;; This function calls:
  2628 ;;		_strcspn
  2629 ;;		_strspn
  2630 ;; This function is called by:
  2631 ;;		_parseGcode
  2632 ;; This function uses a non-reentrant model
  2633 ;;
  2634                           
  2635                           	psect	text10
  2636  0037CA                     __ptext10:
  2637                           	opt stack 0
  2638  0037CA                     _strtok:
  2639                           	opt stack 25
  2640                           
  2641                           ;incstack = 0
  2642  0037CA  501D               	movf	strtok@s1,w,c
  2643  0037CC  101E               	iorwf	strtok@s1+1,w,c
  2644  0037CE  A4D8               	btfss	status,2,c
  2645  0037D0  D004               	goto	l1188
  2646  0037D2  C04B  F01D         	movff	strtok@sp,strtok@s1
  2647  0037D6  C04C  F01E         	movff	strtok@sp+1,strtok@s1+1
  2648  0037DA                     l1188:
  2649  0037DA  501D               	movf	strtok@s1,w,c
  2650  0037DC  101E               	iorwf	strtok@s1+1,w,c
  2651  0037DE  A4D8               	btfss	status,2,c
  2652  0037E0  D005               	goto	l4508
  2653  0037E2  0E00               	movlw	0
  2654  0037E4  6E1D               	movwf	?_strtok,c
  2655  0037E6  0E00               	movlw	0
  2656  0037E8  6E1E               	movwf	?_strtok+1,c
  2657  0037EA  0012               	return	
  2658  0037EC                     l4508:
  2659  0037EC  C01D  F016         	movff	strtok@s1,strspn@s1
  2660  0037F0  C01E  F017         	movff	strtok@s1+1,strspn@s1+1
  2661  0037F4  C01F  F018         	movff	strtok@s2,strspn@s2
  2662  0037F8  C020  F019         	movff	strtok@s2+1,strspn@s2+1
  2663  0037FC  EC95  F01F         	call	_strspn	;wreg free
  2664  003800  5016               	movf	?_strspn,w,c
  2665  003802  261D               	addwf	strtok@s1,f,c
  2666  003804  5017               	movf	?_strspn+1,w,c
  2667  003806  221E               	addwfc	strtok@s1+1,f,c
  2668  003808  C01D  FFD9         	movff	strtok@s1,fsr2l
  2669  00380C  C01E  FFDA         	movff	strtok@s1+1,fsr2h
  2670  003810  50DF               	movf	indf2,w,c
  2671  003812  A4D8               	btfss	status,2,c
  2672  003814  D009               	goto	l4516
  2673  003816  0E00               	movlw	0
  2674  003818  6E4B               	movwf	strtok@sp,c
  2675  00381A  0E00               	movlw	0
  2676  00381C  6E4C               	movwf	strtok@sp+1,c
  2677  00381E  C04B  F01D         	movff	strtok@sp,?_strtok
  2678  003822  C04C  F01E         	movff	strtok@sp+1,?_strtok+1
  2679  003826  0012               	return	
  2680  003828                     l4516:
  2681  003828  C01D  F016         	movff	strtok@s1,strcspn@s1
  2682  00382C  C01E  F017         	movff	strtok@s1+1,strcspn@s1+1
  2683  003830  C01F  F018         	movff	strtok@s2,strcspn@s2
  2684  003834  C020  F019         	movff	strtok@s2+1,strcspn@s2+1
  2685  003838  ECBD  F01F         	call	_strcspn	;wreg free
  2686  00383C  5016               	movf	?_strcspn,w,c
  2687  00383E  241D               	addwf	strtok@s1,w,c
  2688  003840  6E4B               	movwf	strtok@sp,c
  2689  003842  5017               	movf	?_strcspn+1,w,c
  2690  003844  201E               	addwfc	strtok@s1+1,w,c
  2691  003846  6E4C               	movwf	strtok@sp+1,c
  2692  003848  C04B  FFD9         	movff	strtok@sp,fsr2l
  2693  00384C  C04C  FFDA         	movff	strtok@sp+1,fsr2h
  2694  003850  50DF               	movf	indf2,w,c
  2695  003852  B4D8               	btfsc	status,2,c
  2696  003854  D009               	goto	l4524
  2697  003856  C04B  FFD9         	movff	strtok@sp,fsr2l
  2698  00385A  C04C  FFDA         	movff	strtok@sp+1,fsr2h
  2699  00385E  0E00               	movlw	0
  2700  003860  6EDF               	movwf	indf2,c
  2701  003862  4A4B               	infsnz	strtok@sp,f,c
  2702  003864  2A4C               	incf	strtok@sp+1,f,c
  2703  003866  D004               	goto	l1193
  2704  003868                     l4524:
  2705  003868  0E00               	movlw	0
  2706  00386A  6E4B               	movwf	strtok@sp,c
  2707  00386C  0E00               	movlw	0
  2708  00386E  6E4C               	movwf	strtok@sp+1,c
  2709  003870                     l1193:
  2710  003870  C01D  F01D         	movff	strtok@s1,?_strtok
  2711  003874  C01E  F01E         	movff	strtok@s1+1,?_strtok+1
  2712  003878  0012               	return	
  2713  00387A                     __end_of_strtok:
  2714                           	opt stack 0
  2715                           tblptru	equ	0xFF8
  2716                           tblptrh	equ	0xFF7
  2717                           tblptrl	equ	0xFF6
  2718                           tablat	equ	0xFF5
  2719                           prodh	equ	0xFF4
  2720                           prodl	equ	0xFF3
  2721                           intcon	equ	0xFF2
  2722                           intcon2	equ	0xFF1
  2723                           indf0	equ	0xFEF
  2724                           postinc0	equ	0xFEE
  2725                           fsr0h	equ	0xFEA
  2726                           fsr0l	equ	0xFE9
  2727                           wreg	equ	0xFE8
  2728                           indf1	equ	0xFE7
  2729                           fsr1h	equ	0xFE2
  2730                           fsr1l	equ	0xFE1
  2731                           indf2	equ	0xFDF
  2732                           postinc2	equ	0xFDE
  2733                           fsr2h	equ	0xFDA
  2734                           fsr2l	equ	0xFD9
  2735                           status	equ	0xFD8
  2736                           
  2737 ;; *************** function _strspn *****************
  2738 ;; Defined at:
  2739 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\strspn.c"
  2740 ;; Parameters:    Size  Location     Type
  2741 ;;  s1              2   21[COMRAM] PTR const unsigned char 
  2742 ;;		 -> NULL(0), uart_str(40), 
  2743 ;;  s2              2   23[COMRAM] PTR const unsigned char 
  2744 ;;		 -> STR_2(2), STR_1(2), 
  2745 ;; Auto vars:     Size  Location     Type
  2746 ;;  i               2   26[COMRAM] unsigned int 
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  2   21[COMRAM] unsigned int 
  2749 ;; Registers used:
  2750 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2751 ;; Tracked objects:
  2752 ;;		On entry : 0/0
  2753 ;;		On exit  : 0/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2756 ;;      Params:         4       0       0       0       0       0       0       0       0
  2757 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2758 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2759 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2760 ;;Total ram usage:        7 bytes
  2761 ;; Hardware stack levels used:    1
  2762 ;; Hardware stack levels required when called:    3
  2763 ;; This function calls:
  2764 ;;		_strchr
  2765 ;; This function is called by:
  2766 ;;		_strtok
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           	psect	text11
  2771  003F2A                     __ptext11:
  2772                           	opt stack 0
  2773  003F2A                     _strspn:
  2774                           	opt stack 25
  2775                           
  2776                           ;incstack = 0
  2777  003F2A  0E00               	movlw	0
  2778  003F2C  6E1C               	movwf	strspn@i+1,c
  2779  003F2E  0E00               	movlw	0
  2780  003F30  6E1B               	movwf	strspn@i,c
  2781  003F32  D004               	goto	l4472
  2782  003F34                     l4470:
  2783  003F34  4A16               	infsnz	strspn@s1,f,c
  2784  003F36  2A17               	incf	strspn@s1+1,f,c
  2785  003F38  4A1B               	infsnz	strspn@i,f,c
  2786  003F3A  2A1C               	incf	strspn@i+1,f,c
  2787  003F3C                     l4472:
  2788  003F3C  C016  FFD9         	movff	strspn@s1,fsr2l
  2789  003F40  C017  FFDA         	movff	strspn@s1+1,fsr2h
  2790  003F44  50DF               	movf	indf2,w,c
  2791  003F46  B4D8               	btfsc	status,2,c
  2792  003F48  D013               	goto	l1231
  2793  003F4A  C018  F010         	movff	strspn@s2,strchr@ptr
  2794  003F4E  C019  F011         	movff	strspn@s2+1,strchr@ptr+1
  2795  003F52  C016  FFD9         	movff	strspn@s1,fsr2l
  2796  003F56  C017  FFDA         	movff	strspn@s1+1,fsr2h
  2797  003F5A  50DF               	movf	indf2,w,c
  2798  003F5C  6E1A               	movwf	??_strspn& (0+255),c
  2799  003F5E  501A               	movf	??_strspn,w,c
  2800  003F60  6E12               	movwf	strchr@chr,c
  2801  003F62  6A13               	clrf	strchr@chr+1,c
  2802  003F64  EC4E  F01E         	call	_strchr	;wreg free
  2803  003F68  5010               	movf	?_strchr,w,c
  2804  003F6A  1011               	iorwf	?_strchr+1,w,c
  2805  003F6C  A4D8               	btfss	status,2,c
  2806  003F6E  D7E2               	goto	l4470
  2807  003F70                     l1231:
  2808  003F70  C01B  F016         	movff	strspn@i,?_strspn
  2809  003F74  C01C  F017         	movff	strspn@i+1,?_strspn+1
  2810  003F78  0012               	return		;funcret
  2811  003F7A                     __end_of_strspn:
  2812                           	opt stack 0
  2813                           tblptru	equ	0xFF8
  2814                           tblptrh	equ	0xFF7
  2815                           tblptrl	equ	0xFF6
  2816                           tablat	equ	0xFF5
  2817                           prodh	equ	0xFF4
  2818                           prodl	equ	0xFF3
  2819                           intcon	equ	0xFF2
  2820                           intcon2	equ	0xFF1
  2821                           indf0	equ	0xFEF
  2822                           postinc0	equ	0xFEE
  2823                           fsr0h	equ	0xFEA
  2824                           fsr0l	equ	0xFE9
  2825                           wreg	equ	0xFE8
  2826                           indf1	equ	0xFE7
  2827                           fsr1h	equ	0xFE2
  2828                           fsr1l	equ	0xFE1
  2829                           indf2	equ	0xFDF
  2830                           postinc2	equ	0xFDE
  2831                           fsr2h	equ	0xFDA
  2832                           fsr2l	equ	0xFD9
  2833                           status	equ	0xFD8
  2834                           
  2835 ;; *************** function _strcspn *****************
  2836 ;; Defined at:
  2837 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\strcspn.c"
  2838 ;; Parameters:    Size  Location     Type
  2839 ;;  s1              2   21[COMRAM] PTR const unsigned char 
  2840 ;;		 -> NULL(0), uart_str(40), 
  2841 ;;  s2              2   23[COMRAM] PTR const unsigned char 
  2842 ;;		 -> STR_2(2), STR_1(2), 
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;  i               2   26[COMRAM] unsigned int 
  2845 ;; Return value:  Size  Location     Type
  2846 ;;                  2   21[COMRAM] unsigned int 
  2847 ;; Registers used:
  2848 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2849 ;; Tracked objects:
  2850 ;;		On entry : 0/0
  2851 ;;		On exit  : 0/0
  2852 ;;		Unchanged: 0/0
  2853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2854 ;;      Params:         4       0       0       0       0       0       0       0       0
  2855 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2856 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2857 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2858 ;;Total ram usage:        7 bytes
  2859 ;; Hardware stack levels used:    1
  2860 ;; Hardware stack levels required when called:    3
  2861 ;; This function calls:
  2862 ;;		_strchr
  2863 ;; This function is called by:
  2864 ;;		_strtok
  2865 ;; This function uses a non-reentrant model
  2866 ;;
  2867                           
  2868                           	psect	text12
  2869  003F7A                     __ptext12:
  2870                           	opt stack 0
  2871  003F7A                     _strcspn:
  2872                           	opt stack 25
  2873                           
  2874                           ;incstack = 0
  2875  003F7A  0E00               	movlw	0
  2876  003F7C  6E1C               	movwf	strcspn@i+1,c
  2877  003F7E  0E00               	movlw	0
  2878  003F80  6E1B               	movwf	strcspn@i,c
  2879  003F82  D004               	goto	l4480
  2880  003F84                     l4478:
  2881  003F84  4A16               	infsnz	strcspn@s1,f,c
  2882  003F86  2A17               	incf	strcspn@s1+1,f,c
  2883  003F88  4A1B               	infsnz	strcspn@i,f,c
  2884  003F8A  2A1C               	incf	strcspn@i+1,f,c
  2885  003F8C                     l4480:
  2886  003F8C  C016  FFD9         	movff	strcspn@s1,fsr2l
  2887  003F90  C017  FFDA         	movff	strcspn@s1+1,fsr2h
  2888  003F94  50DF               	movf	indf2,w,c
  2889  003F96  B4D8               	btfsc	status,2,c
  2890  003F98  D013               	goto	l1221
  2891  003F9A  C018  F010         	movff	strcspn@s2,strchr@ptr
  2892  003F9E  C019  F011         	movff	strcspn@s2+1,strchr@ptr+1
  2893  003FA2  C016  FFD9         	movff	strcspn@s1,fsr2l
  2894  003FA6  C017  FFDA         	movff	strcspn@s1+1,fsr2h
  2895  003FAA  50DF               	movf	indf2,w,c
  2896  003FAC  6E1A               	movwf	??_strcspn& (0+255),c
  2897  003FAE  501A               	movf	??_strcspn,w,c
  2898  003FB0  6E12               	movwf	strchr@chr,c
  2899  003FB2  6A13               	clrf	strchr@chr+1,c
  2900  003FB4  EC4E  F01E         	call	_strchr	;wreg free
  2901  003FB8  5010               	movf	?_strchr,w,c
  2902  003FBA  1011               	iorwf	?_strchr+1,w,c
  2903  003FBC  B4D8               	btfsc	status,2,c
  2904  003FBE  D7E2               	goto	l4478
  2905  003FC0                     l1221:
  2906  003FC0  C01B  F016         	movff	strcspn@i,?_strcspn
  2907  003FC4  C01C  F017         	movff	strcspn@i+1,?_strcspn+1
  2908  003FC8  0012               	return		;funcret
  2909  003FCA                     __end_of_strcspn:
  2910                           	opt stack 0
  2911                           tblptru	equ	0xFF8
  2912                           tblptrh	equ	0xFF7
  2913                           tblptrl	equ	0xFF6
  2914                           tablat	equ	0xFF5
  2915                           prodh	equ	0xFF4
  2916                           prodl	equ	0xFF3
  2917                           intcon	equ	0xFF2
  2918                           intcon2	equ	0xFF1
  2919                           indf0	equ	0xFEF
  2920                           postinc0	equ	0xFEE
  2921                           fsr0h	equ	0xFEA
  2922                           fsr0l	equ	0xFE9
  2923                           wreg	equ	0xFE8
  2924                           indf1	equ	0xFE7
  2925                           fsr1h	equ	0xFE2
  2926                           fsr1l	equ	0xFE1
  2927                           indf2	equ	0xFDF
  2928                           postinc2	equ	0xFDE
  2929                           fsr2h	equ	0xFDA
  2930                           fsr2l	equ	0xFD9
  2931                           status	equ	0xFD8
  2932                           
  2933 ;; *************** function _strchr *****************
  2934 ;; Defined at:
  2935 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\strchr.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;  ptr             2   15[COMRAM] PTR const unsigned char 
  2938 ;;		 -> STR_2(2), STR_1(2), uart_str(40), 
  2939 ;;  chr             2   17[COMRAM] int 
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;		None
  2942 ;; Return value:  Size  Location     Type
  2943 ;;                  2   15[COMRAM] PTR unsigned char 
  2944 ;; Registers used:
  2945 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2951 ;;      Params:         4       0       0       0       0       0       0       0       0
  2952 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2953 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2954 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2955 ;;Total ram usage:        6 bytes
  2956 ;; Hardware stack levels used:    1
  2957 ;; Hardware stack levels required when called:    2
  2958 ;; This function calls:
  2959 ;;		Nothing
  2960 ;; This function is called by:
  2961 ;;		_parseGcode
  2962 ;;		_strcspn
  2963 ;;		_strspn
  2964 ;; This function uses a non-reentrant model
  2965 ;;
  2966                           
  2967                           	psect	text13
  2968  003C9C                     __ptext13:
  2969                           	opt stack 0
  2970  003C9C                     _strchr:
  2971                           	opt stack 25
  2972  003C9C  C010  FFF6         	movff	strchr@ptr,tblptrl
  2973  003CA0  C011  FFF7         	movff	strchr@ptr+1,tblptrh
  2974  003CA4  6AF8               	clrf	tblptru,c
  2975  003CA6  0E07               	movlw	(high __ramtop+-1)
  2976  003CA8  64F7               	cpfsgt	tblptrh,c
  2977  003CAA  D003               	bra	u3367
  2978  003CAC  0008               	tblrd		*
  2979  003CAE  50F5               	movf	tablat,w,c
  2980  003CB0  D005               	bra	u3360
  2981  003CB2                     u3367:
  2982  003CB2  CFF6 FFE9          	movff	tblptrl,fsr0l
  2983  003CB6  CFF7 FFEA          	movff	tblptrh,fsr0h
  2984  003CBA  50EF               	movf	indf0,w,c
  2985  003CBC                     u3360:
  2986  003CBC  1812               	xorwf	strchr@chr,w,c
  2987  003CBE  A4D8               	btfss	status,2,c
  2988  003CC0  D005               	goto	l3560
  2989  003CC2  C010  F010         	movff	strchr@ptr,?_strchr
  2990  003CC6  C011  F011         	movff	strchr@ptr+1,?_strchr+1
  2991  003CCA  0012               	return	
  2992  003CCC                     l3560:
  2993  003CCC  5010               	movf	strchr@ptr,w,c
  2994  003CCE  6E14               	movwf	??_strchr& (0+255),c
  2995  003CD0  5011               	movf	strchr@ptr+1,w,c
  2996  003CD2  6E15               	movwf	(??_strchr+1)& (0+255),c
  2997  003CD4  4A10               	infsnz	strchr@ptr,f,c
  2998  003CD6  2A11               	incf	strchr@ptr+1,f,c
  2999  003CD8  C014  FFF6         	movff	??_strchr,tblptrl
  3000  003CDC  C015  FFF7         	movff	??_strchr+1,tblptrh
  3001  003CE0  6AF8               	clrf	tblptru,c
  3002  003CE2  0E07               	movlw	(high __ramtop+-1)
  3003  003CE4  64F7               	cpfsgt	tblptrh,c
  3004  003CE6  D003               	bra	u3387
  3005  003CE8  0008               	tblrd		*
  3006  003CEA  50F5               	movf	tablat,w,c
  3007  003CEC  D005               	bra	u3380
  3008  003CEE                     u3387:
  3009  003CEE  CFF6 FFE9          	movff	tblptrl,fsr0l
  3010  003CF2  CFF7 FFEA          	movff	tblptrh,fsr0h
  3011  003CF6  50EF               	movf	indf0,w,c
  3012  003CF8                     u3380:
  3013  003CF8  0900               	iorlw	0
  3014  003CFA  A4D8               	btfss	status,2,c
  3015  003CFC  D7CF               	goto	l3554
  3016  003CFE  0E00               	movlw	0
  3017  003D00  6E10               	movwf	?_strchr,c
  3018  003D02  0E00               	movlw	0
  3019  003D04  6E11               	movwf	?_strchr+1,c
  3020  003D06  0012               	return	
  3021  003D08                     __end_of_strchr:
  3022                           	opt stack 0
  3023                           tblptru	equ	0xFF8
  3024                           tblptrh	equ	0xFF7
  3025                           tblptrl	equ	0xFF6
  3026                           tablat	equ	0xFF5
  3027                           prodh	equ	0xFF4
  3028                           prodl	equ	0xFF3
  3029                           intcon	equ	0xFF2
  3030                           intcon2	equ	0xFF1
  3031                           indf0	equ	0xFEF
  3032                           postinc0	equ	0xFEE
  3033                           fsr0h	equ	0xFEA
  3034                           fsr0l	equ	0xFE9
  3035                           wreg	equ	0xFE8
  3036                           indf1	equ	0xFE7
  3037                           fsr1h	equ	0xFE2
  3038                           fsr1l	equ	0xFE1
  3039                           indf2	equ	0xFDF
  3040                           postinc2	equ	0xFDE
  3041                           fsr2h	equ	0xFDA
  3042                           fsr2l	equ	0xFD9
  3043                           status	equ	0xFD8
  3044                           
  3045 ;; *************** function _sprintf *****************
  3046 ;; Defined at:
  3047 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\doprnt.c"
  3048 ;; Parameters:    Size  Location     Type
  3049 ;;  sp              2    9[BANK0 ] PTR unsigned char 
  3050 ;;		 -> parseGcode@finalposition(40), 
  3051 ;;  f               2   11[BANK0 ] PTR const unsigned char 
  3052 ;;		 -> STR_4(16), STR_3(19), 
  3053 ;; Auto vars:     Size  Location     Type
  3054 ;;  tmpval          4   41[BANK0 ] struct .
  3055 ;;  val             4   35[BANK0 ] unsigned long 
  3056 ;;  fval            3   47[BANK0 ] unsigned long 
  3057 ;;  cp              3    0        PTR const unsigned char 
  3058 ;;  prec            2   45[BANK0 ] int 
  3059 ;;  exp             2   39[BANK0 ] int 
  3060 ;;  flag            2   33[BANK0 ] unsigned short 
  3061 ;;  ap              2   31[BANK0 ] PTR void [1]
  3062 ;;		 -> ?_sprintf(2), 
  3063 ;;  len             2    0        unsigned int 
  3064 ;;  width           2    0        int 
  3065 ;;  c               1   50[BANK0 ] char 
  3066 ;;  d               1    0        unsigned char 
  3067 ;; Return value:  Size  Location     Type
  3068 ;;                  2    9[BANK0 ] int 
  3069 ;; Registers used:
  3070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3071 ;; Tracked objects:
  3072 ;;		On entry : 0/0
  3073 ;;		On exit  : 0/0
  3074 ;;		Unchanged: 0/0
  3075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3076 ;;      Params:         0      13       0       0       0       0       0       0       0
  3077 ;;      Locals:         0      23       0       0       0       0       0       0       0
  3078 ;;      Temps:          0       6       0       0       0       0       0       0       0
  3079 ;;      Totals:         0      42       0       0       0       0       0       0       0
  3080 ;;Total ram usage:       42 bytes
  3081 ;; Hardware stack levels used:    1
  3082 ;; Hardware stack levels required when called:    5
  3083 ;; This function calls:
  3084 ;;		___awdiv
  3085 ;;		___ftadd
  3086 ;;		___ftge
  3087 ;;		___ftmul
  3088 ;;		___ftneg
  3089 ;;		___ftsub
  3090 ;;		___fttol
  3091 ;;		___lldiv
  3092 ;;		___llmod
  3093 ;;		___lltoft
  3094 ;;		___wmul
  3095 ;;		__div_to_l_
  3096 ;;		__tdiv_to_l_
  3097 ;;		_fround
  3098 ;;		_isdigit
  3099 ;;		_scale
  3100 ;; This function is called by:
  3101 ;;		_parseGcode
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           	psect	text14
  3106  0008DE                     __ptext14:
  3107                           	opt stack 0
  3108  0008DE                     _sprintf:
  3109                           	opt stack 24
  3110                           
  3111                           ;doprnt.c: 494: va_list ap;
  3112                           ;doprnt.c: 499: signed char c;
  3113                           ;doprnt.c: 501: int width;
  3114                           ;doprnt.c: 504: int prec;
  3115                           ;doprnt.c: 508: unsigned short flag;
  3116                           ;doprnt.c: 515: char d;
  3117                           ;doprnt.c: 516: double fval;
  3118                           ;doprnt.c: 517: int exp;
  3119                           ;doprnt.c: 523: union {
  3120                           ;doprnt.c: 524: unsigned long vd;
  3121                           ;doprnt.c: 525: double integ;
  3122                           ;doprnt.c: 526: } tmpval;
  3123                           ;doprnt.c: 528: unsigned long val;
  3124                           ;doprnt.c: 529: unsigned len;
  3125                           ;doprnt.c: 530: const char * cp;
  3126                           ;doprnt.c: 533: *ap = __va_start();
  3127                           
  3128                           ;incstack = 0
  3129  0008DE  0E6D               	movlw	low (?_sprintf+4)
  3130  0008E0  0100               	movlb	0	; () banked
  3131  0008E2  6F7F               	movwf	sprintf@ap& (0+255),b
  3132  0008E4  0E00               	movlw	high (?_sprintf+4)
  3133  0008E6  0100               	movlb	0	; () banked
  3134  0008E8  6F80               	movwf	(sprintf@ap+1)& (0+255),b
  3135                           
  3136                           ;doprnt.c: 536: while(c = *f++) {
  3137  0008EA  D3DE               	goto	l6382
  3138  0008EC                     l6184:
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;doprnt.c: 538: if(c != '%')
  3142  0008EC  0E25               	movlw	37
  3143  0008EE  0100               	movlb	0	; () banked
  3144  0008F0  1992               	xorwf	sprintf@c& (0+255),w,b
  3145  0008F2  B4D8               	btfsc	status,2,c
  3146  0008F4  D007               	goto	l6190
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;doprnt.c: 540: {
  3150                           ;doprnt.c: 541: ((*sp++ = (c)));
  3151  0008F6  C069  FFD9         	movff	sprintf@sp,fsr2l
  3152  0008FA  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  3153  0008FE  C092  FFDF         	movff	sprintf@c,indf2
  3154  000902  D3CF               	goto	l6380
  3155  000904                     l6190:
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;doprnt.c: 543: }
  3159                           ;doprnt.c: 548: flag = 0;
  3160  000904  0E00               	movlw	0
  3161  000906  0100               	movlb	0	; () banked
  3162  000908  6F82               	movwf	(sprintf@flag+1)& (0+255),b
  3163  00090A  0E00               	movlw	0
  3164  00090C  6F81               	movwf	sprintf@flag& (0+255),b
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;doprnt.c: 611: if(*f == '.') {
  3168  00090E  C06B  FFF6         	movff	sprintf@f,tblptrl
  3169  000912  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  3170  000916                     	if	0	;tblptru may be non-zero
  3171  000916                     	endif
  3172  000916                     	if	0	;tblptru may be non-zero
  3173  000916                     	endif
  3174  000916  0008               	tblrd		*
  3175  000918  50F5               	movf	tablat,w,c
  3176  00091A  0A2E               	xorlw	46
  3177  00091C  A4D8               	btfss	status,2,c
  3178  00091E  D034               	goto	l6204
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;doprnt.c: 612: flag |= 0x4000;
  3182  000920  0100               	movlb	0	; () banked
  3183  000922  8D82               	bsf	(sprintf@flag+1)& (0+255),6,b
  3184                           
  3185                           ;doprnt.c: 613: f++;
  3186  000924  0100               	movlb	0	; () banked
  3187  000926  4B6B               	infsnz	sprintf@f& (0+255),f,b
  3188  000928  2B6C               	incf	(sprintf@f+1)& (0+255),f,b
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;doprnt.c: 620: {
  3192                           ;doprnt.c: 621: prec = 0;
  3193  00092A  0E00               	movlw	0
  3194  00092C  0100               	movlb	0	; () banked
  3195  00092E  6F8E               	movwf	(sprintf@prec+1)& (0+255),b
  3196  000930  0E00               	movlw	0
  3197  000932  6F8D               	movwf	sprintf@prec& (0+255),b
  3198                           
  3199                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3200  000934  D01E               	goto	l6202
  3201  000936                     l6198:
  3202                           
  3203                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3204  000936  C08D  F01E         	movff	sprintf@prec,___wmul@multiplier
  3205  00093A  C08E  F01F         	movff	sprintf@prec+1,___wmul@multiplier+1
  3206  00093E  0E00               	movlw	0
  3207  000940  6E21               	movwf	___wmul@multiplicand+1,c
  3208  000942  0E0A               	movlw	10
  3209  000944  6E20               	movwf	___wmul@multiplicand,c
  3210  000946  ECF9  F020         	call	___wmul	;wreg free
  3211  00094A  C06B  FFF6         	movff	sprintf@f,tblptrl
  3212  00094E  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  3213  000952                     	if	0	;tblptru may be non-zero
  3214  000952                     	endif
  3215  000952                     	if	0	;tblptru may be non-zero
  3216  000952                     	endif
  3217  000952  0008               	tblrd		*
  3218  000954  50F5               	movf	tablat,w,c
  3219  000956  261E               	addwf	?___wmul,f,c
  3220  000958  0E00               	movlw	0
  3221  00095A  221F               	addwfc	?___wmul+1,f,c
  3222  00095C  0ED0               	movlw	208
  3223  00095E  241E               	addwf	?___wmul,w,c
  3224  000960  0100               	movlb	0	; () banked
  3225  000962  6F8D               	movwf	sprintf@prec& (0+255),b
  3226  000964  0EFF               	movlw	255
  3227  000966  201F               	addwfc	?___wmul+1,w,c
  3228  000968  0100               	movlb	0	; () banked
  3229  00096A  6F8E               	movwf	(sprintf@prec+1)& (0+255),b
  3230                           
  3231                           ; BSR set to: 0
  3232  00096C  0100               	movlb	0	; () banked
  3233  00096E  4B6B               	infsnz	sprintf@f& (0+255),f,b
  3234  000970  2B6C               	incf	(sprintf@f+1)& (0+255),f,b
  3235  000972                     l6202:
  3236                           
  3237                           ; BSR set to: 0
  3238  000972  C06B  FFF6         	movff	sprintf@f,tblptrl
  3239  000976  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  3240  00097A                     	if	0	;tblptru may be non-zero
  3241  00097A                     	endif
  3242  00097A                     	if	0	;tblptru may be non-zero
  3243  00097A                     	endif
  3244  00097A  0008               	tblrd		*
  3245  00097C  50F5               	movf	tablat,w,c
  3246  00097E  EC54  F021         	call	_isdigit
  3247  000982  A0D8               	btfss	status,0,c
  3248  000984  D00C               	goto	l6212
  3249  000986  D7D7               	goto	l6198
  3250  000988                     l6204:
  3251                           
  3252                           ;doprnt.c: 626: prec = 0;
  3253  000988  0E00               	movlw	0
  3254  00098A  0100               	movlb	0	; () banked
  3255  00098C  6F8E               	movwf	(sprintf@prec+1)& (0+255),b
  3256  00098E  0E00               	movlw	0
  3257  000990  6F8D               	movwf	sprintf@prec& (0+255),b
  3258                           
  3259                           ; BSR set to: 0
  3260                           ;doprnt.c: 628: flag |= 0x1000;
  3261  000992  0100               	movlb	0	; () banked
  3262  000994  8982               	bsf	(sprintf@flag+1)& (0+255),4,b
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;doprnt.c: 630: }
  3266                           ;doprnt.c: 635: switch(c = *f++) {
  3267  000996  D003               	goto	l6212
  3268  000998                     l6208:
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;doprnt.c: 663: flag |= 0x400;
  3272  000998  0100               	movlb	0	; () banked
  3273  00099A  8582               	bsf	(sprintf@flag+1)& (0+255),2,b
  3274                           
  3275                           ;doprnt.c: 664: break;
  3276  00099C  D013               	goto	l6214
  3277  00099E                     l6212:
  3278  00099E  C06B  FFF6         	movff	sprintf@f,tblptrl
  3279  0009A2  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  3280  0009A6  0100               	movlb	0	; () banked
  3281  0009A8  4B6B               	infsnz	sprintf@f& (0+255),f,b
  3282  0009AA  2B6C               	incf	(sprintf@f+1)& (0+255),f,b
  3283  0009AC                     	if	0	;tblptru may be non-zero
  3284  0009AC                     	endif
  3285  0009AC                     	if	0	;tblptru may be non-zero
  3286  0009AC                     	endif
  3287  0009AC  0008               	tblrd		*
  3288  0009AE  CFF5 F092          	movff	tablat,sprintf@c
  3289  0009B2  0100               	movlb	0	; () banked
  3290  0009B4  5192               	movf	sprintf@c& (0+255),w,b
  3291                           
  3292                           ; Switch size 1, requested type "space"
  3293                           ; Number of cases is 2, Range of values is 0 to 102
  3294                           ; switch strategies available:
  3295                           ; Name         Instructions Cycles
  3296                           ; simple_byte            7     4 (average)
  3297                           ;	Chosen strategy is simple_byte
  3298  0009B6  0A00               	xorlw	0	; case 0
  3299  0009B8  B4D8               	btfsc	status,2,c
  3300  0009BA  D384               	goto	l6384
  3301  0009BC  0A66               	xorlw	102	; case 102
  3302  0009BE  B4D8               	btfsc	status,2,c
  3303  0009C0  D7EB               	goto	l6208
  3304  0009C2  D372               	goto	l6382
  3305  0009C4                     l6214:
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;doprnt.c: 825: if(flag & (0x700)) {
  3309  0009C4  0E07               	movlw	7
  3310  0009C6  0100               	movlb	0	; () banked
  3311  0009C8  1582               	andwf	(sprintf@flag+1)& (0+255),w,b
  3312  0009CA  B4D8               	btfsc	status,2,c
  3313  0009CC  D315               	goto	l6362
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;doprnt.c: 827: if(flag & 0x1000)
  3317  0009CE  0100               	movlb	0	; () banked
  3318  0009D0  A982               	btfss	(sprintf@flag+1)& (0+255),4,b
  3319  0009D2  D005               	goto	l6220
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;doprnt.c: 829: prec = 6;
  3323  0009D4  0E00               	movlw	0
  3324  0009D6  0100               	movlb	0	; () banked
  3325  0009D8  6F8E               	movwf	(sprintf@prec+1)& (0+255),b
  3326  0009DA  0E06               	movlw	6
  3327  0009DC  6F8D               	movwf	sprintf@prec& (0+255),b
  3328  0009DE                     l6220:
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3332  0009DE  C07F  FFD9         	movff	sprintf@ap,fsr2l
  3333  0009E2  C080  FFDA         	movff	sprintf@ap+1,fsr2h
  3334  0009E6  CFDE F08F          	movff	postinc2,sprintf@fval
  3335  0009EA  CFDE F090          	movff	postinc2,sprintf@fval+1
  3336  0009EE  CFDD F091          	movff	postdec2,sprintf@fval+2
  3337                           
  3338                           ; BSR set to: 0
  3339  0009F2  0E03               	movlw	3
  3340  0009F4  0100               	movlb	0	; () banked
  3341  0009F6  277F               	addwf	sprintf@ap& (0+255),f,b
  3342  0009F8  0E00               	movlw	0
  3343  0009FA  2380               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;doprnt.c: 831: if(fval < 0.0) {
  3347  0009FC  0100               	movlb	0	; () banked
  3348  0009FE  AF91               	btfss	(sprintf@fval+2)& (0+255),7,b
  3349  000A00  D011               	goto	l6230
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;doprnt.c: 832: fval = -fval;
  3353  000A02  C08F  F010         	movff	sprintf@fval,___ftneg@f1
  3354  000A06  C090  F011         	movff	sprintf@fval+1,___ftneg@f1+1
  3355  000A0A  C091  F012         	movff	sprintf@fval+2,___ftneg@f1+2
  3356  000A0E  EC31  F021         	call	___ftneg	;wreg free
  3357  000A12  C010  F08F         	movff	?___ftneg,sprintf@fval
  3358  000A16  C011  F090         	movff	?___ftneg+1,sprintf@fval+1
  3359  000A1A  C012  F091         	movff	?___ftneg+2,sprintf@fval+2
  3360                           
  3361                           ;doprnt.c: 833: flag |= 0x03;
  3362  000A1E  0E03               	movlw	3
  3363  000A20  0100               	movlb	0	; () banked
  3364  000A22  1381               	iorwf	sprintf@flag& (0+255),f,b
  3365  000A24                     l6230:
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;doprnt.c: 834: }
  3369                           ;doprnt.c: 835: exp = 0;
  3370  000A24  0E00               	movlw	0
  3371  000A26  0100               	movlb	0	; () banked
  3372  000A28  6F88               	movwf	(sprintf@exp+1)& (0+255),b
  3373  000A2A  0E00               	movlw	0
  3374  000A2C  6F87               	movwf	sprintf@exp& (0+255),b
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;doprnt.c: 836: if( fval!=0) {
  3378  000A2E  0100               	movlb	0	; () banked
  3379  000A30  518F               	movf	sprintf@fval& (0+255),w,b
  3380  000A32  0100               	movlb	0	; () banked
  3381  000A34  1190               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3382  000A36  0100               	movlb	0	; () banked
  3383  000A38  1191               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3384  000A3A  B4D8               	btfsc	status,2,c
  3385  000A3C  D091               	goto	l6258
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3389  000A3E  0E82               	movlw	130
  3390  000A40  0100               	movlb	0	; () banked
  3391  000A42  6F76               	movwf	??_sprintf& (0+255),b
  3392  000A44  0EFF               	movlw	255
  3393  000A46  0100               	movlb	0	; () banked
  3394  000A48  6F77               	movwf	(??_sprintf+1)& (0+255),b
  3395  000A4A  C08F  F078         	movff	sprintf@fval,??_sprintf+2
  3396  000A4E  C090  F079         	movff	sprintf@fval+1,??_sprintf+3
  3397  000A52  C091  F07A         	movff	sprintf@fval+2,??_sprintf+4
  3398  000A56  C092  F07B         	movff	sprintf@fval+3,??_sprintf+5
  3399  000A5A  0E10               	movlw	16
  3400  000A5C  D006               	goto	u7180
  3401  000A5E                     u7185:
  3402  000A5E  0100               	movlb	0	; () banked
  3403  000A60  90D8               	bcf	status,0,c
  3404  000A62  337B               	rrcf	(??_sprintf+5)& (0+255),f,b
  3405  000A64  337A               	rrcf	(??_sprintf+4)& (0+255),f,b
  3406  000A66  3379               	rrcf	(??_sprintf+3)& (0+255),f,b
  3407  000A68  3378               	rrcf	(??_sprintf+2)& (0+255),f,b
  3408  000A6A                     u7180:
  3409  000A6A  2EE8               	decfsz	wreg,f,c
  3410  000A6C  D7F8               	goto	u7185
  3411  000A6E  0100               	movlb	0	; () banked
  3412  000A70  5178               	movf	(??_sprintf+2)& (0+255),w,b
  3413  000A72  0100               	movlb	0	; () banked
  3414  000A74  2576               	addwf	??_sprintf& (0+255),w,b
  3415  000A76  0100               	movlb	0	; () banked
  3416  000A78  6F87               	movwf	sprintf@exp& (0+255),b
  3417  000A7A  0E00               	movlw	0
  3418  000A7C  0100               	movlb	0	; () banked
  3419  000A7E  2177               	addwfc	(??_sprintf+1)& (0+255),w,b
  3420  000A80  0100               	movlb	0	; () banked
  3421  000A82  6F88               	movwf	(sprintf@exp+1)& (0+255),b
  3422                           
  3423                           ; BSR set to: 0
  3424                           ;doprnt.c: 838: exp--;
  3425  000A84  0100               	movlb	0	; () banked
  3426  000A86  0787               	decf	sprintf@exp& (0+255),f,b
  3427  000A88  A0D8               	btfss	status,0,c
  3428  000A8A  0788               	decf	(sprintf@exp+1)& (0+255),f,b
  3429                           
  3430                           ; BSR set to: 0
  3431                           ;doprnt.c: 839: exp *= 3;
  3432  000A8C  C087  F01E         	movff	sprintf@exp,___wmul@multiplier
  3433  000A90  C088  F01F         	movff	sprintf@exp+1,___wmul@multiplier+1
  3434  000A94  0E00               	movlw	0
  3435  000A96  6E21               	movwf	___wmul@multiplicand+1,c
  3436  000A98  0E03               	movlw	3
  3437  000A9A  6E20               	movwf	___wmul@multiplicand,c
  3438  000A9C  ECF9  F020         	call	___wmul	;wreg free
  3439  000AA0  C01E  F087         	movff	?___wmul,sprintf@exp
  3440  000AA4  C01F  F088         	movff	?___wmul+1,sprintf@exp+1
  3441                           
  3442                           ;doprnt.c: 840: exp /= 10;
  3443  000AA8  C087  F016         	movff	sprintf@exp,___awdiv@dividend
  3444  000AAC  C088  F017         	movff	sprintf@exp+1,___awdiv@dividend+1
  3445  000AB0  0E00               	movlw	0
  3446  000AB2  6E19               	movwf	___awdiv@divisor+1,c
  3447  000AB4  0E0A               	movlw	10
  3448  000AB6  6E18               	movwf	___awdiv@divisor,c
  3449  000AB8  ECDC  F01C         	call	___awdiv	;wreg free
  3450  000ABC  C016  F087         	movff	?___awdiv,sprintf@exp
  3451  000AC0  C017  F088         	movff	?___awdiv+1,sprintf@exp+1
  3452                           
  3453                           ;doprnt.c: 841: if(exp < 0)
  3454  000AC4  0100               	movlb	0	; () banked
  3455  000AC6  AF88               	btfss	(sprintf@exp+1)& (0+255),7,b
  3456  000AC8  D004               	goto	l6246
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;doprnt.c: 842: exp--;
  3460  000ACA  0100               	movlb	0	; () banked
  3461  000ACC  0787               	decf	sprintf@exp& (0+255),f,b
  3462  000ACE  A0D8               	btfss	status,0,c
  3463  000AD0  0788               	decf	(sprintf@exp+1)& (0+255),f,b
  3464  000AD2                     l6246:
  3465                           
  3466                           ; BSR set to: 0
  3467                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3468  000AD2  0100               	movlb	0	; () banked
  3469  000AD4  5187               	movf	sprintf@exp& (0+255),w,b
  3470  000AD6  0800               	sublw	0
  3471  000AD8  ECAC  F00D         	call	_scale
  3472  000ADC  C033  F089         	movff	?_scale,sprintf@tmpval
  3473  000AE0  C034  F08A         	movff	?_scale+1,sprintf@tmpval+1
  3474  000AE4  C035  F08B         	movff	?_scale+2,sprintf@tmpval+2
  3475                           
  3476                           ;doprnt.c: 847: tmpval.integ *= fval;
  3477  000AE8  C089  F024         	movff	sprintf@tmpval,___ftmul@f1
  3478  000AEC  C08A  F025         	movff	sprintf@tmpval+1,___ftmul@f1+1
  3479  000AF0  C08B  F026         	movff	sprintf@tmpval+2,___ftmul@f1+2
  3480  000AF4  C08F  F027         	movff	sprintf@fval,___ftmul@f2
  3481  000AF8  C090  F028         	movff	sprintf@fval+1,___ftmul@f2+1
  3482  000AFC  C091  F029         	movff	sprintf@fval+2,___ftmul@f2+2
  3483  000B00  EC2D  F01A         	call	___ftmul	;wreg free
  3484  000B04  C024  F089         	movff	?___ftmul,sprintf@tmpval
  3485  000B08  C025  F08A         	movff	?___ftmul+1,sprintf@tmpval+1
  3486  000B0C  C026  F08B         	movff	?___ftmul+2,sprintf@tmpval+2
  3487                           
  3488                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3489  000B10  C089  F010         	movff	sprintf@tmpval,___ftge@ff1
  3490  000B14  C08A  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3491  000B18  C08B  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3492  000B1C  0E00               	movlw	0
  3493  000B1E  6E13               	movwf	___ftge@ff2,c
  3494  000B20  0E80               	movlw	128
  3495  000B22  6E14               	movwf	___ftge@ff2+1,c
  3496  000B24  0E3F               	movlw	63
  3497  000B26  6E15               	movwf	___ftge@ff2+2,c
  3498  000B28  EC94  F01C         	call	___ftge	;wreg free
  3499  000B2C  B0D8               	btfsc	status,0,c
  3500  000B2E  D005               	goto	l6254
  3501                           
  3502                           ;doprnt.c: 849: exp--;
  3503  000B30  0100               	movlb	0	; () banked
  3504  000B32  0787               	decf	sprintf@exp& (0+255),f,b
  3505  000B34  A0D8               	btfss	status,0,c
  3506  000B36  0788               	decf	(sprintf@exp+1)& (0+255),f,b
  3507  000B38  D013               	goto	l6258
  3508  000B3A                     l6254:
  3509                           
  3510                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3511  000B3A  C089  F010         	movff	sprintf@tmpval,___ftge@ff1
  3512  000B3E  C08A  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3513  000B42  C08B  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3514  000B46  0E00               	movlw	0
  3515  000B48  6E13               	movwf	___ftge@ff2,c
  3516  000B4A  0E20               	movlw	32
  3517  000B4C  6E14               	movwf	___ftge@ff2+1,c
  3518  000B4E  0E41               	movlw	65
  3519  000B50  6E15               	movwf	___ftge@ff2+2,c
  3520  000B52  EC94  F01C         	call	___ftge	;wreg free
  3521  000B56  A0D8               	btfss	status,0,c
  3522  000B58  D003               	goto	l6258
  3523                           
  3524                           ;doprnt.c: 851: exp++;
  3525  000B5A  0100               	movlb	0	; () banked
  3526  000B5C  4B87               	infsnz	sprintf@exp& (0+255),f,b
  3527  000B5E  2B88               	incf	(sprintf@exp+1)& (0+255),f,b
  3528  000B60                     l6258:
  3529                           
  3530                           ;doprnt.c: 852: }
  3531                           ;doprnt.c: 1112: if(prec <= 12)
  3532  000B60  0100               	movlb	0	; () banked
  3533  000B62  BF8E               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3534  000B64  D008               	goto	l6260
  3535  000B66  0100               	movlb	0	; () banked
  3536  000B68  518E               	movf	(sprintf@prec+1)& (0+255),w,b
  3537  000B6A  E11D               	bnz	l6262
  3538  000B6C  0E0D               	movlw	13
  3539  000B6E  0100               	movlb	0	; () banked
  3540  000B70  5D8D               	subwf	sprintf@prec& (0+255),w,b
  3541  000B72  B0D8               	btfsc	status,0,c
  3542  000B74  D018               	goto	l6262
  3543  000B76                     l6260:
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;doprnt.c: 1113: fval += fround(prec);
  3547  000B76  C08F  F03D         	movff	sprintf@fval,___ftadd@f1
  3548  000B7A  C090  F03E         	movff	sprintf@fval+1,___ftadd@f1+1
  3549  000B7E  C091  F03F         	movff	sprintf@fval+2,___ftadd@f1+2
  3550  000B82  0100               	movlb	0	; () banked
  3551  000B84  518D               	movf	sprintf@prec& (0+255),w,b
  3552  000B86  ECCB  F014         	call	_fround
  3553  000B8A  C033  F040         	movff	?_fround,___ftadd@f2
  3554  000B8E  C034  F041         	movff	?_fround+1,___ftadd@f2+1
  3555  000B92  C035  F042         	movff	?_fround+2,___ftadd@f2+2
  3556  000B96  ECF0  F016         	call	___ftadd	;wreg free
  3557  000B9A  C03D  F08F         	movff	?___ftadd,sprintf@fval
  3558  000B9E  C03E  F090         	movff	?___ftadd+1,sprintf@fval+1
  3559  000BA2  C03F  F091         	movff	?___ftadd+2,sprintf@fval+2
  3560  000BA6                     l6262:
  3561                           
  3562                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3563  000BA6  0100               	movlb	0	; () banked
  3564  000BA8  BF88               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3565  000BAA  D008               	goto	l6264
  3566  000BAC  0100               	movlb	0	; () banked
  3567  000BAE  5188               	movf	(sprintf@exp+1)& (0+255),w,b
  3568  000BB0  E126               	bnz	l6270
  3569  000BB2  0E0A               	movlw	10
  3570  000BB4  0100               	movlb	0	; () banked
  3571  000BB6  5D87               	subwf	sprintf@exp& (0+255),w,b
  3572  000BB8  B0D8               	btfsc	status,0,c
  3573  000BBA  D021               	goto	l6270
  3574  000BBC                     l6264:
  3575                           
  3576                           ; BSR set to: 0
  3577  000BBC  0100               	movlb	0	; () banked
  3578  000BBE  518F               	movf	sprintf@fval& (0+255),w,b
  3579  000BC0  0100               	movlb	0	; () banked
  3580  000BC2  1190               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3581  000BC4  0100               	movlb	0	; () banked
  3582  000BC6  1191               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3583  000BC8  B4D8               	btfsc	status,2,c
  3584  000BCA  D05B               	goto	l6284
  3585                           
  3586                           ; BSR set to: 0
  3587  000BCC  C08F  F03A         	movff	sprintf@fval,___fttol@f1
  3588  000BD0  C090  F03B         	movff	sprintf@fval+1,___fttol@f1+1
  3589  000BD4  C091  F03C         	movff	sprintf@fval+2,___fttol@f1+2
  3590  000BD8  EC1C  F019         	call	___fttol	;wreg free
  3591  000BDC  503A               	movf	?___fttol,w,c
  3592  000BDE  103B               	iorwf	?___fttol+1,w,c
  3593  000BE0  103C               	iorwf	?___fttol+2,w,c
  3594  000BE2  103D               	iorwf	?___fttol+3,w,c
  3595  000BE4  A4D8               	btfss	status,2,c
  3596  000BE6  D04D               	goto	l6284
  3597  000BE8  0100               	movlb	0	; () banked
  3598  000BEA  BF88               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3599  000BEC  D04A               	goto	l6284
  3600  000BEE  0100               	movlb	0	; () banked
  3601  000BF0  5188               	movf	(sprintf@exp+1)& (0+255),w,b
  3602  000BF2  E105               	bnz	l6270
  3603  000BF4  0E02               	movlw	2
  3604  000BF6  0100               	movlb	0	; () banked
  3605  000BF8  5D87               	subwf	sprintf@exp& (0+255),w,b
  3606  000BFA  A0D8               	btfss	status,0,c
  3607  000BFC  D042               	goto	l6284
  3608  000BFE                     l6270:
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3612  000BFE  C089  F010         	movff	sprintf@tmpval,___ftge@ff1
  3613  000C02  C08A  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3614  000C06  C08B  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3615  000C0A  0E70               	movlw	112
  3616  000C0C  6E13               	movwf	___ftge@ff2,c
  3617  000C0E  0E89               	movlw	137
  3618  000C10  6E14               	movwf	___ftge@ff2+1,c
  3619  000C12  0E40               	movlw	64
  3620  000C14  6E15               	movwf	___ftge@ff2+2,c
  3621  000C16  EC94  F01C         	call	___ftge	;wreg free
  3622  000C1A  B0D8               	btfsc	status,0,c
  3623  000C1C  D003               	goto	l6274
  3624                           
  3625                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3626  000C1E  0100               	movlb	0	; () banked
  3627  000C20  0EF7               	movlw	247
  3628  000C22  D002               	goto	L1
  3629  000C24                     l6274:
  3630                           
  3631                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3632  000C24  0100               	movlb	0	; () banked
  3633  000C26  0EF8               	movlw	248
  3634  000C28                     L1:
  3635  000C28  2787               	addwf	sprintf@exp& (0+255),f,b
  3636  000C2A  0EFF               	movlw	255
  3637  000C2C  2388               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;doprnt.c: 1124: }
  3641                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3642                           
  3643                           ; BSR set to: 0
  3644  000C2E  0100               	movlb	0	; () banked
  3645  000C30  5187               	movf	sprintf@exp& (0+255),w,b
  3646  000C32  ECAC  F00D         	call	_scale
  3647  000C36  C033  F089         	movff	?_scale,sprintf@tmpval
  3648  000C3A  C034  F08A         	movff	?_scale+1,sprintf@tmpval+1
  3649  000C3E  C035  F08B         	movff	?_scale+2,sprintf@tmpval+2
  3650                           
  3651                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3652  000C42  C08F  F010         	movff	sprintf@fval,__tdiv_to_l_@f1
  3653  000C46  C090  F011         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  3654  000C4A  C091  F012         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  3655  000C4E  C089  F013         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  3656  000C52  C08A  F014         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  3657  000C56  C08B  F015         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  3658  000C5A  ECEF  F017         	call	__tdiv_to_l_	;wreg free
  3659  000C5E  C010  F083         	movff	?__tdiv_to_l_,sprintf@val
  3660  000C62  C011  F084         	movff	?__tdiv_to_l_+1,sprintf@val+1
  3661  000C66  C012  F085         	movff	?__tdiv_to_l_+2,sprintf@val+2
  3662  000C6A  C013  F086         	movff	?__tdiv_to_l_+3,sprintf@val+3
  3663                           
  3664                           ;doprnt.c: 1129: fval = 0.0;
  3665  000C6E  0E00               	movlw	0
  3666  000C70  0100               	movlb	0	; () banked
  3667  000C72  6F8F               	movwf	sprintf@fval& (0+255),b
  3668  000C74  0E00               	movlw	0
  3669  000C76  0100               	movlb	0	; () banked
  3670  000C78  6F90               	movwf	(sprintf@fval+1)& (0+255),b
  3671  000C7A  0E00               	movlw	0
  3672  000C7C  0100               	movlb	0	; () banked
  3673  000C7E  6F91               	movwf	(sprintf@fval+2)& (0+255),b
  3674                           
  3675                           ;doprnt.c: 1130: } else {
  3676  000C80  D033               	goto	l6288
  3677  000C82                     l6284:
  3678                           
  3679                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3680  000C82  C08F  F03A         	movff	sprintf@fval,___fttol@f1
  3681  000C86  C090  F03B         	movff	sprintf@fval+1,___fttol@f1+1
  3682  000C8A  C091  F03C         	movff	sprintf@fval+2,___fttol@f1+2
  3683  000C8E  EC1C  F019         	call	___fttol	;wreg free
  3684  000C92  C03A  F083         	movff	?___fttol,sprintf@val
  3685  000C96  C03B  F084         	movff	?___fttol+1,sprintf@val+1
  3686  000C9A  C03C  F085         	movff	?___fttol+2,sprintf@val+2
  3687  000C9E  C03D  F086         	movff	?___fttol+3,sprintf@val+3
  3688                           
  3689                           ;doprnt.c: 1132: fval -= (double)val;
  3690  000CA2  C08F  F063         	movff	sprintf@fval,___ftsub@f1
  3691  000CA6  C090  F064         	movff	sprintf@fval+1,___ftsub@f1+1
  3692  000CAA  C091  F065         	movff	sprintf@fval+2,___ftsub@f1+2
  3693  000CAE  C083  F018         	movff	sprintf@val,___lltoft@c
  3694  000CB2  C084  F019         	movff	sprintf@val+1,___lltoft@c+1
  3695  000CB6  C085  F01A         	movff	sprintf@val+2,___lltoft@c+2
  3696  000CBA  C086  F01B         	movff	sprintf@val+3,___lltoft@c+3
  3697  000CBE  ECEB  F01E         	call	___lltoft	;wreg free
  3698  000CC2  C018  F066         	movff	?___lltoft,___ftsub@f2
  3699  000CC6  C019  F067         	movff	?___lltoft+1,___ftsub@f2+1
  3700  000CCA  C01A  F068         	movff	?___lltoft+2,___ftsub@f2+2
  3701  000CCE  EC0D  F020         	call	___ftsub	;wreg free
  3702  000CD2  C063  F08F         	movff	?___ftsub,sprintf@fval
  3703  000CD6  C064  F090         	movff	?___ftsub+1,sprintf@fval+1
  3704  000CDA  C065  F091         	movff	?___ftsub+2,sprintf@fval+2
  3705                           
  3706                           ;doprnt.c: 1133: exp = 0;
  3707  000CDE  0E00               	movlw	0
  3708  000CE0  0100               	movlb	0	; () banked
  3709  000CE2  6F88               	movwf	(sprintf@exp+1)& (0+255),b
  3710  000CE4  0E00               	movlw	0
  3711  000CE6  6F87               	movwf	sprintf@exp& (0+255),b
  3712  000CE8                     l6288:
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;doprnt.c: 1134: }
  3716                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3717  000CE8  0E01               	movlw	1
  3718  000CEA  0100               	movlb	0	; () banked
  3719  000CEC  6F92               	movwf	sprintf@c& (0+255),b
  3720  000CEE                     l6290:
  3721                           
  3722                           ; BSR set to: 0
  3723  000CEE  0E0A               	movlw	10
  3724  000CF0  0100               	movlb	0	; () banked
  3725  000CF2  1992               	xorwf	sprintf@c& (0+255),w,b
  3726  000CF4  B4D8               	btfsc	status,2,c
  3727  000CF6  D01E               	goto	l6302
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;doprnt.c: 1137: if(val < dpowers[c])
  3731                           
  3732                           ; BSR set to: 0
  3733                           
  3734                           ; BSR set to: 0
  3735  000CF8  0100               	movlb	0	; () banked
  3736  000CFA  5192               	movf	sprintf@c& (0+255),w,b
  3737  000CFC  0D04               	mullw	4
  3738  000CFE  0E01               	movlw	low _dpowers
  3739  000D00  24F3               	addwf	prodl,w,c
  3740  000D02  6EF6               	movwf	tblptrl,c
  3741  000D04  0E08               	movlw	high _dpowers
  3742  000D06  20F4               	addwfc	prodh,w,c
  3743  000D08  6EF7               	movwf	tblptrh,c
  3744  000D0A                     	if	0	;There are less than 3 active tblptr bytes
  3745  000D0A                     	endif
  3746  000D0A  0009               	tblrd		*+
  3747  000D0C  50F5               	movf	tablat,w,c
  3748  000D0E  0100               	movlb	0	; () banked
  3749  000D10  5D83               	subwf	sprintf@val& (0+255),w,b
  3750  000D12  0009               	tblrd		*+
  3751  000D14  50F5               	movf	tablat,w,c
  3752  000D16  0100               	movlb	0	; () banked
  3753  000D18  5984               	subwfb	(sprintf@val+1)& (0+255),w,b
  3754  000D1A  0009               	tblrd		*+
  3755  000D1C  50F5               	movf	tablat,w,c
  3756  000D1E  0100               	movlb	0	; () banked
  3757  000D20  5985               	subwfb	(sprintf@val+2)& (0+255),w,b
  3758  000D22  0009               	tblrd		*+
  3759  000D24  50F5               	movf	tablat,w,c
  3760  000D26  0100               	movlb	0	; () banked
  3761  000D28  5986               	subwfb	(sprintf@val+3)& (0+255),w,b
  3762  000D2A  A0D8               	btfss	status,0,c
  3763  000D2C  D003               	goto	l6302
  3764                           
  3765                           ; BSR set to: 0
  3766                           
  3767                           ; BSR set to: 0
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;doprnt.c: 1138: break;
  3771  000D2E  0100               	movlb	0	; () banked
  3772  000D30  2B92               	incf	sprintf@c& (0+255),f,b
  3773  000D32  D7DD               	goto	l6290
  3774  000D34                     l6302:
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;doprnt.c: 1175: {
  3778                           ;doprnt.c: 1188: if(flag & 0x03)
  3779  000D34  0E03               	movlw	3
  3780  000D36  0100               	movlb	0	; () banked
  3781  000D38  1581               	andwf	sprintf@flag& (0+255),w,b
  3782  000D3A  0100               	movlb	0	; () banked
  3783  000D3C  6F76               	movwf	??_sprintf& (0+255),b
  3784  000D3E  0E00               	movlw	0
  3785  000D40  0100               	movlb	0	; () banked
  3786  000D42  1582               	andwf	(sprintf@flag+1)& (0+255),w,b
  3787  000D44  0100               	movlb	0	; () banked
  3788  000D46  6F77               	movwf	(??_sprintf+1)& (0+255),b
  3789  000D48  0100               	movlb	0	; () banked
  3790  000D4A  5176               	movf	??_sprintf& (0+255),w,b
  3791  000D4C  0100               	movlb	0	; () banked
  3792  000D4E  1177               	iorwf	(??_sprintf+1)& (0+255),w,b
  3793  000D50  B4D8               	btfsc	status,2,c
  3794  000D52  D054               	goto	l6316
  3795                           
  3796                           ; BSR set to: 0
  3797                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3798  000D54  C069  FFD9         	movff	sprintf@sp,fsr2l
  3799  000D58  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  3800  000D5C  0E2D               	movlw	45
  3801  000D5E  D04C               	goto	L2
  3802  000D60                     l6306:
  3803                           
  3804                           ; BSR set to: 0
  3805  000D60  0100               	movlb	0	; () banked
  3806  000D62  4B69               	infsnz	sprintf@sp& (0+255),f,b
  3807  000D64  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;doprnt.c: 1195: }
  3811                           ;doprnt.c: 1196: while(c--) {
  3812  000D66  D04A               	goto	l6316
  3813  000D68                     l6308:
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;doprnt.c: 1200: {
  3817                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3818  000D68  C083  F010         	movff	sprintf@val,___lldiv@dividend
  3819  000D6C  C084  F011         	movff	sprintf@val+1,___lldiv@dividend+1
  3820  000D70  C085  F012         	movff	sprintf@val+2,___lldiv@dividend+2
  3821  000D74  C086  F013         	movff	sprintf@val+3,___lldiv@dividend+3
  3822  000D78  0100               	movlb	0	; () banked
  3823  000D7A  5192               	movf	sprintf@c& (0+255),w,b
  3824  000D7C  0D04               	mullw	4
  3825  000D7E  0E01               	movlw	low _dpowers
  3826  000D80  24F3               	addwf	prodl,w,c
  3827  000D82  6EF6               	movwf	tblptrl,c
  3828  000D84  0E08               	movlw	high _dpowers
  3829  000D86  20F4               	addwfc	prodh,w,c
  3830  000D88  6EF7               	movwf	tblptrh,c
  3831  000D8A                     	if	0	;There are less than 3 active tblptr bytes
  3832  000D8A                     	endif
  3833  000D8A  0009               	tblrd		*+
  3834  000D8C  CFF5 F014          	movff	tablat,___lldiv@divisor
  3835  000D90  0009               	tblrd		*+
  3836  000D92  CFF5 F015          	movff	tablat,___lldiv@divisor+1
  3837  000D96  0009               	tblrd		*+
  3838  000D98  CFF5 F016          	movff	tablat,___lldiv@divisor+2
  3839  000D9C  000A               	tblrd		*-
  3840  000D9E  CFF5 F017          	movff	tablat,___lldiv@divisor+3
  3841  000DA2  EC1E  F01D         	call	___lldiv	;wreg free
  3842  000DA6  C010  F089         	movff	?___lldiv,sprintf@tmpval
  3843  000DAA  C011  F08A         	movff	?___lldiv+1,sprintf@tmpval+1
  3844  000DAE  C012  F08B         	movff	?___lldiv+2,sprintf@tmpval+2
  3845  000DB2  C013  F08C         	movff	?___lldiv+3,sprintf@tmpval+3
  3846                           
  3847                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3848  000DB6  C089  F010         	movff	sprintf@tmpval,___llmod@dividend
  3849  000DBA  C08A  F011         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3850  000DBE  C08B  F012         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3851  000DC2  C08C  F013         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3852  000DC6  0E0A               	movlw	10
  3853  000DC8  6E14               	movwf	___llmod@divisor,c
  3854  000DCA  0E00               	movlw	0
  3855  000DCC  6E15               	movwf	___llmod@divisor+1,c
  3856  000DCE  0E00               	movlw	0
  3857  000DD0  6E16               	movwf	___llmod@divisor+2,c
  3858  000DD2  0E00               	movlw	0
  3859  000DD4  6E17               	movwf	___llmod@divisor+3,c
  3860  000DD6  ECB8  F01E         	call	___llmod	;wreg free
  3861  000DDA  C010  F089         	movff	?___llmod,sprintf@tmpval
  3862  000DDE  C011  F08A         	movff	?___llmod+1,sprintf@tmpval+1
  3863  000DE2  C012  F08B         	movff	?___llmod+2,sprintf@tmpval+2
  3864  000DE6  C013  F08C         	movff	?___llmod+3,sprintf@tmpval+3
  3865                           
  3866                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3867  000DEA  0100               	movlb	0	; () banked
  3868  000DEC  5189               	movf	sprintf@tmpval& (0+255),w,b
  3869  000DEE  0F30               	addlw	48
  3870  000DF0  C069  FFD9         	movff	sprintf@sp,fsr2l
  3871  000DF4  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  3872  000DF8                     L2:
  3873  000DF8  6EDF               	movwf	indf2,c
  3874  000DFA  D7B2               	goto	l6306
  3875  000DFC                     l6316:
  3876                           
  3877                           ; BSR set to: 0
  3878  000DFC  0100               	movlb	0	; () banked
  3879  000DFE  0792               	decf	sprintf@c& (0+255),f,b
  3880  000E00  0100               	movlb	0	; () banked
  3881  000E02  2992               	incf	sprintf@c& (0+255),w,b
  3882  000E04  B4D8               	btfsc	status,2,c
  3883  000E06  D00E               	goto	l6324
  3884  000E08  D7AF               	goto	l6308
  3885  000E0A                     l6318:
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3889  000E0A  C069  FFD9         	movff	sprintf@sp,fsr2l
  3890  000E0E  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  3891  000E12  0E30               	movlw	48
  3892  000E14  6EDF               	movwf	indf2,c
  3893                           
  3894                           ; BSR set to: 0
  3895  000E16  0100               	movlb	0	; () banked
  3896  000E18  4B69               	infsnz	sprintf@sp& (0+255),f,b
  3897  000E1A  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  3898                           
  3899                           ; BSR set to: 0
  3900                           ;doprnt.c: 1209: exp--;
  3901  000E1C  0100               	movlb	0	; () banked
  3902  000E1E  0787               	decf	sprintf@exp& (0+255),f,b
  3903  000E20  A0D8               	btfss	status,0,c
  3904  000E22  0788               	decf	(sprintf@exp+1)& (0+255),f,b
  3905  000E24                     l6324:
  3906                           
  3907                           ; BSR set to: 0
  3908  000E24  0100               	movlb	0	; () banked
  3909  000E26  BF88               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3910  000E28  D007               	goto	l6326
  3911  000E2A  0100               	movlb	0	; () banked
  3912  000E2C  5188               	movf	(sprintf@exp+1)& (0+255),w,b
  3913  000E2E  E1ED               	bnz	l6318
  3914  000E30  0100               	movlb	0	; () banked
  3915  000E32  0587               	decf	sprintf@exp& (0+255),w,b
  3916  000E34  B0D8               	btfsc	status,0,c
  3917  000E36  D7E9               	goto	l6318
  3918  000E38                     l6326:
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;doprnt.c: 1210: }
  3922                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3923  000E38  0100               	movlb	0	; () banked
  3924  000E3A  BF8E               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3925  000E3C  D00C               	goto	l498
  3926  000E3E  0100               	movlb	0	; () banked
  3927  000E40  518E               	movf	(sprintf@prec+1)& (0+255),w,b
  3928  000E42  E105               	bnz	u7340
  3929  000E44  0E09               	movlw	9
  3930  000E46  0100               	movlb	0	; () banked
  3931  000E48  5D8D               	subwf	sprintf@prec& (0+255),w,b
  3932  000E4A  A0D8               	btfss	status,0,c
  3933  000E4C  D004               	goto	l498
  3934  000E4E                     u7340:
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3938  000E4E  0E08               	movlw	8
  3939  000E50  0100               	movlb	0	; () banked
  3940  000E52  6F92               	movwf	sprintf@c& (0+255),b
  3941  000E54  D002               	goto	l6330
  3942  000E56                     l498:
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;doprnt.c: 1213: else
  3946                           ;doprnt.c: 1214: c = prec;
  3947  000E56  C08D  F092         	movff	sprintf@prec,sprintf@c
  3948  000E5A                     l6330:
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;doprnt.c: 1215: prec -= c;
  3952  000E5A  0100               	movlb	0	; () banked
  3953  000E5C  5192               	movf	sprintf@c& (0+255),w,b
  3954  000E5E  0100               	movlb	0	; () banked
  3955  000E60  5F8D               	subwf	sprintf@prec& (0+255),f,b
  3956  000E62  0E00               	movlw	0
  3957  000E64  0100               	movlb	0	; () banked
  3958  000E66  BF92               	btfsc	sprintf@c& (0+255),7,b
  3959  000E68  0EFF               	movlw	255
  3960  000E6A  0100               	movlb	0	; () banked
  3961  000E6C  5B8E               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;doprnt.c: 1219: if(c)
  3965  000E6E  0100               	movlb	0	; () banked
  3966  000E70  5192               	movf	sprintf@c& (0+255),w,b
  3967  000E72  0100               	movlb	0	; () banked
  3968  000E74  B4D8               	btfsc	status,2,c
  3969  000E76  D009               	goto	l6338
  3970                           
  3971                           ; BSR set to: 0
  3972                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3973  000E78  C069  FFD9         	movff	sprintf@sp,fsr2l
  3974  000E7C  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  3975  000E80  0E2E               	movlw	46
  3976  000E82  6EDF               	movwf	indf2,c
  3977                           
  3978                           ; BSR set to: 0
  3979  000E84  0100               	movlb	0	; () banked
  3980  000E86  4B69               	infsnz	sprintf@sp& (0+255),f,b
  3981  000E88  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  3982  000E8A                     l6338:
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3986  000E8A  0100               	movlb	0	; () banked
  3987  000E8C  5192               	movf	sprintf@c& (0+255),w,b
  3988  000E8E  ECAC  F00D         	call	_scale
  3989  000E92  C033  F07C         	movff	?_scale,_sprintf$2119
  3990  000E96  C034  F07D         	movff	?_scale+1,_sprintf$2119+1
  3991  000E9A  C035  F07E         	movff	?_scale+2,_sprintf$2119+2
  3992                           
  3993                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3994  000E9E  C08F  F027         	movff	sprintf@fval,___ftmul@f2
  3995  000EA2  C090  F028         	movff	sprintf@fval+1,___ftmul@f2+1
  3996  000EA6  C091  F029         	movff	sprintf@fval+2,___ftmul@f2+2
  3997  000EAA  C07C  F024         	movff	_sprintf$2119,___ftmul@f1
  3998  000EAE  C07D  F025         	movff	_sprintf$2119+1,___ftmul@f1+1
  3999  000EB2  C07E  F026         	movff	_sprintf$2119+2,___ftmul@f1+2
  4000  000EB6  EC2D  F01A         	call	___ftmul	;wreg free
  4001  000EBA  C024  F03A         	movff	?___ftmul,___fttol@f1
  4002  000EBE  C025  F03B         	movff	?___ftmul+1,___fttol@f1+1
  4003  000EC2  C026  F03C         	movff	?___ftmul+2,___fttol@f1+2
  4004  000EC6  EC1C  F019         	call	___fttol	;wreg free
  4005  000ECA  C03A  F083         	movff	?___fttol,sprintf@val
  4006  000ECE  C03B  F084         	movff	?___fttol+1,sprintf@val+1
  4007  000ED2  C03C  F085         	movff	?___fttol+2,sprintf@val+2
  4008  000ED6  C03D  F086         	movff	?___fttol+3,sprintf@val+3
  4009                           
  4010                           ;doprnt.c: 1228: while(c--) {
  4011  000EDA  D073               	goto	l6352
  4012  000EDC                     l6342:
  4013                           
  4014                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4015  000EDC  C083  F010         	movff	sprintf@val,___lldiv@dividend
  4016  000EE0  C084  F011         	movff	sprintf@val+1,___lldiv@dividend+1
  4017  000EE4  C085  F012         	movff	sprintf@val+2,___lldiv@dividend+2
  4018  000EE8  C086  F013         	movff	sprintf@val+3,___lldiv@dividend+3
  4019  000EEC  0100               	movlb	0	; () banked
  4020  000EEE  5192               	movf	sprintf@c& (0+255),w,b
  4021  000EF0  0D04               	mullw	4
  4022  000EF2  0E01               	movlw	low _dpowers
  4023  000EF4  24F3               	addwf	prodl,w,c
  4024  000EF6  6EF6               	movwf	tblptrl,c
  4025  000EF8  0E08               	movlw	high _dpowers
  4026  000EFA  20F4               	addwfc	prodh,w,c
  4027  000EFC  6EF7               	movwf	tblptrh,c
  4028  000EFE                     	if	0	;There are less than 3 active tblptr bytes
  4029  000EFE                     	endif
  4030  000EFE  0009               	tblrd		*+
  4031  000F00  CFF5 F014          	movff	tablat,___lldiv@divisor
  4032  000F04  0009               	tblrd		*+
  4033  000F06  CFF5 F015          	movff	tablat,___lldiv@divisor+1
  4034  000F0A  0009               	tblrd		*+
  4035  000F0C  CFF5 F016          	movff	tablat,___lldiv@divisor+2
  4036  000F10  000A               	tblrd		*-
  4037  000F12  CFF5 F017          	movff	tablat,___lldiv@divisor+3
  4038  000F16  EC1E  F01D         	call	___lldiv	;wreg free
  4039  000F1A  C010  F089         	movff	?___lldiv,sprintf@tmpval
  4040  000F1E  C011  F08A         	movff	?___lldiv+1,sprintf@tmpval+1
  4041  000F22  C012  F08B         	movff	?___lldiv+2,sprintf@tmpval+2
  4042  000F26  C013  F08C         	movff	?___lldiv+3,sprintf@tmpval+3
  4043                           
  4044                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4045  000F2A  C089  F010         	movff	sprintf@tmpval,___llmod@dividend
  4046  000F2E  C08A  F011         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4047  000F32  C08B  F012         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4048  000F36  C08C  F013         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4049  000F3A  0E0A               	movlw	10
  4050  000F3C  6E14               	movwf	___llmod@divisor,c
  4051  000F3E  0E00               	movlw	0
  4052  000F40  6E15               	movwf	___llmod@divisor+1,c
  4053  000F42  0E00               	movlw	0
  4054  000F44  6E16               	movwf	___llmod@divisor+2,c
  4055  000F46  0E00               	movlw	0
  4056  000F48  6E17               	movwf	___llmod@divisor+3,c
  4057  000F4A  ECB8  F01E         	call	___llmod	;wreg free
  4058  000F4E  C010  F089         	movff	?___llmod,sprintf@tmpval
  4059  000F52  C011  F08A         	movff	?___llmod+1,sprintf@tmpval+1
  4060  000F56  C012  F08B         	movff	?___llmod+2,sprintf@tmpval+2
  4061  000F5A  C013  F08C         	movff	?___llmod+3,sprintf@tmpval+3
  4062                           
  4063                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4064  000F5E  0100               	movlb	0	; () banked
  4065  000F60  5189               	movf	sprintf@tmpval& (0+255),w,b
  4066  000F62  0F30               	addlw	48
  4067  000F64  C069  FFD9         	movff	sprintf@sp,fsr2l
  4068  000F68  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4069  000F6C  6EDF               	movwf	indf2,c
  4070                           
  4071                           ; BSR set to: 0
  4072  000F6E  0100               	movlb	0	; () banked
  4073  000F70  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4074  000F72  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4075                           
  4076                           ; BSR set to: 0
  4077                           ;doprnt.c: 1232: val %= dpowers[c];
  4078  000F74  C083  F010         	movff	sprintf@val,___llmod@dividend
  4079  000F78  C084  F011         	movff	sprintf@val+1,___llmod@dividend+1
  4080  000F7C  C085  F012         	movff	sprintf@val+2,___llmod@dividend+2
  4081  000F80  C086  F013         	movff	sprintf@val+3,___llmod@dividend+3
  4082  000F84  0100               	movlb	0	; () banked
  4083  000F86  5192               	movf	sprintf@c& (0+255),w,b
  4084  000F88  0D04               	mullw	4
  4085  000F8A  0E01               	movlw	low _dpowers
  4086  000F8C  24F3               	addwf	prodl,w,c
  4087  000F8E  6EF6               	movwf	tblptrl,c
  4088  000F90  0E08               	movlw	high _dpowers
  4089  000F92  20F4               	addwfc	prodh,w,c
  4090  000F94  6EF7               	movwf	tblptrh,c
  4091  000F96                     	if	0	;There are less than 3 active tblptr bytes
  4092  000F96                     	endif
  4093  000F96  0009               	tblrd		*+
  4094  000F98  CFF5 F014          	movff	tablat,___llmod@divisor
  4095  000F9C  0009               	tblrd		*+
  4096  000F9E  CFF5 F015          	movff	tablat,___llmod@divisor+1
  4097  000FA2  0009               	tblrd		*+
  4098  000FA4  CFF5 F016          	movff	tablat,___llmod@divisor+2
  4099  000FA8  000A               	tblrd		*-
  4100  000FAA  CFF5 F017          	movff	tablat,___llmod@divisor+3
  4101  000FAE  ECB8  F01E         	call	___llmod	;wreg free
  4102  000FB2  C010  F083         	movff	?___llmod,sprintf@val
  4103  000FB6  C011  F084         	movff	?___llmod+1,sprintf@val+1
  4104  000FBA  C012  F085         	movff	?___llmod+2,sprintf@val+2
  4105  000FBE  C013  F086         	movff	?___llmod+3,sprintf@val+3
  4106  000FC2                     l6352:
  4107  000FC2  0100               	movlb	0	; () banked
  4108  000FC4  0792               	decf	sprintf@c& (0+255),f,b
  4109  000FC6  0100               	movlb	0	; () banked
  4110  000FC8  2992               	incf	sprintf@c& (0+255),w,b
  4111  000FCA  B4D8               	btfsc	status,2,c
  4112  000FCC  D00E               	goto	l6360
  4113  000FCE  D786               	goto	l6342
  4114  000FD0                     l6354:
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4118  000FD0  C069  FFD9         	movff	sprintf@sp,fsr2l
  4119  000FD4  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4120  000FD8  0E30               	movlw	48
  4121  000FDA  6EDF               	movwf	indf2,c
  4122                           
  4123                           ; BSR set to: 0
  4124  000FDC  0100               	movlb	0	; () banked
  4125  000FDE  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4126  000FE0  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4127                           
  4128                           ; BSR set to: 0
  4129                           ;doprnt.c: 1237: prec--;
  4130  000FE2  0100               	movlb	0	; () banked
  4131  000FE4  078D               	decf	sprintf@prec& (0+255),f,b
  4132  000FE6  A0D8               	btfss	status,0,c
  4133  000FE8  078E               	decf	(sprintf@prec+1)& (0+255),f,b
  4134  000FEA                     l6360:
  4135                           
  4136                           ; BSR set to: 0
  4137  000FEA  0100               	movlb	0	; () banked
  4138  000FEC  518D               	movf	sprintf@prec& (0+255),w,b
  4139  000FEE  0100               	movlb	0	; () banked
  4140  000FF0  118E               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4141  000FF2  B4D8               	btfsc	status,2,c
  4142  000FF4  D059               	goto	l6382
  4143  000FF6  D7EC               	goto	l6354
  4144  000FF8                     l6362:
  4145                           
  4146                           ; BSR set to: 0
  4147                           ;doprnt.c: 1246: }
  4148                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4149  000FF8  0100               	movlb	0	; () banked
  4150  000FFA  518D               	movf	sprintf@prec& (0+255),w,b
  4151  000FFC  0100               	movlb	0	; () banked
  4152  000FFE  118E               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4153  001000  A4D8               	btfss	status,2,c
  4154  001002  D00D               	goto	l6368
  4155                           
  4156                           ; BSR set to: 0
  4157  001004  0100               	movlb	0	; () banked
  4158  001006  5183               	movf	sprintf@val& (0+255),w,b
  4159  001008  0100               	movlb	0	; () banked
  4160  00100A  1184               	iorwf	(sprintf@val+1)& (0+255),w,b
  4161  00100C  0100               	movlb	0	; () banked
  4162  00100E  1185               	iorwf	(sprintf@val+2)& (0+255),w,b
  4163  001010  0100               	movlb	0	; () banked
  4164  001012  1186               	iorwf	(sprintf@val+3)& (0+255),w,b
  4165  001014  A4D8               	btfss	status,2,c
  4166  001016  D003               	goto	l6368
  4167                           
  4168                           ; BSR set to: 0
  4169                           ;doprnt.c: 1291: prec++;
  4170  001018  0100               	movlb	0	; () banked
  4171  00101A  4B8D               	infsnz	sprintf@prec& (0+255),f,b
  4172  00101C  2B8E               	incf	(sprintf@prec+1)& (0+255),f,b
  4173  00101E                     l6368:
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;doprnt.c: 1339: if(c < prec)
  4177  00101E  0E80               	movlw	128
  4178  001020  0100               	movlb	0	; () banked
  4179  001022  BF92               	btfsc	sprintf@c& (0+255),7,b
  4180  001024  0E7F               	movlw	127
  4181  001026  0100               	movlb	0	; () banked
  4182  001028  6F76               	movwf	??_sprintf& (0+255),b
  4183  00102A  0100               	movlb	0	; () banked
  4184  00102C  518D               	movf	sprintf@prec& (0+255),w,b
  4185  00102E  0100               	movlb	0	; () banked
  4186  001030  5D92               	subwf	sprintf@c& (0+255),w,b
  4187  001032  0100               	movlb	0	; () banked
  4188  001034  518E               	movf	(sprintf@prec+1)& (0+255),w,b
  4189  001036  0A80               	xorlw	128
  4190  001038  0100               	movlb	0	; () banked
  4191  00103A  5976               	subwfb	??_sprintf& (0+255),w,b
  4192  00103C  B0D8               	btfsc	status,0,c
  4193  00103E  D003               	goto	l6372
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;doprnt.c: 1340: c = prec;
  4197  001040  C08D  F092         	movff	sprintf@prec,sprintf@c
  4198  001044  D018               	goto	l6376
  4199  001046                     l6372:
  4200                           
  4201                           ; BSR set to: 0
  4202                           ;doprnt.c: 1341: else if(prec < c)
  4203  001046  0100               	movlb	0	; () banked
  4204  001048  518E               	movf	(sprintf@prec+1)& (0+255),w,b
  4205  00104A  0A80               	xorlw	128
  4206  00104C  0100               	movlb	0	; () banked
  4207  00104E  6F76               	movwf	??_sprintf& (0+255),b
  4208  001050  0100               	movlb	0	; () banked
  4209  001052  5192               	movf	sprintf@c& (0+255),w,b
  4210  001054  0100               	movlb	0	; () banked
  4211  001056  5D8D               	subwf	sprintf@prec& (0+255),w,b
  4212  001058  0E80               	movlw	128
  4213  00105A  0100               	movlb	0	; () banked
  4214  00105C  BF92               	btfsc	sprintf@c& (0+255),7,b
  4215  00105E  0E7F               	movlw	127
  4216  001060  0100               	movlb	0	; () banked
  4217  001062  5976               	subwfb	??_sprintf& (0+255),w,b
  4218  001064  B0D8               	btfsc	status,0,c
  4219  001066  D007               	goto	l6376
  4220                           
  4221                           ; BSR set to: 0
  4222                           ;doprnt.c: 1342: prec = c;
  4223  001068  0100               	movlb	0	; () banked
  4224  00106A  5192               	movf	sprintf@c& (0+255),w,b
  4225  00106C  0100               	movlb	0	; () banked
  4226  00106E  6F8D               	movwf	sprintf@prec& (0+255),b
  4227  001070  6B8E               	clrf	(sprintf@prec+1)& (0+255),b
  4228  001072  BF8D               	btfsc	sprintf@prec& (0+255),7,b
  4229  001074  078E               	decf	(sprintf@prec+1)& (0+255),f,b
  4230  001076                     l6376:
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;doprnt.c: 1422: {
  4234                           ;doprnt.c: 1438: if(flag & 0x03)
  4235  001076  0E03               	movlw	3
  4236  001078  0100               	movlb	0	; () banked
  4237  00107A  1581               	andwf	sprintf@flag& (0+255),w,b
  4238  00107C  0100               	movlb	0	; () banked
  4239  00107E  6F76               	movwf	??_sprintf& (0+255),b
  4240  001080  0E00               	movlw	0
  4241  001082  0100               	movlb	0	; () banked
  4242  001084  1582               	andwf	(sprintf@flag+1)& (0+255),w,b
  4243  001086  0100               	movlb	0	; () banked
  4244  001088  6F77               	movwf	(??_sprintf+1)& (0+255),b
  4245  00108A  0100               	movlb	0	; () banked
  4246  00108C  5176               	movf	??_sprintf& (0+255),w,b
  4247  00108E  0100               	movlb	0	; () banked
  4248  001090  1177               	iorwf	(??_sprintf+1)& (0+255),w,b
  4249  001092  B4D8               	btfsc	status,2,c
  4250  001094  D009               	goto	l6382
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4254  001096  C069  FFD9         	movff	sprintf@sp,fsr2l
  4255  00109A  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4256  00109E  0E2D               	movlw	45
  4257  0010A0  6EDF               	movwf	indf2,c
  4258  0010A2                     l6380:
  4259                           
  4260                           ; BSR set to: 0
  4261  0010A2  0100               	movlb	0	; () banked
  4262  0010A4  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4263  0010A6  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4264  0010A8                     l6382:
  4265                           
  4266                           ; BSR set to: 0
  4267  0010A8  C06B  FFF6         	movff	sprintf@f,tblptrl
  4268  0010AC  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  4269  0010B0  0100               	movlb	0	; () banked
  4270  0010B2  4B6B               	infsnz	sprintf@f& (0+255),f,b
  4271  0010B4  2B6C               	incf	(sprintf@f+1)& (0+255),f,b
  4272  0010B6                     	if	0	;tblptru may be non-zero
  4273  0010B6                     	endif
  4274  0010B6                     	if	0	;tblptru may be non-zero
  4275  0010B6                     	endif
  4276  0010B6  0008               	tblrd		*
  4277  0010B8  CFF5 F092          	movff	tablat,sprintf@c
  4278  0010BC  0100               	movlb	0	; () banked
  4279  0010BE  5192               	movf	sprintf@c& (0+255),w,b
  4280  0010C0  A4D8               	btfss	status,2,c
  4281  0010C2  D414               	goto	l6184
  4282  0010C4                     l6384:
  4283                           
  4284                           ; BSR set to: 0
  4285                           ;doprnt.c: 1538: *sp = 0;
  4286  0010C4  C069  FFD9         	movff	sprintf@sp,fsr2l
  4287  0010C8  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4288  0010CC  0E00               	movlw	0
  4289  0010CE  6EDF               	movwf	indf2,c
  4290  0010D0  0012               	return	
  4291  0010D2                     __end_of_sprintf:
  4292                           	opt stack 0
  4293                           tblptru	equ	0xFF8
  4294                           tblptrh	equ	0xFF7
  4295                           tblptrl	equ	0xFF6
  4296                           tablat	equ	0xFF5
  4297                           prodh	equ	0xFF4
  4298                           prodl	equ	0xFF3
  4299                           intcon	equ	0xFF2
  4300                           intcon2	equ	0xFF1
  4301                           indf0	equ	0xFEF
  4302                           postinc0	equ	0xFEE
  4303                           fsr0h	equ	0xFEA
  4304                           fsr0l	equ	0xFE9
  4305                           wreg	equ	0xFE8
  4306                           indf1	equ	0xFE7
  4307                           fsr1h	equ	0xFE2
  4308                           fsr1l	equ	0xFE1
  4309                           indf2	equ	0xFDF
  4310                           postinc2	equ	0xFDE
  4311                           postdec2	equ	0xFDD
  4312                           fsr2h	equ	0xFDA
  4313                           fsr2l	equ	0xFD9
  4314                           status	equ	0xFD8
  4315                           
  4316 ;; *************** function _scale *****************
  4317 ;; Defined at:
  4318 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\doprnt.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;  scl             1    wreg     char 
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;  scl             1   56[COMRAM] char 
  4323 ;; Return value:  Size  Location     Type
  4324 ;;                  3   50[COMRAM] char 
  4325 ;; Registers used:
  4326 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4332 ;;      Params:         3       0       0       0       0       0       0       0       0
  4333 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4334 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4335 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4336 ;;Total ram usage:        7 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; Hardware stack levels required when called:    4
  4339 ;; This function calls:
  4340 ;;		___awdiv
  4341 ;;		___awmod
  4342 ;;		___ftmul
  4343 ;;		___wmul
  4344 ;; This function is called by:
  4345 ;;		_sprintf
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349                           	psect	text15
  4350  001B58                     __ptext15:
  4351                           	opt stack 0
  4352  001B58                     _scale:
  4353                           	opt stack 24
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;incstack = 0
  4357                           ;scale@scl stored from wreg
  4358  001B58  6E39               	movwf	scale@scl,c
  4359                           
  4360                           ;doprnt.c: 428: if(scl < 0) {
  4361  001B5A  AE39               	btfss	scale@scl,7,c
  4362  001B5C  D0FB               	goto	l5844
  4363                           
  4364                           ;doprnt.c: 429: scl = -scl;
  4365  001B5E  6C39               	negf	scale@scl,c
  4366                           
  4367                           ;doprnt.c: 430: if(scl>=110)
  4368  001B60  5039               	movf	scale@scl,w,c
  4369  001B62  0A80               	xorlw	128
  4370  001B64  0F12               	addlw	-238
  4371  001B66  A0D8               	btfss	status,0,c
  4372  001B68  D091               	goto	l5834
  4373                           
  4374                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4375  001B6A  0E00               	movlw	0
  4376  001B6C  6E21               	movwf	___wmul@multiplicand+1,c
  4377  001B6E  0E03               	movlw	3
  4378  001B70  6E20               	movwf	___wmul@multiplicand,c
  4379  001B72  0E00               	movlw	0
  4380  001B74  6E19               	movwf	___awdiv@divisor+1,c
  4381  001B76  0E0A               	movlw	10
  4382  001B78  6E18               	movwf	___awdiv@divisor,c
  4383  001B7A  0E00               	movlw	0
  4384  001B7C  6E13               	movwf	___awmod@divisor+1,c
  4385  001B7E  0E64               	movlw	100
  4386  001B80  6E12               	movwf	___awmod@divisor,c
  4387  001B82  5039               	movf	scale@scl,w,c
  4388  001B84  6E10               	movwf	___awmod@dividend,c
  4389  001B86  6A11               	clrf	___awmod@dividend+1,c
  4390  001B88  BE10               	btfsc	___awmod@dividend,7,c
  4391  001B8A  0611               	decf	___awmod@dividend+1,f,c
  4392  001B8C  EC16  F01E         	call	___awmod	;wreg free
  4393  001B90  C010  F016         	movff	?___awmod,___awdiv@dividend
  4394  001B94  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  4395  001B98  ECDC  F01C         	call	___awdiv	;wreg free
  4396  001B9C  0E09               	movlw	9
  4397  001B9E  2416               	addwf	?___awdiv,w,c
  4398  001BA0  6E1E               	movwf	___wmul@multiplier,c
  4399  001BA2  0E00               	movlw	0
  4400  001BA4  2017               	addwfc	?___awdiv+1,w,c
  4401  001BA6  6E1F               	movwf	___wmul@multiplier+1,c
  4402  001BA8  ECF9  F020         	call	___wmul	;wreg free
  4403  001BAC  0E29               	movlw	low __npowers_
  4404  001BAE  241E               	addwf	?___wmul,w,c
  4405  001BB0  6EF6               	movwf	tblptrl,c
  4406  001BB2  0E08               	movlw	high __npowers_
  4407  001BB4  201F               	addwfc	?___wmul+1,w,c
  4408  001BB6  6EF7               	movwf	tblptrh,c
  4409  001BB8                     	if	0	;There are less than 3 active tblptr bytes
  4410  001BB8                     	endif
  4411  001BB8  0009               	tblrd		*+
  4412  001BBA  CFF5 F027          	movff	tablat,___ftmul@f2
  4413  001BBE  0009               	tblrd		*+
  4414  001BC0  CFF5 F028          	movff	tablat,___ftmul@f2+1
  4415  001BC4  000A               	tblrd		*-
  4416  001BC6  CFF5 F029          	movff	tablat,___ftmul@f2+2
  4417  001BCA  0E00               	movlw	0
  4418  001BCC  6E19               	movwf	___awdiv@divisor+1,c
  4419  001BCE  0E64               	movlw	100
  4420  001BD0  6E18               	movwf	___awdiv@divisor,c
  4421  001BD2  5039               	movf	scale@scl,w,c
  4422  001BD4  6E16               	movwf	___awdiv@dividend,c
  4423  001BD6  6A17               	clrf	___awdiv@dividend+1,c
  4424  001BD8  BE16               	btfsc	___awdiv@dividend,7,c
  4425  001BDA  0617               	decf	___awdiv@dividend+1,f,c
  4426  001BDC  ECDC  F01C         	call	___awdiv	;wreg free
  4427  001BE0  0E12               	movlw	18
  4428  001BE2  2416               	addwf	?___awdiv,w,c
  4429  001BE4  6E1E               	movwf	___wmul@multiplier,c
  4430  001BE6  0E00               	movlw	0
  4431  001BE8  2017               	addwfc	?___awdiv+1,w,c
  4432  001BEA  6E1F               	movwf	___wmul@multiplier+1,c
  4433  001BEC  0E00               	movlw	0
  4434  001BEE  6E21               	movwf	___wmul@multiplicand+1,c
  4435  001BF0  0E03               	movlw	3
  4436  001BF2  6E20               	movwf	___wmul@multiplicand,c
  4437  001BF4  ECF9  F020         	call	___wmul	;wreg free
  4438  001BF8  0E29               	movlw	low __npowers_
  4439  001BFA  241E               	addwf	?___wmul,w,c
  4440  001BFC  6EF6               	movwf	tblptrl,c
  4441  001BFE  0E08               	movlw	high __npowers_
  4442  001C00  201F               	addwfc	?___wmul+1,w,c
  4443  001C02  6EF7               	movwf	tblptrh,c
  4444  001C04                     	if	0	;There are less than 3 active tblptr bytes
  4445  001C04                     	endif
  4446  001C04  0009               	tblrd		*+
  4447  001C06  CFF5 F024          	movff	tablat,___ftmul@f1
  4448  001C0A  0009               	tblrd		*+
  4449  001C0C  CFF5 F025          	movff	tablat,___ftmul@f1+1
  4450  001C10  000A               	tblrd		*-
  4451  001C12  CFF5 F026          	movff	tablat,___ftmul@f1+2
  4452  001C16  EC2D  F01A         	call	___ftmul	;wreg free
  4453  001C1A  C024  F036         	movff	?___ftmul,_scale$2118
  4454  001C1E  C025  F037         	movff	?___ftmul+1,_scale$2118+1
  4455  001C22  C026  F038         	movff	?___ftmul+2,_scale$2118+2
  4456                           
  4457                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4458  001C26  C036  F024         	movff	_scale$2118,___ftmul@f1
  4459  001C2A  C037  F025         	movff	_scale$2118+1,___ftmul@f1+1
  4460  001C2E  C038  F026         	movff	_scale$2118+2,___ftmul@f1+2
  4461  001C32  0E00               	movlw	0
  4462  001C34  6E21               	movwf	___wmul@multiplicand+1,c
  4463  001C36  0E03               	movlw	3
  4464  001C38  6E20               	movwf	___wmul@multiplicand,c
  4465  001C3A  0E00               	movlw	0
  4466  001C3C  6E13               	movwf	___awmod@divisor+1,c
  4467  001C3E  0E0A               	movlw	10
  4468  001C40  6E12               	movwf	___awmod@divisor,c
  4469  001C42  5039               	movf	scale@scl,w,c
  4470  001C44  6E10               	movwf	___awmod@dividend,c
  4471  001C46  6A11               	clrf	___awmod@dividend+1,c
  4472  001C48  BE10               	btfsc	___awmod@dividend,7,c
  4473  001C4A  0611               	decf	___awmod@dividend+1,f,c
  4474  001C4C  EC16  F01E         	call	___awmod	;wreg free
  4475  001C50  C010  F01E         	movff	?___awmod,___wmul@multiplier
  4476  001C54  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  4477  001C58  ECF9  F020         	call	___wmul	;wreg free
  4478  001C5C  0E29               	movlw	low __npowers_
  4479  001C5E  241E               	addwf	?___wmul,w,c
  4480  001C60  6EF6               	movwf	tblptrl,c
  4481  001C62  0E08               	movlw	high __npowers_
  4482  001C64  201F               	addwfc	?___wmul+1,w,c
  4483  001C66  6EF7               	movwf	tblptrh,c
  4484  001C68                     	if	0	;There are less than 3 active tblptr bytes
  4485  001C68                     	endif
  4486  001C68  0009               	tblrd		*+
  4487  001C6A  CFF5 F027          	movff	tablat,___ftmul@f2
  4488  001C6E  0009               	tblrd		*+
  4489  001C70  CFF5 F028          	movff	tablat,___ftmul@f2+1
  4490  001C74  000A               	tblrd		*-
  4491  001C76  CFF5 F029          	movff	tablat,___ftmul@f2+2
  4492  001C7A  EC2D  F01A         	call	___ftmul	;wreg free
  4493  001C7E  C024  F033         	movff	?___ftmul,?_scale
  4494  001C82  C025  F034         	movff	?___ftmul+1,?_scale+1
  4495  001C86  C026  F035         	movff	?___ftmul+2,?_scale+2
  4496  001C8A  0012               	return	
  4497  001C8C                     l5834:
  4498                           
  4499                           ;doprnt.c: 432: else if(scl > 10)
  4500  001C8C  5039               	movf	scale@scl,w,c
  4501  001C8E  0A80               	xorlw	128
  4502  001C90  0F75               	addlw	-139
  4503  001C92  A0D8               	btfss	status,0,c
  4504  001C94  D04D               	goto	l5840
  4505                           
  4506                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4507  001C96  0E00               	movlw	0
  4508  001C98  6E19               	movwf	___awdiv@divisor+1,c
  4509  001C9A  0E0A               	movlw	10
  4510  001C9C  6E18               	movwf	___awdiv@divisor,c
  4511  001C9E  5039               	movf	scale@scl,w,c
  4512  001CA0  6E16               	movwf	___awdiv@dividend,c
  4513  001CA2  6A17               	clrf	___awdiv@dividend+1,c
  4514  001CA4  BE16               	btfsc	___awdiv@dividend,7,c
  4515  001CA6  0617               	decf	___awdiv@dividend+1,f,c
  4516  001CA8  ECDC  F01C         	call	___awdiv	;wreg free
  4517  001CAC  0E09               	movlw	9
  4518  001CAE  2416               	addwf	?___awdiv,w,c
  4519  001CB0  6E1E               	movwf	___wmul@multiplier,c
  4520  001CB2  0E00               	movlw	0
  4521  001CB4  2017               	addwfc	?___awdiv+1,w,c
  4522  001CB6  6E1F               	movwf	___wmul@multiplier+1,c
  4523  001CB8  0E00               	movlw	0
  4524  001CBA  6E21               	movwf	___wmul@multiplicand+1,c
  4525  001CBC  0E03               	movlw	3
  4526  001CBE  6E20               	movwf	___wmul@multiplicand,c
  4527  001CC0  ECF9  F020         	call	___wmul	;wreg free
  4528  001CC4  0E29               	movlw	low __npowers_
  4529  001CC6  241E               	addwf	?___wmul,w,c
  4530  001CC8  6EF6               	movwf	tblptrl,c
  4531  001CCA  0E08               	movlw	high __npowers_
  4532  001CCC  201F               	addwfc	?___wmul+1,w,c
  4533  001CCE  6EF7               	movwf	tblptrh,c
  4534  001CD0                     	if	0	;There are less than 3 active tblptr bytes
  4535  001CD0                     	endif
  4536  001CD0  0009               	tblrd		*+
  4537  001CD2  CFF5 F024          	movff	tablat,___ftmul@f1
  4538  001CD6  0009               	tblrd		*+
  4539  001CD8  CFF5 F025          	movff	tablat,___ftmul@f1+1
  4540  001CDC  000A               	tblrd		*-
  4541  001CDE  CFF5 F026          	movff	tablat,___ftmul@f1+2
  4542  001CE2  0E00               	movlw	0
  4543  001CE4  6E21               	movwf	___wmul@multiplicand+1,c
  4544  001CE6  0E03               	movlw	3
  4545  001CE8  6E20               	movwf	___wmul@multiplicand,c
  4546  001CEA  0E00               	movlw	0
  4547  001CEC  6E13               	movwf	___awmod@divisor+1,c
  4548  001CEE  0E0A               	movlw	10
  4549  001CF0  6E12               	movwf	___awmod@divisor,c
  4550  001CF2  5039               	movf	scale@scl,w,c
  4551  001CF4  6E10               	movwf	___awmod@dividend,c
  4552  001CF6  6A11               	clrf	___awmod@dividend+1,c
  4553  001CF8  BE10               	btfsc	___awmod@dividend,7,c
  4554  001CFA  0611               	decf	___awmod@dividend+1,f,c
  4555  001CFC  EC16  F01E         	call	___awmod	;wreg free
  4556  001D00  C010  F01E         	movff	?___awmod,___wmul@multiplier
  4557  001D04  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  4558  001D08  ECF9  F020         	call	___wmul	;wreg free
  4559  001D0C  0E29               	movlw	low __npowers_
  4560  001D0E  241E               	addwf	?___wmul,w,c
  4561  001D10  6EF6               	movwf	tblptrl,c
  4562  001D12  0E08               	movlw	high __npowers_
  4563  001D14  201F               	addwfc	?___wmul+1,w,c
  4564  001D16  6EF7               	movwf	tblptrh,c
  4565  001D18                     	if	0	;There are less than 3 active tblptr bytes
  4566  001D18                     	endif
  4567  001D18  0009               	tblrd		*+
  4568  001D1A  CFF5 F027          	movff	tablat,___ftmul@f2
  4569  001D1E  0009               	tblrd		*+
  4570  001D20  CFF5 F028          	movff	tablat,___ftmul@f2+1
  4571  001D24  000A               	tblrd		*-
  4572  001D26  CFF5 F029          	movff	tablat,___ftmul@f2+2
  4573  001D2A  EC2D  F01A         	call	___ftmul	;wreg free
  4574  001D2E  D7A7               	goto	L3
  4575  001D30                     l5840:
  4576                           
  4577                           ;doprnt.c: 434: return _npowers_[scl];
  4578  001D30  5039               	movf	scale@scl,w,c
  4579  001D32  0D03               	mullw	3
  4580  001D34  0E29               	movlw	low __npowers_
  4581  001D36  24F3               	addwf	prodl,w,c
  4582  001D38  6EF6               	movwf	tblptrl,c
  4583  001D3A  0E08               	movlw	high __npowers_
  4584  001D3C  20F4               	addwfc	prodh,w,c
  4585  001D3E  6EF7               	movwf	tblptrh,c
  4586  001D40                     	if	0	;There are less than 3 active tblptr bytes
  4587  001D40                     	endif
  4588  001D40  0009               	tblrd		*+
  4589  001D42  CFF5 F033          	movff	tablat,?_scale
  4590  001D46  0009               	tblrd		*+
  4591  001D48  CFF5 F034          	movff	tablat,?_scale+1
  4592  001D4C  000A               	tblrd		*-
  4593  001D4E  CFF5 F035          	movff	tablat,?_scale+2
  4594  001D52  0012               	return	
  4595  001D54                     l5844:
  4596                           
  4597                           ;doprnt.c: 435: }
  4598                           ;doprnt.c: 436: if(scl>=110)
  4599  001D54  5039               	movf	scale@scl,w,c
  4600  001D56  0A80               	xorlw	128
  4601  001D58  0F12               	addlw	-238
  4602  001D5A  A0D8               	btfss	status,0,c
  4603  001D5C  D091               	goto	l5852
  4604                           
  4605                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4606  001D5E  0E00               	movlw	0
  4607  001D60  6E21               	movwf	___wmul@multiplicand+1,c
  4608  001D62  0E03               	movlw	3
  4609  001D64  6E20               	movwf	___wmul@multiplicand,c
  4610  001D66  0E00               	movlw	0
  4611  001D68  6E19               	movwf	___awdiv@divisor+1,c
  4612  001D6A  0E0A               	movlw	10
  4613  001D6C  6E18               	movwf	___awdiv@divisor,c
  4614  001D6E  0E00               	movlw	0
  4615  001D70  6E13               	movwf	___awmod@divisor+1,c
  4616  001D72  0E64               	movlw	100
  4617  001D74  6E12               	movwf	___awmod@divisor,c
  4618  001D76  5039               	movf	scale@scl,w,c
  4619  001D78  6E10               	movwf	___awmod@dividend,c
  4620  001D7A  6A11               	clrf	___awmod@dividend+1,c
  4621  001D7C  BE10               	btfsc	___awmod@dividend,7,c
  4622  001D7E  0611               	decf	___awmod@dividend+1,f,c
  4623  001D80  EC16  F01E         	call	___awmod	;wreg free
  4624  001D84  C010  F016         	movff	?___awmod,___awdiv@dividend
  4625  001D88  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  4626  001D8C  ECDC  F01C         	call	___awdiv	;wreg free
  4627  001D90  0E09               	movlw	9
  4628  001D92  2416               	addwf	?___awdiv,w,c
  4629  001D94  6E1E               	movwf	___wmul@multiplier,c
  4630  001D96  0E00               	movlw	0
  4631  001D98  2017               	addwfc	?___awdiv+1,w,c
  4632  001D9A  6E1F               	movwf	___wmul@multiplier+1,c
  4633  001D9C  ECF9  F020         	call	___wmul	;wreg free
  4634  001DA0  0E50               	movlw	low __powers_
  4635  001DA2  241E               	addwf	?___wmul,w,c
  4636  001DA4  6EF6               	movwf	tblptrl,c
  4637  001DA6  0E08               	movlw	high __powers_
  4638  001DA8  201F               	addwfc	?___wmul+1,w,c
  4639  001DAA  6EF7               	movwf	tblptrh,c
  4640  001DAC                     	if	0	;There are less than 3 active tblptr bytes
  4641  001DAC                     	endif
  4642  001DAC  0009               	tblrd		*+
  4643  001DAE  CFF5 F027          	movff	tablat,___ftmul@f2
  4644  001DB2  0009               	tblrd		*+
  4645  001DB4  CFF5 F028          	movff	tablat,___ftmul@f2+1
  4646  001DB8  000A               	tblrd		*-
  4647  001DBA  CFF5 F029          	movff	tablat,___ftmul@f2+2
  4648  001DBE  0E00               	movlw	0
  4649  001DC0  6E19               	movwf	___awdiv@divisor+1,c
  4650  001DC2  0E64               	movlw	100
  4651  001DC4  6E18               	movwf	___awdiv@divisor,c
  4652  001DC6  5039               	movf	scale@scl,w,c
  4653  001DC8  6E16               	movwf	___awdiv@dividend,c
  4654  001DCA  6A17               	clrf	___awdiv@dividend+1,c
  4655  001DCC  BE16               	btfsc	___awdiv@dividend,7,c
  4656  001DCE  0617               	decf	___awdiv@dividend+1,f,c
  4657  001DD0  ECDC  F01C         	call	___awdiv	;wreg free
  4658  001DD4  0E12               	movlw	18
  4659  001DD6  2416               	addwf	?___awdiv,w,c
  4660  001DD8  6E1E               	movwf	___wmul@multiplier,c
  4661  001DDA  0E00               	movlw	0
  4662  001DDC  2017               	addwfc	?___awdiv+1,w,c
  4663  001DDE  6E1F               	movwf	___wmul@multiplier+1,c
  4664  001DE0  0E00               	movlw	0
  4665  001DE2  6E21               	movwf	___wmul@multiplicand+1,c
  4666  001DE4  0E03               	movlw	3
  4667  001DE6  6E20               	movwf	___wmul@multiplicand,c
  4668  001DE8  ECF9  F020         	call	___wmul	;wreg free
  4669  001DEC  0E50               	movlw	low __powers_
  4670  001DEE  241E               	addwf	?___wmul,w,c
  4671  001DF0  6EF6               	movwf	tblptrl,c
  4672  001DF2  0E08               	movlw	high __powers_
  4673  001DF4  201F               	addwfc	?___wmul+1,w,c
  4674  001DF6  6EF7               	movwf	tblptrh,c
  4675  001DF8                     	if	0	;There are less than 3 active tblptr bytes
  4676  001DF8                     	endif
  4677  001DF8  0009               	tblrd		*+
  4678  001DFA  CFF5 F024          	movff	tablat,___ftmul@f1
  4679  001DFE  0009               	tblrd		*+
  4680  001E00  CFF5 F025          	movff	tablat,___ftmul@f1+1
  4681  001E04  000A               	tblrd		*-
  4682  001E06  CFF5 F026          	movff	tablat,___ftmul@f1+2
  4683  001E0A  EC2D  F01A         	call	___ftmul	;wreg free
  4684  001E0E  C024  F036         	movff	?___ftmul,_scale$2118
  4685  001E12  C025  F037         	movff	?___ftmul+1,_scale$2118+1
  4686  001E16  C026  F038         	movff	?___ftmul+2,_scale$2118+2
  4687                           
  4688                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4689  001E1A  C036  F024         	movff	_scale$2118,___ftmul@f1
  4690  001E1E  C037  F025         	movff	_scale$2118+1,___ftmul@f1+1
  4691  001E22  C038  F026         	movff	_scale$2118+2,___ftmul@f1+2
  4692  001E26  0E00               	movlw	0
  4693  001E28  6E21               	movwf	___wmul@multiplicand+1,c
  4694  001E2A  0E03               	movlw	3
  4695  001E2C  6E20               	movwf	___wmul@multiplicand,c
  4696  001E2E  0E00               	movlw	0
  4697  001E30  6E13               	movwf	___awmod@divisor+1,c
  4698  001E32  0E0A               	movlw	10
  4699  001E34  6E12               	movwf	___awmod@divisor,c
  4700  001E36  5039               	movf	scale@scl,w,c
  4701  001E38  6E10               	movwf	___awmod@dividend,c
  4702  001E3A  6A11               	clrf	___awmod@dividend+1,c
  4703  001E3C  BE10               	btfsc	___awmod@dividend,7,c
  4704  001E3E  0611               	decf	___awmod@dividend+1,f,c
  4705  001E40  EC16  F01E         	call	___awmod	;wreg free
  4706  001E44  C010  F01E         	movff	?___awmod,___wmul@multiplier
  4707  001E48  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  4708  001E4C  ECF9  F020         	call	___wmul	;wreg free
  4709  001E50  0E50               	movlw	low __powers_
  4710  001E52  241E               	addwf	?___wmul,w,c
  4711  001E54  6EF6               	movwf	tblptrl,c
  4712  001E56  0E08               	movlw	high __powers_
  4713  001E58  201F               	addwfc	?___wmul+1,w,c
  4714  001E5A  6EF7               	movwf	tblptrh,c
  4715  001E5C                     	if	0	;There are less than 3 active tblptr bytes
  4716  001E5C                     	endif
  4717  001E5C  0009               	tblrd		*+
  4718  001E5E  CFF5 F027          	movff	tablat,___ftmul@f2
  4719  001E62  0009               	tblrd		*+
  4720  001E64  CFF5 F028          	movff	tablat,___ftmul@f2+1
  4721  001E68  000A               	tblrd		*-
  4722  001E6A  CFF5 F029          	movff	tablat,___ftmul@f2+2
  4723  001E6E  EC2D  F01A         	call	___ftmul	;wreg free
  4724  001E72  C024  F033         	movff	?___ftmul,?_scale
  4725  001E76  C025  F034         	movff	?___ftmul+1,?_scale+1
  4726  001E7A  C026  F035         	movff	?___ftmul+2,?_scale+2
  4727  001E7E  0012               	return	
  4728  001E80                     l5852:
  4729                           
  4730                           ;doprnt.c: 438: else if(scl > 10)
  4731  001E80  5039               	movf	scale@scl,w,c
  4732  001E82  0A80               	xorlw	128
  4733  001E84  0F75               	addlw	-139
  4734  001E86  A0D8               	btfss	status,0,c
  4735  001E88  D04D               	goto	l5858
  4736                           
  4737                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4738  001E8A  0E00               	movlw	0
  4739  001E8C  6E19               	movwf	___awdiv@divisor+1,c
  4740  001E8E  0E0A               	movlw	10
  4741  001E90  6E18               	movwf	___awdiv@divisor,c
  4742  001E92  5039               	movf	scale@scl,w,c
  4743  001E94  6E16               	movwf	___awdiv@dividend,c
  4744  001E96  6A17               	clrf	___awdiv@dividend+1,c
  4745  001E98  BE16               	btfsc	___awdiv@dividend,7,c
  4746  001E9A  0617               	decf	___awdiv@dividend+1,f,c
  4747  001E9C  ECDC  F01C         	call	___awdiv	;wreg free
  4748  001EA0  0E09               	movlw	9
  4749  001EA2  2416               	addwf	?___awdiv,w,c
  4750  001EA4  6E1E               	movwf	___wmul@multiplier,c
  4751  001EA6  0E00               	movlw	0
  4752  001EA8  2017               	addwfc	?___awdiv+1,w,c
  4753  001EAA  6E1F               	movwf	___wmul@multiplier+1,c
  4754  001EAC  0E00               	movlw	0
  4755  001EAE  6E21               	movwf	___wmul@multiplicand+1,c
  4756  001EB0  0E03               	movlw	3
  4757  001EB2  6E20               	movwf	___wmul@multiplicand,c
  4758  001EB4  ECF9  F020         	call	___wmul	;wreg free
  4759  001EB8  0E50               	movlw	low __powers_
  4760  001EBA  241E               	addwf	?___wmul,w,c
  4761  001EBC  6EF6               	movwf	tblptrl,c
  4762  001EBE  0E08               	movlw	high __powers_
  4763  001EC0  201F               	addwfc	?___wmul+1,w,c
  4764  001EC2  6EF7               	movwf	tblptrh,c
  4765  001EC4                     	if	0	;There are less than 3 active tblptr bytes
  4766  001EC4                     	endif
  4767  001EC4  0009               	tblrd		*+
  4768  001EC6  CFF5 F024          	movff	tablat,___ftmul@f1
  4769  001ECA  0009               	tblrd		*+
  4770  001ECC  CFF5 F025          	movff	tablat,___ftmul@f1+1
  4771  001ED0  000A               	tblrd		*-
  4772  001ED2  CFF5 F026          	movff	tablat,___ftmul@f1+2
  4773  001ED6  0E00               	movlw	0
  4774  001ED8  6E21               	movwf	___wmul@multiplicand+1,c
  4775  001EDA  0E03               	movlw	3
  4776  001EDC  6E20               	movwf	___wmul@multiplicand,c
  4777  001EDE  0E00               	movlw	0
  4778  001EE0  6E13               	movwf	___awmod@divisor+1,c
  4779  001EE2  0E0A               	movlw	10
  4780  001EE4  6E12               	movwf	___awmod@divisor,c
  4781  001EE6  5039               	movf	scale@scl,w,c
  4782  001EE8  6E10               	movwf	___awmod@dividend,c
  4783  001EEA  6A11               	clrf	___awmod@dividend+1,c
  4784  001EEC  BE10               	btfsc	___awmod@dividend,7,c
  4785  001EEE  0611               	decf	___awmod@dividend+1,f,c
  4786  001EF0  EC16  F01E         	call	___awmod	;wreg free
  4787  001EF4  C010  F01E         	movff	?___awmod,___wmul@multiplier
  4788  001EF8  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  4789  001EFC  ECF9  F020         	call	___wmul	;wreg free
  4790  001F00  0E50               	movlw	low __powers_
  4791  001F02  241E               	addwf	?___wmul,w,c
  4792  001F04  6EF6               	movwf	tblptrl,c
  4793  001F06  0E08               	movlw	high __powers_
  4794  001F08  201F               	addwfc	?___wmul+1,w,c
  4795  001F0A  6EF7               	movwf	tblptrh,c
  4796  001F0C                     	if	0	;There are less than 3 active tblptr bytes
  4797  001F0C                     	endif
  4798  001F0C  0009               	tblrd		*+
  4799  001F0E  CFF5 F027          	movff	tablat,___ftmul@f2
  4800  001F12  0009               	tblrd		*+
  4801  001F14  CFF5 F028          	movff	tablat,___ftmul@f2+1
  4802  001F18  000A               	tblrd		*-
  4803  001F1A  CFF5 F029          	movff	tablat,___ftmul@f2+2
  4804  001F1E  EC2D  F01A         	call	___ftmul	;wreg free
  4805  001F22  D7A7               	goto	L4
  4806  001F24                     l5858:
  4807                           
  4808                           ;doprnt.c: 440: return _powers_[scl];
  4809  001F24  5039               	movf	scale@scl,w,c
  4810  001F26  0D03               	mullw	3
  4811  001F28  0E50               	movlw	low __powers_
  4812  001F2A  24F3               	addwf	prodl,w,c
  4813  001F2C  6EF6               	movwf	tblptrl,c
  4814  001F2E  0E08               	movlw	high __powers_
  4815  001F30  20F4               	addwfc	prodh,w,c
  4816  001F32  6EF7               	movwf	tblptrh,c
  4817  001F34                     	if	0	;There are less than 3 active tblptr bytes
  4818  001F34                     	endif
  4819  001F34  0009               	tblrd		*+
  4820  001F36  CFF5 F033          	movff	tablat,?_scale
  4821  001F3A  0009               	tblrd		*+
  4822  001F3C  CFF5 F034          	movff	tablat,?_scale+1
  4823  001F40  000A               	tblrd		*-
  4824  001F42  CFF5 F035          	movff	tablat,?_scale+2
  4825  001F46  0012               	return	
  4826  001F48                     __end_of_scale:
  4827                           	opt stack 0
  4828                           tblptru	equ	0xFF8
  4829                           tblptrh	equ	0xFF7
  4830                           tblptrl	equ	0xFF6
  4831                           tablat	equ	0xFF5
  4832                           prodh	equ	0xFF4
  4833                           prodl	equ	0xFF3
  4834                           intcon	equ	0xFF2
  4835                           intcon2	equ	0xFF1
  4836                           indf0	equ	0xFEF
  4837                           postinc0	equ	0xFEE
  4838                           fsr0h	equ	0xFEA
  4839                           fsr0l	equ	0xFE9
  4840                           wreg	equ	0xFE8
  4841                           indf1	equ	0xFE7
  4842                           fsr1h	equ	0xFE2
  4843                           fsr1l	equ	0xFE1
  4844                           indf2	equ	0xFDF
  4845                           postinc2	equ	0xFDE
  4846                           postdec2	equ	0xFDD
  4847                           fsr2h	equ	0xFDA
  4848                           fsr2l	equ	0xFD9
  4849                           status	equ	0xFD8
  4850                           
  4851 ;; *************** function _fround *****************
  4852 ;; Defined at:
  4853 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\doprnt.c"
  4854 ;; Parameters:    Size  Location     Type
  4855 ;;  prec            1    wreg     unsigned char 
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;  prec            1   59[COMRAM] unsigned char 
  4858 ;; Return value:  Size  Location     Type
  4859 ;;                  3   50[COMRAM] unsigned char 
  4860 ;; Registers used:
  4861 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4862 ;; Tracked objects:
  4863 ;;		On entry : 0/0
  4864 ;;		On exit  : 0/0
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4867 ;;      Params:         3       0       0       0       0       0       0       0       0
  4868 ;;      Locals:         7       0       0       0       0       0       0       0       0
  4869 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4870 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4871 ;;Total ram usage:       10 bytes
  4872 ;; Hardware stack levels used:    1
  4873 ;; Hardware stack levels required when called:    4
  4874 ;; This function calls:
  4875 ;;		___awdiv
  4876 ;;		___awmod
  4877 ;;		___ftmul
  4878 ;;		___wmul
  4879 ;; This function is called by:
  4880 ;;		_sprintf
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           	psect	text16
  4885  002996                     __ptext16:
  4886                           	opt stack 0
  4887  002996                     _fround:
  4888                           	opt stack 24
  4889                           
  4890                           ;incstack = 0
  4891                           ;fround@prec stored from wreg
  4892  002996  6E3C               	movwf	fround@prec,c
  4893                           
  4894                           ;doprnt.c: 413: if(prec>=110)
  4895  002998  0E6D               	movlw	109
  4896  00299A  643C               	cpfsgt	fround@prec,c
  4897  00299C  D09F               	goto	l5812
  4898                           
  4899                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4900  00299E  0E00               	movlw	0
  4901  0029A0  6E21               	movwf	___wmul@multiplicand+1,c
  4902  0029A2  0E03               	movlw	3
  4903  0029A4  6E20               	movwf	___wmul@multiplicand,c
  4904  0029A6  0E00               	movlw	0
  4905  0029A8  6E19               	movwf	___awdiv@divisor+1,c
  4906  0029AA  0E0A               	movlw	10
  4907  0029AC  6E18               	movwf	___awdiv@divisor,c
  4908  0029AE  0E00               	movlw	0
  4909  0029B0  6E13               	movwf	___awmod@divisor+1,c
  4910  0029B2  0E64               	movlw	100
  4911  0029B4  6E12               	movwf	___awmod@divisor,c
  4912  0029B6  C03C  F010         	movff	fround@prec,___awmod@dividend
  4913  0029BA  6A11               	clrf	___awmod@dividend+1,c
  4914  0029BC  EC16  F01E         	call	___awmod	;wreg free
  4915  0029C0  C010  F016         	movff	?___awmod,___awdiv@dividend
  4916  0029C4  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  4917  0029C8  ECDC  F01C         	call	___awdiv	;wreg free
  4918  0029CC  0E09               	movlw	9
  4919  0029CE  2416               	addwf	?___awdiv,w,c
  4920  0029D0  6E1E               	movwf	___wmul@multiplier,c
  4921  0029D2  0E00               	movlw	0
  4922  0029D4  2017               	addwfc	?___awdiv+1,w,c
  4923  0029D6  6E1F               	movwf	___wmul@multiplier+1,c
  4924  0029D8  ECF9  F020         	call	___wmul	;wreg free
  4925  0029DC  0E29               	movlw	low __npowers_
  4926  0029DE  241E               	addwf	?___wmul,w,c
  4927  0029E0  6EF6               	movwf	tblptrl,c
  4928  0029E2  0E08               	movlw	high __npowers_
  4929  0029E4  201F               	addwfc	?___wmul+1,w,c
  4930  0029E6  6EF7               	movwf	tblptrh,c
  4931  0029E8                     	if	0	;There are less than 3 active tblptr bytes
  4932  0029E8                     	endif
  4933  0029E8  0009               	tblrd		*+
  4934  0029EA  CFF5 F027          	movff	tablat,___ftmul@f2
  4935  0029EE  0009               	tblrd		*+
  4936  0029F0  CFF5 F028          	movff	tablat,___ftmul@f2+1
  4937  0029F4  000A               	tblrd		*-
  4938  0029F6  CFF5 F029          	movff	tablat,___ftmul@f2+2
  4939  0029FA  0E00               	movlw	0
  4940  0029FC  6E19               	movwf	___awdiv@divisor+1,c
  4941  0029FE  0E64               	movlw	100
  4942  002A00  6E18               	movwf	___awdiv@divisor,c
  4943  002A02  C03C  F016         	movff	fround@prec,___awdiv@dividend
  4944  002A06  6A17               	clrf	___awdiv@dividend+1,c
  4945  002A08  ECDC  F01C         	call	___awdiv	;wreg free
  4946  002A0C  0E12               	movlw	18
  4947  002A0E  2416               	addwf	?___awdiv,w,c
  4948  002A10  6E1E               	movwf	___wmul@multiplier,c
  4949  002A12  0E00               	movlw	0
  4950  002A14  2017               	addwfc	?___awdiv+1,w,c
  4951  002A16  6E1F               	movwf	___wmul@multiplier+1,c
  4952  002A18  0E00               	movlw	0
  4953  002A1A  6E21               	movwf	___wmul@multiplicand+1,c
  4954  002A1C  0E03               	movlw	3
  4955  002A1E  6E20               	movwf	___wmul@multiplicand,c
  4956  002A20  ECF9  F020         	call	___wmul	;wreg free
  4957  002A24  0E29               	movlw	low __npowers_
  4958  002A26  241E               	addwf	?___wmul,w,c
  4959  002A28  6EF6               	movwf	tblptrl,c
  4960  002A2A  0E08               	movlw	high __npowers_
  4961  002A2C  201F               	addwfc	?___wmul+1,w,c
  4962  002A2E  6EF7               	movwf	tblptrh,c
  4963  002A30                     	if	0	;There are less than 3 active tblptr bytes
  4964  002A30                     	endif
  4965  002A30  0009               	tblrd		*+
  4966  002A32  CFF5 F024          	movff	tablat,___ftmul@f1
  4967  002A36  0009               	tblrd		*+
  4968  002A38  CFF5 F025          	movff	tablat,___ftmul@f1+1
  4969  002A3C  000A               	tblrd		*-
  4970  002A3E  CFF5 F026          	movff	tablat,___ftmul@f1+2
  4971  002A42  EC2D  F01A         	call	___ftmul	;wreg free
  4972  002A46  C024  F039         	movff	?___ftmul,_fround$2116
  4973  002A4A  C025  F03A         	movff	?___ftmul+1,_fround$2116+1
  4974  002A4E  C026  F03B         	movff	?___ftmul+2,_fround$2116+2
  4975                           
  4976                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4977  002A52  0E00               	movlw	0
  4978  002A54  6E21               	movwf	___wmul@multiplicand+1,c
  4979  002A56  0E03               	movlw	3
  4980  002A58  6E20               	movwf	___wmul@multiplicand,c
  4981  002A5A  0E00               	movlw	0
  4982  002A5C  6E13               	movwf	___awmod@divisor+1,c
  4983  002A5E  0E0A               	movlw	10
  4984  002A60  6E12               	movwf	___awmod@divisor,c
  4985  002A62  C03C  F010         	movff	fround@prec,___awmod@dividend
  4986  002A66  6A11               	clrf	___awmod@dividend+1,c
  4987  002A68  EC16  F01E         	call	___awmod	;wreg free
  4988  002A6C  C010  F01E         	movff	?___awmod,___wmul@multiplier
  4989  002A70  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  4990  002A74  ECF9  F020         	call	___wmul	;wreg free
  4991  002A78  0E29               	movlw	low __npowers_
  4992  002A7A  241E               	addwf	?___wmul,w,c
  4993  002A7C  6EF6               	movwf	tblptrl,c
  4994  002A7E  0E08               	movlw	high __npowers_
  4995  002A80  201F               	addwfc	?___wmul+1,w,c
  4996  002A82  6EF7               	movwf	tblptrh,c
  4997  002A84                     	if	0	;There are less than 3 active tblptr bytes
  4998  002A84                     	endif
  4999  002A84  0009               	tblrd		*+
  5000  002A86  CFF5 F027          	movff	tablat,___ftmul@f2
  5001  002A8A  0009               	tblrd		*+
  5002  002A8C  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5003  002A90  000A               	tblrd		*-
  5004  002A92  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5005  002A96  C039  F024         	movff	_fround$2116,___ftmul@f1
  5006  002A9A  C03A  F025         	movff	_fround$2116+1,___ftmul@f1+1
  5007  002A9E  C03B  F026         	movff	_fround$2116+2,___ftmul@f1+2
  5008  002AA2  EC2D  F01A         	call	___ftmul	;wreg free
  5009  002AA6  C024  F036         	movff	?___ftmul,_fround$2117
  5010  002AAA  C025  F037         	movff	?___ftmul+1,_fround$2117+1
  5011  002AAE  C026  F038         	movff	?___ftmul+2,_fround$2117+2
  5012                           
  5013                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5014  002AB2  C036  F024         	movff	_fround$2117,___ftmul@f1
  5015  002AB6  C037  F025         	movff	_fround$2117+1,___ftmul@f1+1
  5016  002ABA  C038  F026         	movff	_fround$2117+2,___ftmul@f1+2
  5017  002ABE  0E00               	movlw	0
  5018  002AC0  6E27               	movwf	___ftmul@f2,c
  5019  002AC2  0E00               	movlw	0
  5020  002AC4  6E28               	movwf	___ftmul@f2+1,c
  5021  002AC6  0E3F               	movlw	63
  5022  002AC8  6E29               	movwf	___ftmul@f2+2,c
  5023  002ACA  EC2D  F01A         	call	___ftmul	;wreg free
  5024  002ACE  C024  F033         	movff	?___ftmul,?_fround
  5025  002AD2  C025  F034         	movff	?___ftmul+1,?_fround+1
  5026  002AD6  C026  F035         	movff	?___ftmul+2,?_fround+2
  5027  002ADA  0012               	return	
  5028  002ADC                     l5812:
  5029                           
  5030                           ;doprnt.c: 415: else if(prec > 10)
  5031  002ADC  0E0A               	movlw	10
  5032  002ADE  643C               	cpfsgt	fround@prec,c
  5033  002AE0  D05D               	goto	l5820
  5034                           
  5035                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5036  002AE2  0E00               	movlw	0
  5037  002AE4  6E21               	movwf	___wmul@multiplicand+1,c
  5038  002AE6  0E03               	movlw	3
  5039  002AE8  6E20               	movwf	___wmul@multiplicand,c
  5040  002AEA  0E00               	movlw	0
  5041  002AEC  6E13               	movwf	___awmod@divisor+1,c
  5042  002AEE  0E0A               	movlw	10
  5043  002AF0  6E12               	movwf	___awmod@divisor,c
  5044  002AF2  C03C  F010         	movff	fround@prec,___awmod@dividend
  5045  002AF6  6A11               	clrf	___awmod@dividend+1,c
  5046  002AF8  EC16  F01E         	call	___awmod	;wreg free
  5047  002AFC  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5048  002B00  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5049  002B04  ECF9  F020         	call	___wmul	;wreg free
  5050  002B08  0E29               	movlw	low __npowers_
  5051  002B0A  241E               	addwf	?___wmul,w,c
  5052  002B0C  6EF6               	movwf	tblptrl,c
  5053  002B0E  0E08               	movlw	high __npowers_
  5054  002B10  201F               	addwfc	?___wmul+1,w,c
  5055  002B12  6EF7               	movwf	tblptrh,c
  5056  002B14                     	if	0	;There are less than 3 active tblptr bytes
  5057  002B14                     	endif
  5058  002B14  0009               	tblrd		*+
  5059  002B16  CFF5 F027          	movff	tablat,___ftmul@f2
  5060  002B1A  0009               	tblrd		*+
  5061  002B1C  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5062  002B20  000A               	tblrd		*-
  5063  002B22  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5064  002B26  0E00               	movlw	0
  5065  002B28  6E19               	movwf	___awdiv@divisor+1,c
  5066  002B2A  0E0A               	movlw	10
  5067  002B2C  6E18               	movwf	___awdiv@divisor,c
  5068  002B2E  C03C  F016         	movff	fround@prec,___awdiv@dividend
  5069  002B32  6A17               	clrf	___awdiv@dividend+1,c
  5070  002B34  ECDC  F01C         	call	___awdiv	;wreg free
  5071  002B38  0E09               	movlw	9
  5072  002B3A  2416               	addwf	?___awdiv,w,c
  5073  002B3C  6E1E               	movwf	___wmul@multiplier,c
  5074  002B3E  0E00               	movlw	0
  5075  002B40  2017               	addwfc	?___awdiv+1,w,c
  5076  002B42  6E1F               	movwf	___wmul@multiplier+1,c
  5077  002B44  0E00               	movlw	0
  5078  002B46  6E21               	movwf	___wmul@multiplicand+1,c
  5079  002B48  0E03               	movlw	3
  5080  002B4A  6E20               	movwf	___wmul@multiplicand,c
  5081  002B4C  ECF9  F020         	call	___wmul	;wreg free
  5082  002B50  0E29               	movlw	low __npowers_
  5083  002B52  241E               	addwf	?___wmul,w,c
  5084  002B54  6EF6               	movwf	tblptrl,c
  5085  002B56  0E08               	movlw	high __npowers_
  5086  002B58  201F               	addwfc	?___wmul+1,w,c
  5087  002B5A  6EF7               	movwf	tblptrh,c
  5088  002B5C                     	if	0	;There are less than 3 active tblptr bytes
  5089  002B5C                     	endif
  5090  002B5C  0009               	tblrd		*+
  5091  002B5E  CFF5 F024          	movff	tablat,___ftmul@f1
  5092  002B62  0009               	tblrd		*+
  5093  002B64  CFF5 F025          	movff	tablat,___ftmul@f1+1
  5094  002B68  000A               	tblrd		*-
  5095  002B6A  CFF5 F026          	movff	tablat,___ftmul@f1+2
  5096  002B6E  EC2D  F01A         	call	___ftmul	;wreg free
  5097  002B72  C024  F039         	movff	?___ftmul,_fround$2116
  5098  002B76  C025  F03A         	movff	?___ftmul+1,_fround$2116+1
  5099  002B7A  C026  F03B         	movff	?___ftmul+2,_fround$2116+2
  5100                           
  5101                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5102  002B7E  C039  F024         	movff	_fround$2116,___ftmul@f1
  5103  002B82  C03A  F025         	movff	_fround$2116+1,___ftmul@f1+1
  5104  002B86  C03B  F026         	movff	_fround$2116+2,___ftmul@f1+2
  5105  002B8A  0E00               	movlw	0
  5106  002B8C  6E27               	movwf	___ftmul@f2,c
  5107  002B8E  0E00               	movlw	0
  5108  002B90  6E28               	movwf	___ftmul@f2+1,c
  5109  002B92  0E3F               	movlw	63
  5110  002B94  6E29               	movwf	___ftmul@f2+2,c
  5111  002B96  EC2D  F01A         	call	___ftmul	;wreg free
  5112  002B9A  D799               	goto	L5
  5113  002B9C                     l5820:
  5114                           
  5115                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5116  002B9C  503C               	movf	fround@prec,w,c
  5117  002B9E  0D03               	mullw	3
  5118  002BA0  0E29               	movlw	low __npowers_
  5119  002BA2  24F3               	addwf	prodl,w,c
  5120  002BA4  6EF6               	movwf	tblptrl,c
  5121  002BA6  0E08               	movlw	high __npowers_
  5122  002BA8  20F4               	addwfc	prodh,w,c
  5123  002BAA  6EF7               	movwf	tblptrh,c
  5124  002BAC                     	if	0	;There are less than 3 active tblptr bytes
  5125  002BAC                     	endif
  5126  002BAC  0009               	tblrd		*+
  5127  002BAE  CFF5 F024          	movff	tablat,___ftmul@f1
  5128  002BB2  0009               	tblrd		*+
  5129  002BB4  CFF5 F025          	movff	tablat,___ftmul@f1+1
  5130  002BB8  000A               	tblrd		*-
  5131  002BBA  CFF5 F026          	movff	tablat,___ftmul@f1+2
  5132  002BBE  0E00               	movlw	0
  5133  002BC0  6E27               	movwf	___ftmul@f2,c
  5134  002BC2  0E00               	movlw	0
  5135  002BC4  6E28               	movwf	___ftmul@f2+1,c
  5136  002BC6  0E3F               	movlw	63
  5137  002BC8  6E29               	movwf	___ftmul@f2+2,c
  5138  002BCA  EC2D  F01A         	call	___ftmul	;wreg free
  5139  002BCE  C024  F033         	movff	?___ftmul,?_fround
  5140  002BD2  C025  F034         	movff	?___ftmul+1,?_fround+1
  5141  002BD6  C026  F035         	movff	?___ftmul+2,?_fround+2
  5142  002BDA  0012               	return	
  5143  002BDC                     __end_of_fround:
  5144                           	opt stack 0
  5145                           tblptru	equ	0xFF8
  5146                           tblptrh	equ	0xFF7
  5147                           tblptrl	equ	0xFF6
  5148                           tablat	equ	0xFF5
  5149                           prodh	equ	0xFF4
  5150                           prodl	equ	0xFF3
  5151                           intcon	equ	0xFF2
  5152                           intcon2	equ	0xFF1
  5153                           indf0	equ	0xFEF
  5154                           postinc0	equ	0xFEE
  5155                           fsr0h	equ	0xFEA
  5156                           fsr0l	equ	0xFE9
  5157                           wreg	equ	0xFE8
  5158                           indf1	equ	0xFE7
  5159                           fsr1h	equ	0xFE2
  5160                           fsr1l	equ	0xFE1
  5161                           indf2	equ	0xFDF
  5162                           postinc2	equ	0xFDE
  5163                           postdec2	equ	0xFDD
  5164                           fsr2h	equ	0xFDA
  5165                           fsr2l	equ	0xFD9
  5166                           status	equ	0xFD8
  5167                           
  5168 ;; *************** function ___awmod *****************
  5169 ;; Defined at:
  5170 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awmod.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;  dividend        2   15[COMRAM] int 
  5173 ;;  divisor         2   17[COMRAM] int 
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;  sign            1   20[COMRAM] unsigned char 
  5176 ;;  counter         1   19[COMRAM] unsigned char 
  5177 ;; Return value:  Size  Location     Type
  5178 ;;                  2   15[COMRAM] int 
  5179 ;; Registers used:
  5180 ;;		wreg, status,2, status,0
  5181 ;; Tracked objects:
  5182 ;;		On entry : 0/0
  5183 ;;		On exit  : 0/0
  5184 ;;		Unchanged: 0/0
  5185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5186 ;;      Params:         4       0       0       0       0       0       0       0       0
  5187 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5188 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5189 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5190 ;;Total ram usage:        6 bytes
  5191 ;; Hardware stack levels used:    1
  5192 ;; Hardware stack levels required when called:    2
  5193 ;; This function calls:
  5194 ;;		Nothing
  5195 ;; This function is called by:
  5196 ;;		_fround
  5197 ;;		_scale
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           	psect	text17
  5202  003C2C                     __ptext17:
  5203                           	opt stack 0
  5204  003C2C                     ___awmod:
  5205                           	opt stack 25
  5206                           
  5207                           ;incstack = 0
  5208  003C2C  0E00               	movlw	0
  5209  003C2E  6E15               	movwf	___awmod@sign,c
  5210  003C30  AE11               	btfss	___awmod@dividend+1,7,c
  5211  003C32  D006               	goto	l3894
  5212  003C34  6C10               	negf	___awmod@dividend,c
  5213  003C36  1E11               	comf	___awmod@dividend+1,f,c
  5214  003C38  B0D8               	btfsc	status,0,c
  5215  003C3A  2A11               	incf	___awmod@dividend+1,f,c
  5216  003C3C  0E01               	movlw	1
  5217  003C3E  6E15               	movwf	___awmod@sign,c
  5218  003C40                     l3894:
  5219  003C40  AE13               	btfss	___awmod@divisor+1,7,c
  5220  003C42  D004               	goto	l3898
  5221  003C44  6C12               	negf	___awmod@divisor,c
  5222  003C46  1E13               	comf	___awmod@divisor+1,f,c
  5223  003C48  B0D8               	btfsc	status,0,c
  5224  003C4A  2A13               	incf	___awmod@divisor+1,f,c
  5225  003C4C                     l3898:
  5226  003C4C  5012               	movf	___awmod@divisor,w,c
  5227  003C4E  1013               	iorwf	___awmod@divisor+1,w,c
  5228  003C50  B4D8               	btfsc	status,2,c
  5229  003C52  D018               	goto	l3914
  5230  003C54  0E01               	movlw	1
  5231  003C56  6E14               	movwf	___awmod@counter,c
  5232  003C58  D004               	goto	l3904
  5233  003C5A                     l3902:
  5234  003C5A  90D8               	bcf	status,0,c
  5235  003C5C  3612               	rlcf	___awmod@divisor,f,c
  5236  003C5E  3613               	rlcf	___awmod@divisor+1,f,c
  5237  003C60  2A14               	incf	___awmod@counter,f,c
  5238  003C62                     l3904:
  5239  003C62  AE13               	btfss	___awmod@divisor+1,7,c
  5240  003C64  D7FA               	goto	l3902
  5241  003C66                     l3906:
  5242  003C66  5012               	movf	___awmod@divisor,w,c
  5243  003C68  5C10               	subwf	___awmod@dividend,w,c
  5244  003C6A  5013               	movf	___awmod@divisor+1,w,c
  5245  003C6C  5811               	subwfb	___awmod@dividend+1,w,c
  5246  003C6E  A0D8               	btfss	status,0,c
  5247  003C70  D004               	goto	l3910
  5248  003C72  5012               	movf	___awmod@divisor,w,c
  5249  003C74  5E10               	subwf	___awmod@dividend,f,c
  5250  003C76  5013               	movf	___awmod@divisor+1,w,c
  5251  003C78  5A11               	subwfb	___awmod@dividend+1,f,c
  5252  003C7A                     l3910:
  5253  003C7A  90D8               	bcf	status,0,c
  5254  003C7C  3213               	rrcf	___awmod@divisor+1,f,c
  5255  003C7E  3212               	rrcf	___awmod@divisor,f,c
  5256  003C80  2E14               	decfsz	___awmod@counter,f,c
  5257  003C82  D7F1               	goto	l3906
  5258  003C84                     l3914:
  5259  003C84  5015               	movf	___awmod@sign,w,c
  5260  003C86  B4D8               	btfsc	status,2,c
  5261  003C88  D004               	goto	l3918
  5262  003C8A  6C10               	negf	___awmod@dividend,c
  5263  003C8C  1E11               	comf	___awmod@dividend+1,f,c
  5264  003C8E  B0D8               	btfsc	status,0,c
  5265  003C90  2A11               	incf	___awmod@dividend+1,f,c
  5266  003C92                     l3918:
  5267  003C92  C010  F010         	movff	___awmod@dividend,?___awmod
  5268  003C96  C011  F011         	movff	___awmod@dividend+1,?___awmod+1
  5269  003C9A  0012               	return	
  5270  003C9C                     __end_of___awmod:
  5271                           	opt stack 0
  5272                           tblptru	equ	0xFF8
  5273                           tblptrh	equ	0xFF7
  5274                           tblptrl	equ	0xFF6
  5275                           tablat	equ	0xFF5
  5276                           prodh	equ	0xFF4
  5277                           prodl	equ	0xFF3
  5278                           intcon	equ	0xFF2
  5279                           intcon2	equ	0xFF1
  5280                           indf0	equ	0xFEF
  5281                           postinc0	equ	0xFEE
  5282                           fsr0h	equ	0xFEA
  5283                           fsr0l	equ	0xFE9
  5284                           wreg	equ	0xFE8
  5285                           indf1	equ	0xFE7
  5286                           fsr1h	equ	0xFE2
  5287                           fsr1l	equ	0xFE1
  5288                           indf2	equ	0xFDF
  5289                           postinc2	equ	0xFDE
  5290                           postdec2	equ	0xFDD
  5291                           fsr2h	equ	0xFDA
  5292                           fsr2l	equ	0xFD9
  5293                           status	equ	0xFD8
  5294                           
  5295 ;; *************** function ___awdiv *****************
  5296 ;; Defined at:
  5297 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awdiv.c"
  5298 ;; Parameters:    Size  Location     Type
  5299 ;;  dividend        2   21[COMRAM] int 
  5300 ;;  divisor         2   23[COMRAM] int 
  5301 ;; Auto vars:     Size  Location     Type
  5302 ;;  quotient        2   27[COMRAM] int 
  5303 ;;  sign            1   26[COMRAM] unsigned char 
  5304 ;;  counter         1   25[COMRAM] unsigned char 
  5305 ;; Return value:  Size  Location     Type
  5306 ;;                  2   21[COMRAM] int 
  5307 ;; Registers used:
  5308 ;;		wreg, status,2, status,0
  5309 ;; Tracked objects:
  5310 ;;		On entry : 0/0
  5311 ;;		On exit  : 0/0
  5312 ;;		Unchanged: 0/0
  5313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5314 ;;      Params:         4       0       0       0       0       0       0       0       0
  5315 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5316 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5317 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5318 ;;Total ram usage:        8 bytes
  5319 ;; Hardware stack levels used:    1
  5320 ;; Hardware stack levels required when called:    2
  5321 ;; This function calls:
  5322 ;;		Nothing
  5323 ;; This function is called by:
  5324 ;;		_fround
  5325 ;;		_scale
  5326 ;;		_sprintf
  5327 ;; This function uses a non-reentrant model
  5328 ;;
  5329                           
  5330                           	psect	text18
  5331  0039B8                     __ptext18:
  5332                           	opt stack 0
  5333  0039B8                     ___awdiv:
  5334                           	opt stack 25
  5335                           
  5336                           ;incstack = 0
  5337  0039B8  0E00               	movlw	0
  5338  0039BA  6E1B               	movwf	___awdiv@sign,c
  5339  0039BC  AE19               	btfss	___awdiv@divisor+1,7,c
  5340  0039BE  D006               	goto	l3850
  5341  0039C0  6C18               	negf	___awdiv@divisor,c
  5342  0039C2  1E19               	comf	___awdiv@divisor+1,f,c
  5343  0039C4  B0D8               	btfsc	status,0,c
  5344  0039C6  2A19               	incf	___awdiv@divisor+1,f,c
  5345  0039C8  0E01               	movlw	1
  5346  0039CA  6E1B               	movwf	___awdiv@sign,c
  5347  0039CC                     l3850:
  5348  0039CC  AE17               	btfss	___awdiv@dividend+1,7,c
  5349  0039CE  D006               	goto	l3856
  5350  0039D0  6C16               	negf	___awdiv@dividend,c
  5351  0039D2  1E17               	comf	___awdiv@dividend+1,f,c
  5352  0039D4  B0D8               	btfsc	status,0,c
  5353  0039D6  2A17               	incf	___awdiv@dividend+1,f,c
  5354  0039D8  0E01               	movlw	1
  5355  0039DA  1A1B               	xorwf	___awdiv@sign,f,c
  5356  0039DC                     l3856:
  5357  0039DC  0E00               	movlw	0
  5358  0039DE  6E1D               	movwf	___awdiv@quotient+1,c
  5359  0039E0  0E00               	movlw	0
  5360  0039E2  6E1C               	movwf	___awdiv@quotient,c
  5361  0039E4  5018               	movf	___awdiv@divisor,w,c
  5362  0039E6  1019               	iorwf	___awdiv@divisor+1,w,c
  5363  0039E8  B4D8               	btfsc	status,2,c
  5364  0039EA  D01C               	goto	l3878
  5365  0039EC  0E01               	movlw	1
  5366  0039EE  6E1A               	movwf	___awdiv@counter,c
  5367  0039F0  D004               	goto	l3864
  5368  0039F2                     l3862:
  5369  0039F2  90D8               	bcf	status,0,c
  5370  0039F4  3618               	rlcf	___awdiv@divisor,f,c
  5371  0039F6  3619               	rlcf	___awdiv@divisor+1,f,c
  5372  0039F8  2A1A               	incf	___awdiv@counter,f,c
  5373  0039FA                     l3864:
  5374  0039FA  AE19               	btfss	___awdiv@divisor+1,7,c
  5375  0039FC  D7FA               	goto	l3862
  5376  0039FE                     l3866:
  5377  0039FE  90D8               	bcf	status,0,c
  5378  003A00  361C               	rlcf	___awdiv@quotient,f,c
  5379  003A02  361D               	rlcf	___awdiv@quotient+1,f,c
  5380  003A04  5018               	movf	___awdiv@divisor,w,c
  5381  003A06  5C16               	subwf	___awdiv@dividend,w,c
  5382  003A08  5019               	movf	___awdiv@divisor+1,w,c
  5383  003A0A  5817               	subwfb	___awdiv@dividend+1,w,c
  5384  003A0C  A0D8               	btfss	status,0,c
  5385  003A0E  D005               	goto	l3874
  5386  003A10  5018               	movf	___awdiv@divisor,w,c
  5387  003A12  5E16               	subwf	___awdiv@dividend,f,c
  5388  003A14  5019               	movf	___awdiv@divisor+1,w,c
  5389  003A16  5A17               	subwfb	___awdiv@dividend+1,f,c
  5390  003A18  801C               	bsf	___awdiv@quotient,0,c
  5391  003A1A                     l3874:
  5392  003A1A  90D8               	bcf	status,0,c
  5393  003A1C  3219               	rrcf	___awdiv@divisor+1,f,c
  5394  003A1E  3218               	rrcf	___awdiv@divisor,f,c
  5395  003A20  2E1A               	decfsz	___awdiv@counter,f,c
  5396  003A22  D7ED               	goto	l3866
  5397  003A24                     l3878:
  5398  003A24  501B               	movf	___awdiv@sign,w,c
  5399  003A26  B4D8               	btfsc	status,2,c
  5400  003A28  D004               	goto	l3882
  5401  003A2A  6C1C               	negf	___awdiv@quotient,c
  5402  003A2C  1E1D               	comf	___awdiv@quotient+1,f,c
  5403  003A2E  B0D8               	btfsc	status,0,c
  5404  003A30  2A1D               	incf	___awdiv@quotient+1,f,c
  5405  003A32                     l3882:
  5406  003A32  C01C  F016         	movff	___awdiv@quotient,?___awdiv
  5407  003A36  C01D  F017         	movff	___awdiv@quotient+1,?___awdiv+1
  5408  003A3A  0012               	return	
  5409  003A3C                     __end_of___awdiv:
  5410                           	opt stack 0
  5411                           tblptru	equ	0xFF8
  5412                           tblptrh	equ	0xFF7
  5413                           tblptrl	equ	0xFF6
  5414                           tablat	equ	0xFF5
  5415                           prodh	equ	0xFF4
  5416                           prodl	equ	0xFF3
  5417                           intcon	equ	0xFF2
  5418                           intcon2	equ	0xFF1
  5419                           indf0	equ	0xFEF
  5420                           postinc0	equ	0xFEE
  5421                           fsr0h	equ	0xFEA
  5422                           fsr0l	equ	0xFE9
  5423                           wreg	equ	0xFE8
  5424                           indf1	equ	0xFE7
  5425                           fsr1h	equ	0xFE2
  5426                           fsr1l	equ	0xFE1
  5427                           indf2	equ	0xFDF
  5428                           postinc2	equ	0xFDE
  5429                           postdec2	equ	0xFDD
  5430                           fsr2h	equ	0xFDA
  5431                           fsr2l	equ	0xFD9
  5432                           status	equ	0xFD8
  5433                           
  5434 ;; *************** function __tdiv_to_l_ *****************
  5435 ;; Defined at:
  5436 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftdivl.c"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;  f1              3   15[COMRAM] float 
  5439 ;;  f2              3   18[COMRAM] float 
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;  quot            4   24[COMRAM] unsigned long 
  5442 ;;  exp1            1   29[COMRAM] unsigned char 
  5443 ;;  cntr            1   28[COMRAM] unsigned char 
  5444 ;; Return value:  Size  Location     Type
  5445 ;;                  4   15[COMRAM] unsigned long 
  5446 ;; Registers used:
  5447 ;;		wreg, status,2, status,0
  5448 ;; Tracked objects:
  5449 ;;		On entry : 0/0
  5450 ;;		On exit  : 0/0
  5451 ;;		Unchanged: 0/0
  5452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5453 ;;      Params:         6       0       0       0       0       0       0       0       0
  5454 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5455 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5456 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5457 ;;Total ram usage:       15 bytes
  5458 ;; Hardware stack levels used:    1
  5459 ;; Hardware stack levels required when called:    2
  5460 ;; This function calls:
  5461 ;;		Nothing
  5462 ;; This function is called by:
  5463 ;;		_sprintf
  5464 ;; This function uses a non-reentrant model
  5465 ;;
  5466                           
  5467                           	psect	text19
  5468  002FDE                     __ptext19:
  5469                           	opt stack 0
  5470  002FDE                     __tdiv_to_l_:
  5471                           	opt stack 26
  5472                           
  5473                           ;incstack = 0
  5474  002FDE  C012  F016         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5475  002FE2  6A17               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5476  002FE4  6A18               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5477  002FE6  3411               	rlcf	__tdiv_to_l_@f1+1,w,c
  5478  002FE8  3616               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5479  002FEA  E301               	bnc	u4151
  5480  002FEC  8017               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5481  002FEE                     u4151:
  5482  002FEE  5016               	movf	??__tdiv_to_l_,w,c
  5483  002FF0  6E1E               	movwf	__tdiv_to_l_@exp1,c
  5484  002FF2  501E               	movf	__tdiv_to_l_@exp1,w,c
  5485  002FF4  A4D8               	btfss	status,2,c
  5486  002FF6  D009               	goto	l4144
  5487  002FF8  0E00               	movlw	0
  5488  002FFA  6E10               	movwf	?__tdiv_to_l_,c
  5489  002FFC  0E00               	movlw	0
  5490  002FFE  6E11               	movwf	?__tdiv_to_l_+1,c
  5491  003000  0E00               	movlw	0
  5492  003002  6E12               	movwf	?__tdiv_to_l_+2,c
  5493  003004  0E00               	movlw	0
  5494  003006  6E13               	movwf	?__tdiv_to_l_+3,c
  5495  003008  0012               	return	
  5496  00300A                     l4144:
  5497  00300A  C015  F016         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5498  00300E  6A17               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5499  003010  6A18               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5500  003012  3414               	rlcf	__tdiv_to_l_@f2+1,w,c
  5501  003014  3616               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5502  003016  E301               	bnc	u4171
  5503  003018  8017               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5504  00301A                     u4171:
  5505  00301A  5016               	movf	??__tdiv_to_l_,w,c
  5506  00301C  6E1D               	movwf	__tdiv_to_l_@cntr,c
  5507  00301E  501D               	movf	__tdiv_to_l_@cntr,w,c
  5508  003020  A4D8               	btfss	status,2,c
  5509  003022  D009               	goto	l4150
  5510  003024  0E00               	movlw	0
  5511  003026  6E10               	movwf	?__tdiv_to_l_,c
  5512  003028  0E00               	movlw	0
  5513  00302A  6E11               	movwf	?__tdiv_to_l_+1,c
  5514  00302C  0E00               	movlw	0
  5515  00302E  6E12               	movwf	?__tdiv_to_l_+2,c
  5516  003030  0E00               	movlw	0
  5517  003032  6E13               	movwf	?__tdiv_to_l_+3,c
  5518  003034  0012               	return	
  5519  003036                     l4150:
  5520  003036  8E11               	bsf	__tdiv_to_l_@f1+1,7,c
  5521  003038  0EFF               	movlw	255
  5522  00303A  1610               	andwf	__tdiv_to_l_@f1,f,c
  5523  00303C  0EFF               	movlw	255
  5524  00303E  1611               	andwf	__tdiv_to_l_@f1+1,f,c
  5525  003040  0E00               	movlw	0
  5526  003042  1612               	andwf	__tdiv_to_l_@f1+2,f,c
  5527  003044  8E14               	bsf	__tdiv_to_l_@f2+1,7,c
  5528  003046  0EFF               	movlw	255
  5529  003048  1613               	andwf	__tdiv_to_l_@f2,f,c
  5530  00304A  0EFF               	movlw	255
  5531  00304C  1614               	andwf	__tdiv_to_l_@f2+1,f,c
  5532  00304E  0E00               	movlw	0
  5533  003050  1615               	andwf	__tdiv_to_l_@f2+2,f,c
  5534  003052  0E00               	movlw	0
  5535  003054  6E19               	movwf	__tdiv_to_l_@quot,c
  5536  003056  0E00               	movlw	0
  5537  003058  6E1A               	movwf	__tdiv_to_l_@quot+1,c
  5538  00305A  0E00               	movlw	0
  5539  00305C  6E1B               	movwf	__tdiv_to_l_@quot+2,c
  5540  00305E  0E00               	movlw	0
  5541  003060  6E1C               	movwf	__tdiv_to_l_@quot+3,c
  5542  003062  0E7F               	movlw	127
  5543  003064  5E1E               	subwf	__tdiv_to_l_@exp1,f,c
  5544  003066  501D               	movf	__tdiv_to_l_@cntr,w,c
  5545  003068  0F98               	addlw	152
  5546  00306A  5E1E               	subwf	__tdiv_to_l_@exp1,f,c
  5547  00306C  0E18               	movlw	24
  5548  00306E  6E1D               	movwf	__tdiv_to_l_@cntr,c
  5549  003070                     l881:
  5550  003070  90D8               	bcf	status,0,c
  5551  003072  3619               	rlcf	__tdiv_to_l_@quot,f,c
  5552  003074  361A               	rlcf	__tdiv_to_l_@quot+1,f,c
  5553  003076  361B               	rlcf	__tdiv_to_l_@quot+2,f,c
  5554  003078  361C               	rlcf	__tdiv_to_l_@quot+3,f,c
  5555  00307A  5013               	movf	__tdiv_to_l_@f2,w,c
  5556  00307C  5C10               	subwf	__tdiv_to_l_@f1,w,c
  5557  00307E  5014               	movf	__tdiv_to_l_@f2+1,w,c
  5558  003080  5811               	subwfb	__tdiv_to_l_@f1+1,w,c
  5559  003082  5015               	movf	__tdiv_to_l_@f2+2,w,c
  5560  003084  5812               	subwfb	__tdiv_to_l_@f1+2,w,c
  5561  003086  A0D8               	btfss	status,0,c
  5562  003088  D007               	goto	l882
  5563  00308A  5013               	movf	__tdiv_to_l_@f2,w,c
  5564  00308C  5E10               	subwf	__tdiv_to_l_@f1,f,c
  5565  00308E  5014               	movf	__tdiv_to_l_@f2+1,w,c
  5566  003090  5A11               	subwfb	__tdiv_to_l_@f1+1,f,c
  5567  003092  5015               	movf	__tdiv_to_l_@f2+2,w,c
  5568  003094  5A12               	subwfb	__tdiv_to_l_@f1+2,f,c
  5569  003096  8019               	bsf	__tdiv_to_l_@quot,0,c
  5570  003098                     l882:
  5571  003098  90D8               	bcf	status,0,c
  5572  00309A  3610               	rlcf	__tdiv_to_l_@f1,f,c
  5573  00309C  3611               	rlcf	__tdiv_to_l_@f1+1,f,c
  5574  00309E  3612               	rlcf	__tdiv_to_l_@f1+2,f,c
  5575  0030A0  2E1D               	decfsz	__tdiv_to_l_@cntr,f,c
  5576  0030A2  D7E6               	goto	l881
  5577  0030A4  AE1E               	btfss	__tdiv_to_l_@exp1,7,c
  5578  0030A6  D016               	goto	l4184
  5579  0030A8  501E               	movf	__tdiv_to_l_@exp1,w,c
  5580  0030AA  0A80               	xorlw	128
  5581  0030AC  0F97               	addlw	151
  5582  0030AE  B0D8               	btfsc	status,0,c
  5583  0030B0  D009               	goto	l4180
  5584  0030B2  0E00               	movlw	0
  5585  0030B4  6E10               	movwf	?__tdiv_to_l_,c
  5586  0030B6  0E00               	movlw	0
  5587  0030B8  6E11               	movwf	?__tdiv_to_l_+1,c
  5588  0030BA  0E00               	movlw	0
  5589  0030BC  6E12               	movwf	?__tdiv_to_l_+2,c
  5590  0030BE  0E00               	movlw	0
  5591  0030C0  6E13               	movwf	?__tdiv_to_l_+3,c
  5592  0030C2  0012               	return	
  5593  0030C4                     l4180:
  5594  0030C4  90D8               	bcf	status,0,c
  5595  0030C6  321C               	rrcf	__tdiv_to_l_@quot+3,f,c
  5596  0030C8  321B               	rrcf	__tdiv_to_l_@quot+2,f,c
  5597  0030CA  321A               	rrcf	__tdiv_to_l_@quot+1,f,c
  5598  0030CC  3219               	rrcf	__tdiv_to_l_@quot,f,c
  5599  0030CE  3E1E               	incfsz	__tdiv_to_l_@exp1,f,c
  5600  0030D0  D7F9               	goto	l4180
  5601  0030D2  D015               	goto	l888
  5602  0030D4                     l4184:
  5603  0030D4  0E17               	movlw	23
  5604  0030D6  641E               	cpfsgt	__tdiv_to_l_@exp1,c
  5605  0030D8  D00F               	goto	l4192
  5606  0030DA  0E00               	movlw	0
  5607  0030DC  6E10               	movwf	?__tdiv_to_l_,c
  5608  0030DE  0E00               	movlw	0
  5609  0030E0  6E11               	movwf	?__tdiv_to_l_+1,c
  5610  0030E2  0E00               	movlw	0
  5611  0030E4  6E12               	movwf	?__tdiv_to_l_+2,c
  5612  0030E6  0E00               	movlw	0
  5613  0030E8  6E13               	movwf	?__tdiv_to_l_+3,c
  5614  0030EA  0012               	return	
  5615  0030EC                     l4190:
  5616  0030EC  90D8               	bcf	status,0,c
  5617  0030EE  3619               	rlcf	__tdiv_to_l_@quot,f,c
  5618  0030F0  361A               	rlcf	__tdiv_to_l_@quot+1,f,c
  5619  0030F2  361B               	rlcf	__tdiv_to_l_@quot+2,f,c
  5620  0030F4  361C               	rlcf	__tdiv_to_l_@quot+3,f,c
  5621  0030F6  061E               	decf	__tdiv_to_l_@exp1,f,c
  5622  0030F8                     l4192:
  5623  0030F8  501E               	movf	__tdiv_to_l_@exp1,w,c
  5624  0030FA  A4D8               	btfss	status,2,c
  5625  0030FC  D7F7               	goto	l4190
  5626  0030FE                     l888:
  5627  0030FE  C019  F010         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5628  003102  C01A  F011         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5629  003106  C01B  F012         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5630  00310A  C01C  F013         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5631  00310E  0012               	return		;funcret
  5632  003110                     __end_of__tdiv_to_l_:
  5633                           	opt stack 0
  5634                           tblptru	equ	0xFF8
  5635                           tblptrh	equ	0xFF7
  5636                           tblptrl	equ	0xFF6
  5637                           tablat	equ	0xFF5
  5638                           prodh	equ	0xFF4
  5639                           prodl	equ	0xFF3
  5640                           intcon	equ	0xFF2
  5641                           intcon2	equ	0xFF1
  5642                           indf0	equ	0xFEF
  5643                           postinc0	equ	0xFEE
  5644                           fsr0h	equ	0xFEA
  5645                           fsr0l	equ	0xFE9
  5646                           wreg	equ	0xFE8
  5647                           indf1	equ	0xFE7
  5648                           fsr1h	equ	0xFE2
  5649                           fsr1l	equ	0xFE1
  5650                           indf2	equ	0xFDF
  5651                           postinc2	equ	0xFDE
  5652                           postdec2	equ	0xFDD
  5653                           fsr2h	equ	0xFDA
  5654                           fsr2l	equ	0xFD9
  5655                           status	equ	0xFD8
  5656                           
  5657 ;; *************** function __div_to_l_ *****************
  5658 ;; Defined at:
  5659 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\fldivl.c"
  5660 ;; Parameters:    Size  Location     Type
  5661 ;;  f1              3   15[COMRAM] unsigned long 
  5662 ;;  f2              3   18[COMRAM] unsigned long 
  5663 ;; Auto vars:     Size  Location     Type
  5664 ;;  quot            4   21[COMRAM] unsigned long 
  5665 ;;  exp1            1   26[COMRAM] unsigned char 
  5666 ;;  cntr            1   25[COMRAM] unsigned char 
  5667 ;; Return value:  Size  Location     Type
  5668 ;;                  4   15[COMRAM] unsigned long 
  5669 ;; Registers used:
  5670 ;;		wreg, status,2, status,0
  5671 ;; Tracked objects:
  5672 ;;		On entry : 0/0
  5673 ;;		On exit  : 0/0
  5674 ;;		Unchanged: 0/0
  5675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5676 ;;      Params:         6       0       0       0       0       0       0       0       0
  5677 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5678 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5679 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5680 ;;Total ram usage:       12 bytes
  5681 ;; Hardware stack levels used:    1
  5682 ;; Hardware stack levels required when called:    2
  5683 ;; This function calls:
  5684 ;;		Nothing
  5685 ;; This function is called by:
  5686 ;;		_sprintf
  5687 ;; This function uses a non-reentrant model
  5688 ;;
  5689                           
  5690                           	psect	text20
  5691  003110                     __ptext20:
  5692                           	opt stack 0
  5693  003110                     __div_to_l_:
  5694                           	opt stack 26
  5695                           
  5696                           ;incstack = 0
  5697  003110  3412               	rlcf	__div_to_l_@f1+2,w,c
  5698  003112  3413               	rlcf	__div_to_l_@f1+3,w,c
  5699  003114  6E1B               	movwf	__div_to_l_@exp1,c
  5700  003116  501B               	movf	__div_to_l_@exp1,w,c
  5701  003118  A4D8               	btfss	status,2,c
  5702  00311A  D009               	goto	l4200
  5703  00311C  0E00               	movlw	0
  5704  00311E  6E10               	movwf	?__div_to_l_,c
  5705  003120  0E00               	movlw	0
  5706  003122  6E11               	movwf	?__div_to_l_+1,c
  5707  003124  0E00               	movlw	0
  5708  003126  6E12               	movwf	?__div_to_l_+2,c
  5709  003128  0E00               	movlw	0
  5710  00312A  6E13               	movwf	?__div_to_l_+3,c
  5711  00312C  0012               	return	
  5712  00312E                     l4200:
  5713  00312E  3415               	rlcf	__div_to_l_@f2+2,w,c
  5714  003130  3416               	rlcf	__div_to_l_@f2+3,w,c
  5715  003132  6E1A               	movwf	__div_to_l_@cntr,c
  5716  003134  501A               	movf	__div_to_l_@cntr,w,c
  5717  003136  A4D8               	btfss	status,2,c
  5718  003138  D009               	goto	l4206
  5719  00313A  0E00               	movlw	0
  5720  00313C  6E10               	movwf	?__div_to_l_,c
  5721  00313E  0E00               	movlw	0
  5722  003140  6E11               	movwf	?__div_to_l_+1,c
  5723  003142  0E00               	movlw	0
  5724  003144  6E12               	movwf	?__div_to_l_+2,c
  5725  003146  0E00               	movlw	0
  5726  003148  6E13               	movwf	?__div_to_l_+3,c
  5727  00314A  0012               	return	
  5728  00314C                     l4206:
  5729  00314C  8E12               	bsf	__div_to_l_@f1+2,7,c
  5730  00314E  0EFF               	movlw	255
  5731  003150  1610               	andwf	__div_to_l_@f1,f,c
  5732  003152  0EFF               	movlw	255
  5733  003154  1611               	andwf	__div_to_l_@f1+1,f,c
  5734  003156  0EFF               	movlw	255
  5735  003158  1612               	andwf	__div_to_l_@f1+2,f,c
  5736  00315A  0E00               	movlw	0
  5737  00315C  1613               	andwf	__div_to_l_@f1+3,f,c
  5738  00315E  8E15               	bsf	__div_to_l_@f2+2,7,c
  5739  003160  0EFF               	movlw	255
  5740  003162  1613               	andwf	__div_to_l_@f2,f,c
  5741  003164  0EFF               	movlw	255
  5742  003166  1614               	andwf	__div_to_l_@f2+1,f,c
  5743  003168  0EFF               	movlw	255
  5744  00316A  1615               	andwf	__div_to_l_@f2+2,f,c
  5745  00316C  0E00               	movlw	0
  5746  00316E  1616               	andwf	__div_to_l_@f2+3,f,c
  5747  003170  0E00               	movlw	0
  5748  003172  6E16               	movwf	__div_to_l_@quot,c
  5749  003174  0E00               	movlw	0
  5750  003176  6E17               	movwf	__div_to_l_@quot+1,c
  5751  003178  0E00               	movlw	0
  5752  00317A  6E18               	movwf	__div_to_l_@quot+2,c
  5753  00317C  0E00               	movlw	0
  5754  00317E  6E19               	movwf	__div_to_l_@quot+3,c
  5755  003180  0E7F               	movlw	127
  5756  003182  5E1B               	subwf	__div_to_l_@exp1,f,c
  5757  003184  501A               	movf	__div_to_l_@cntr,w,c
  5758  003186  0FA0               	addlw	160
  5759  003188  5E1B               	subwf	__div_to_l_@exp1,f,c
  5760  00318A  0E20               	movlw	32
  5761  00318C  6E1A               	movwf	__div_to_l_@cntr,c
  5762  00318E                     l4220:
  5763  00318E  90D8               	bcf	status,0,c
  5764  003190  3616               	rlcf	__div_to_l_@quot,f,c
  5765  003192  3617               	rlcf	__div_to_l_@quot+1,f,c
  5766  003194  3618               	rlcf	__div_to_l_@quot+2,f,c
  5767  003196  3619               	rlcf	__div_to_l_@quot+3,f,c
  5768  003198  5013               	movf	__div_to_l_@f2,w,c
  5769  00319A  5C10               	subwf	__div_to_l_@f1,w,c
  5770  00319C  5014               	movf	__div_to_l_@f2+1,w,c
  5771  00319E  5811               	subwfb	__div_to_l_@f1+1,w,c
  5772  0031A0  5015               	movf	__div_to_l_@f2+2,w,c
  5773  0031A2  5812               	subwfb	__div_to_l_@f1+2,w,c
  5774  0031A4  5016               	movf	__div_to_l_@f2+3,w,c
  5775  0031A6  5813               	subwfb	__div_to_l_@f1+3,w,c
  5776  0031A8  A0D8               	btfss	status,0,c
  5777  0031AA  D009               	goto	l4228
  5778  0031AC  5013               	movf	__div_to_l_@f2,w,c
  5779  0031AE  5E10               	subwf	__div_to_l_@f1,f,c
  5780  0031B0  5014               	movf	__div_to_l_@f2+1,w,c
  5781  0031B2  5A11               	subwfb	__div_to_l_@f1+1,f,c
  5782  0031B4  5015               	movf	__div_to_l_@f2+2,w,c
  5783  0031B6  5A12               	subwfb	__div_to_l_@f1+2,f,c
  5784  0031B8  5016               	movf	__div_to_l_@f2+3,w,c
  5785  0031BA  5A13               	subwfb	__div_to_l_@f1+3,f,c
  5786  0031BC  8016               	bsf	__div_to_l_@quot,0,c
  5787  0031BE                     l4228:
  5788  0031BE  90D8               	bcf	status,0,c
  5789  0031C0  3610               	rlcf	__div_to_l_@f1,f,c
  5790  0031C2  3611               	rlcf	__div_to_l_@f1+1,f,c
  5791  0031C4  3612               	rlcf	__div_to_l_@f1+2,f,c
  5792  0031C6  3613               	rlcf	__div_to_l_@f1+3,f,c
  5793  0031C8  2E1A               	decfsz	__div_to_l_@cntr,f,c
  5794  0031CA  D7E1               	goto	l4220
  5795  0031CC  AE1B               	btfss	__div_to_l_@exp1,7,c
  5796  0031CE  D016               	goto	l4244
  5797  0031D0  501B               	movf	__div_to_l_@exp1,w,c
  5798  0031D2  0A80               	xorlw	128
  5799  0031D4  0F9F               	addlw	159
  5800  0031D6  B0D8               	btfsc	status,0,c
  5801  0031D8  D009               	goto	l4240
  5802  0031DA  0E00               	movlw	0
  5803  0031DC  6E10               	movwf	?__div_to_l_,c
  5804  0031DE  0E00               	movlw	0
  5805  0031E0  6E11               	movwf	?__div_to_l_+1,c
  5806  0031E2  0E00               	movlw	0
  5807  0031E4  6E12               	movwf	?__div_to_l_+2,c
  5808  0031E6  0E00               	movlw	0
  5809  0031E8  6E13               	movwf	?__div_to_l_+3,c
  5810  0031EA  0012               	return	
  5811  0031EC                     l4240:
  5812  0031EC  90D8               	bcf	status,0,c
  5813  0031EE  3219               	rrcf	__div_to_l_@quot+3,f,c
  5814  0031F0  3218               	rrcf	__div_to_l_@quot+2,f,c
  5815  0031F2  3217               	rrcf	__div_to_l_@quot+1,f,c
  5816  0031F4  3216               	rrcf	__div_to_l_@quot,f,c
  5817  0031F6  3E1B               	incfsz	__div_to_l_@exp1,f,c
  5818  0031F8  D7F9               	goto	l4240
  5819  0031FA  D015               	goto	l784
  5820  0031FC                     l4244:
  5821  0031FC  0E1F               	movlw	31
  5822  0031FE  641B               	cpfsgt	__div_to_l_@exp1,c
  5823  003200  D00F               	goto	l4252
  5824  003202  0E00               	movlw	0
  5825  003204  6E10               	movwf	?__div_to_l_,c
  5826  003206  0E00               	movlw	0
  5827  003208  6E11               	movwf	?__div_to_l_+1,c
  5828  00320A  0E00               	movlw	0
  5829  00320C  6E12               	movwf	?__div_to_l_+2,c
  5830  00320E  0E00               	movlw	0
  5831  003210  6E13               	movwf	?__div_to_l_+3,c
  5832  003212  0012               	return	
  5833  003214                     l4250:
  5834  003214  90D8               	bcf	status,0,c
  5835  003216  3616               	rlcf	__div_to_l_@quot,f,c
  5836  003218  3617               	rlcf	__div_to_l_@quot+1,f,c
  5837  00321A  3618               	rlcf	__div_to_l_@quot+2,f,c
  5838  00321C  3619               	rlcf	__div_to_l_@quot+3,f,c
  5839  00321E  061B               	decf	__div_to_l_@exp1,f,c
  5840  003220                     l4252:
  5841  003220  501B               	movf	__div_to_l_@exp1,w,c
  5842  003222  A4D8               	btfss	status,2,c
  5843  003224  D7F7               	goto	l4250
  5844  003226                     l784:
  5845  003226  C016  F010         	movff	__div_to_l_@quot,?__div_to_l_
  5846  00322A  C017  F011         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5847  00322E  C018  F012         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5848  003232  C019  F013         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5849  003236  0012               	return		;funcret
  5850  003238                     __end_of__div_to_l_:
  5851                           	opt stack 0
  5852                           tblptru	equ	0xFF8
  5853                           tblptrh	equ	0xFF7
  5854                           tblptrl	equ	0xFF6
  5855                           tablat	equ	0xFF5
  5856                           prodh	equ	0xFF4
  5857                           prodl	equ	0xFF3
  5858                           intcon	equ	0xFF2
  5859                           intcon2	equ	0xFF1
  5860                           indf0	equ	0xFEF
  5861                           postinc0	equ	0xFEE
  5862                           fsr0h	equ	0xFEA
  5863                           fsr0l	equ	0xFE9
  5864                           wreg	equ	0xFE8
  5865                           indf1	equ	0xFE7
  5866                           fsr1h	equ	0xFE2
  5867                           fsr1l	equ	0xFE1
  5868                           indf2	equ	0xFDF
  5869                           postinc2	equ	0xFDE
  5870                           postdec2	equ	0xFDD
  5871                           fsr2h	equ	0xFDA
  5872                           fsr2l	equ	0xFD9
  5873                           status	equ	0xFD8
  5874                           
  5875 ;; *************** function ___lltoft *****************
  5876 ;; Defined at:
  5877 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lltoft.c"
  5878 ;; Parameters:    Size  Location     Type
  5879 ;;  c               4   23[COMRAM] unsigned long 
  5880 ;; Auto vars:     Size  Location     Type
  5881 ;;  exp             1   31[COMRAM] unsigned char 
  5882 ;; Return value:  Size  Location     Type
  5883 ;;                  3   23[COMRAM] float 
  5884 ;; Registers used:
  5885 ;;		wreg, status,2, status,0, cstack
  5886 ;; Tracked objects:
  5887 ;;		On entry : 0/0
  5888 ;;		On exit  : 0/0
  5889 ;;		Unchanged: 0/0
  5890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5891 ;;      Params:         4       0       0       0       0       0       0       0       0
  5892 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5893 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5894 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5895 ;;Total ram usage:        9 bytes
  5896 ;; Hardware stack levels used:    1
  5897 ;; Hardware stack levels required when called:    3
  5898 ;; This function calls:
  5899 ;;		___ftpack
  5900 ;; This function is called by:
  5901 ;;		_sprintf
  5902 ;; This function uses a non-reentrant model
  5903 ;;
  5904                           
  5905                           	psect	text21
  5906  003DD6                     __ptext21:
  5907                           	opt stack 0
  5908  003DD6                     ___lltoft:
  5909                           	opt stack 25
  5910                           
  5911                           ;incstack = 0
  5912  003DD6  0E8E               	movlw	142
  5913  003DD8  6E20               	movwf	___lltoft@exp,c
  5914  003DDA  D006               	goto	l6032
  5915  003DDC                     l6030:
  5916  003DDC  90D8               	bcf	status,0,c
  5917  003DDE  321B               	rrcf	___lltoft@c+3,f,c
  5918  003DE0  321A               	rrcf	___lltoft@c+2,f,c
  5919  003DE2  3219               	rrcf	___lltoft@c+1,f,c
  5920  003DE4  3218               	rrcf	___lltoft@c,f,c
  5921  003DE6  2A20               	incf	___lltoft@exp,f,c
  5922  003DE8                     l6032:
  5923  003DE8  0E00               	movlw	0
  5924  003DEA  1418               	andwf	___lltoft@c,w,c
  5925  003DEC  6E1C               	movwf	??___lltoft& (0+255),c
  5926  003DEE  0E00               	movlw	0
  5927  003DF0  1419               	andwf	___lltoft@c+1,w,c
  5928  003DF2  6E1D               	movwf	(??___lltoft+1)& (0+255),c
  5929  003DF4  0E00               	movlw	0
  5930  003DF6  141A               	andwf	___lltoft@c+2,w,c
  5931  003DF8  6E1E               	movwf	(??___lltoft+2)& (0+255),c
  5932  003DFA  0EFF               	movlw	255
  5933  003DFC  141B               	andwf	___lltoft@c+3,w,c
  5934  003DFE  6E1F               	movwf	(??___lltoft+3)& (0+255),c
  5935  003E00  501C               	movf	??___lltoft,w,c
  5936  003E02  101D               	iorwf	??___lltoft+1,w,c
  5937  003E04  101E               	iorwf	??___lltoft+2,w,c
  5938  003E06  101F               	iorwf	??___lltoft+3,w,c
  5939  003E08  A4D8               	btfss	status,2,c
  5940  003E0A  D7E8               	goto	l6030
  5941  003E0C  C018  F010         	movff	___lltoft@c,___ftpack@arg
  5942  003E10  C019  F011         	movff	___lltoft@c+1,___ftpack@arg+1
  5943  003E14  C01A  F012         	movff	___lltoft@c+2,___ftpack@arg+2
  5944  003E18  C020  F013         	movff	___lltoft@exp,___ftpack@exp
  5945  003E1C  0E00               	movlw	0
  5946  003E1E  6E14               	movwf	___ftpack@sign,c
  5947  003E20  EC3D  F01C         	call	___ftpack	;wreg free
  5948  003E24  C010  F018         	movff	?___ftpack,?___lltoft
  5949  003E28  C011  F019         	movff	?___ftpack+1,?___lltoft+1
  5950  003E2C  C012  F01A         	movff	?___ftpack+2,?___lltoft+2
  5951  003E30  0012               	return	
  5952  003E32                     __end_of___lltoft:
  5953                           	opt stack 0
  5954                           tblptru	equ	0xFF8
  5955                           tblptrh	equ	0xFF7
  5956                           tblptrl	equ	0xFF6
  5957                           tablat	equ	0xFF5
  5958                           prodh	equ	0xFF4
  5959                           prodl	equ	0xFF3
  5960                           intcon	equ	0xFF2
  5961                           intcon2	equ	0xFF1
  5962                           indf0	equ	0xFEF
  5963                           postinc0	equ	0xFEE
  5964                           fsr0h	equ	0xFEA
  5965                           fsr0l	equ	0xFE9
  5966                           wreg	equ	0xFE8
  5967                           indf1	equ	0xFE7
  5968                           fsr1h	equ	0xFE2
  5969                           fsr1l	equ	0xFE1
  5970                           indf2	equ	0xFDF
  5971                           postinc2	equ	0xFDE
  5972                           postdec2	equ	0xFDD
  5973                           fsr2h	equ	0xFDA
  5974                           fsr2l	equ	0xFD9
  5975                           status	equ	0xFD8
  5976                           
  5977 ;; *************** function ___llmod *****************
  5978 ;; Defined at:
  5979 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\llmod.c"
  5980 ;; Parameters:    Size  Location     Type
  5981 ;;  dividend        4   15[COMRAM] unsigned long 
  5982 ;;  divisor         4   19[COMRAM] unsigned long 
  5983 ;; Auto vars:     Size  Location     Type
  5984 ;;  counter         1   23[COMRAM] unsigned char 
  5985 ;; Return value:  Size  Location     Type
  5986 ;;                  4   15[COMRAM] unsigned long 
  5987 ;; Registers used:
  5988 ;;		wreg, status,2, status,0
  5989 ;; Tracked objects:
  5990 ;;		On entry : 0/0
  5991 ;;		On exit  : 0/0
  5992 ;;		Unchanged: 0/0
  5993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5994 ;;      Params:         8       0       0       0       0       0       0       0       0
  5995 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5996 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5997 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5998 ;;Total ram usage:        9 bytes
  5999 ;; Hardware stack levels used:    1
  6000 ;; Hardware stack levels required when called:    2
  6001 ;; This function calls:
  6002 ;;		Nothing
  6003 ;; This function is called by:
  6004 ;;		_sprintf
  6005 ;; This function uses a non-reentrant model
  6006 ;;
  6007                           
  6008                           	psect	text22
  6009  003D70                     __ptext22:
  6010                           	opt stack 0
  6011  003D70                     ___llmod:
  6012                           	opt stack 26
  6013                           
  6014                           ;incstack = 0
  6015  003D70  5014               	movf	___llmod@divisor,w,c
  6016  003D72  1015               	iorwf	___llmod@divisor+1,w,c
  6017  003D74  1016               	iorwf	___llmod@divisor+2,w,c
  6018  003D76  1017               	iorwf	___llmod@divisor+3,w,c
  6019  003D78  B4D8               	btfsc	status,2,c
  6020  003D7A  D024               	goto	l978
  6021  003D7C  0E01               	movlw	1
  6022  003D7E  6E18               	movwf	___llmod@counter,c
  6023  003D80  D006               	goto	l4448
  6024  003D82                     l4446:
  6025  003D82  90D8               	bcf	status,0,c
  6026  003D84  3614               	rlcf	___llmod@divisor,f,c
  6027  003D86  3615               	rlcf	___llmod@divisor+1,f,c
  6028  003D88  3616               	rlcf	___llmod@divisor+2,f,c
  6029  003D8A  3617               	rlcf	___llmod@divisor+3,f,c
  6030  003D8C  2A18               	incf	___llmod@counter,f,c
  6031  003D8E                     l4448:
  6032  003D8E  AE17               	btfss	___llmod@divisor+3,7,c
  6033  003D90  D7F8               	goto	l4446
  6034  003D92                     l4450:
  6035  003D92  5014               	movf	___llmod@divisor,w,c
  6036  003D94  5C10               	subwf	___llmod@dividend,w,c
  6037  003D96  5015               	movf	___llmod@divisor+1,w,c
  6038  003D98  5811               	subwfb	___llmod@dividend+1,w,c
  6039  003D9A  5016               	movf	___llmod@divisor+2,w,c
  6040  003D9C  5812               	subwfb	___llmod@dividend+2,w,c
  6041  003D9E  5017               	movf	___llmod@divisor+3,w,c
  6042  003DA0  5813               	subwfb	___llmod@dividend+3,w,c
  6043  003DA2  A0D8               	btfss	status,0,c
  6044  003DA4  D008               	goto	l4454
  6045  003DA6  5014               	movf	___llmod@divisor,w,c
  6046  003DA8  5E10               	subwf	___llmod@dividend,f,c
  6047  003DAA  5015               	movf	___llmod@divisor+1,w,c
  6048  003DAC  5A11               	subwfb	___llmod@dividend+1,f,c
  6049  003DAE  5016               	movf	___llmod@divisor+2,w,c
  6050  003DB0  5A12               	subwfb	___llmod@dividend+2,f,c
  6051  003DB2  5017               	movf	___llmod@divisor+3,w,c
  6052  003DB4  5A13               	subwfb	___llmod@dividend+3,f,c
  6053  003DB6                     l4454:
  6054  003DB6  90D8               	bcf	status,0,c
  6055  003DB8  3217               	rrcf	___llmod@divisor+3,f,c
  6056  003DBA  3216               	rrcf	___llmod@divisor+2,f,c
  6057  003DBC  3215               	rrcf	___llmod@divisor+1,f,c
  6058  003DBE  3214               	rrcf	___llmod@divisor,f,c
  6059  003DC0  2E18               	decfsz	___llmod@counter,f,c
  6060  003DC2  D7E7               	goto	l4450
  6061  003DC4                     l978:
  6062  003DC4  C010  F010         	movff	___llmod@dividend,?___llmod
  6063  003DC8  C011  F011         	movff	___llmod@dividend+1,?___llmod+1
  6064  003DCC  C012  F012         	movff	___llmod@dividend+2,?___llmod+2
  6065  003DD0  C013  F013         	movff	___llmod@dividend+3,?___llmod+3
  6066  003DD4  0012               	return		;funcret
  6067  003DD6                     __end_of___llmod:
  6068                           	opt stack 0
  6069                           tblptru	equ	0xFF8
  6070                           tblptrh	equ	0xFF7
  6071                           tblptrl	equ	0xFF6
  6072                           tablat	equ	0xFF5
  6073                           prodh	equ	0xFF4
  6074                           prodl	equ	0xFF3
  6075                           intcon	equ	0xFF2
  6076                           intcon2	equ	0xFF1
  6077                           indf0	equ	0xFEF
  6078                           postinc0	equ	0xFEE
  6079                           fsr0h	equ	0xFEA
  6080                           fsr0l	equ	0xFE9
  6081                           wreg	equ	0xFE8
  6082                           indf1	equ	0xFE7
  6083                           fsr1h	equ	0xFE2
  6084                           fsr1l	equ	0xFE1
  6085                           indf2	equ	0xFDF
  6086                           postinc2	equ	0xFDE
  6087                           postdec2	equ	0xFDD
  6088                           fsr2h	equ	0xFDA
  6089                           fsr2l	equ	0xFD9
  6090                           status	equ	0xFD8
  6091                           
  6092 ;; *************** function ___lldiv *****************
  6093 ;; Defined at:
  6094 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lldiv.c"
  6095 ;; Parameters:    Size  Location     Type
  6096 ;;  dividend        4   15[COMRAM] unsigned long 
  6097 ;;  divisor         4   19[COMRAM] unsigned long 
  6098 ;; Auto vars:     Size  Location     Type
  6099 ;;  quotient        4   23[COMRAM] unsigned long 
  6100 ;;  counter         1   27[COMRAM] unsigned char 
  6101 ;; Return value:  Size  Location     Type
  6102 ;;                  4   15[COMRAM] unsigned long 
  6103 ;; Registers used:
  6104 ;;		wreg, status,2, status,0
  6105 ;; Tracked objects:
  6106 ;;		On entry : 0/0
  6107 ;;		On exit  : 0/0
  6108 ;;		Unchanged: 0/0
  6109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6110 ;;      Params:         8       0       0       0       0       0       0       0       0
  6111 ;;      Locals:         5       0       0       0       0       0       0       0       0
  6112 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6113 ;;      Totals:        13       0       0       0       0       0       0       0       0
  6114 ;;Total ram usage:       13 bytes
  6115 ;; Hardware stack levels used:    1
  6116 ;; Hardware stack levels required when called:    2
  6117 ;; This function calls:
  6118 ;;		Nothing
  6119 ;; This function is called by:
  6120 ;;		_sprintf
  6121 ;; This function uses a non-reentrant model
  6122 ;;
  6123                           
  6124                           	psect	text23
  6125  003A3C                     __ptext23:
  6126                           	opt stack 0
  6127  003A3C                     ___lldiv:
  6128                           	opt stack 26
  6129                           
  6130                           ;incstack = 0
  6131  003A3C  0E00               	movlw	0
  6132  003A3E  6E18               	movwf	___lldiv@quotient,c
  6133  003A40  0E00               	movlw	0
  6134  003A42  6E19               	movwf	___lldiv@quotient+1,c
  6135  003A44  0E00               	movlw	0
  6136  003A46  6E1A               	movwf	___lldiv@quotient+2,c
  6137  003A48  0E00               	movlw	0
  6138  003A4A  6E1B               	movwf	___lldiv@quotient+3,c
  6139  003A4C  5014               	movf	___lldiv@divisor,w,c
  6140  003A4E  1015               	iorwf	___lldiv@divisor+1,w,c
  6141  003A50  1016               	iorwf	___lldiv@divisor+2,w,c
  6142  003A52  1017               	iorwf	___lldiv@divisor+3,w,c
  6143  003A54  B4D8               	btfsc	status,2,c
  6144  003A56  D02A               	goto	l968
  6145  003A58  0E01               	movlw	1
  6146  003A5A  6E1C               	movwf	___lldiv@counter,c
  6147  003A5C  D006               	goto	l4428
  6148  003A5E                     l4426:
  6149  003A5E  90D8               	bcf	status,0,c
  6150  003A60  3614               	rlcf	___lldiv@divisor,f,c
  6151  003A62  3615               	rlcf	___lldiv@divisor+1,f,c
  6152  003A64  3616               	rlcf	___lldiv@divisor+2,f,c
  6153  003A66  3617               	rlcf	___lldiv@divisor+3,f,c
  6154  003A68  2A1C               	incf	___lldiv@counter,f,c
  6155  003A6A                     l4428:
  6156  003A6A  AE17               	btfss	___lldiv@divisor+3,7,c
  6157  003A6C  D7F8               	goto	l4426
  6158  003A6E                     l4430:
  6159  003A6E  90D8               	bcf	status,0,c
  6160  003A70  3618               	rlcf	___lldiv@quotient,f,c
  6161  003A72  3619               	rlcf	___lldiv@quotient+1,f,c
  6162  003A74  361A               	rlcf	___lldiv@quotient+2,f,c
  6163  003A76  361B               	rlcf	___lldiv@quotient+3,f,c
  6164  003A78  5014               	movf	___lldiv@divisor,w,c
  6165  003A7A  5C10               	subwf	___lldiv@dividend,w,c
  6166  003A7C  5015               	movf	___lldiv@divisor+1,w,c
  6167  003A7E  5811               	subwfb	___lldiv@dividend+1,w,c
  6168  003A80  5016               	movf	___lldiv@divisor+2,w,c
  6169  003A82  5812               	subwfb	___lldiv@dividend+2,w,c
  6170  003A84  5017               	movf	___lldiv@divisor+3,w,c
  6171  003A86  5813               	subwfb	___lldiv@dividend+3,w,c
  6172  003A88  A0D8               	btfss	status,0,c
  6173  003A8A  D009               	goto	l4438
  6174  003A8C  5014               	movf	___lldiv@divisor,w,c
  6175  003A8E  5E10               	subwf	___lldiv@dividend,f,c
  6176  003A90  5015               	movf	___lldiv@divisor+1,w,c
  6177  003A92  5A11               	subwfb	___lldiv@dividend+1,f,c
  6178  003A94  5016               	movf	___lldiv@divisor+2,w,c
  6179  003A96  5A12               	subwfb	___lldiv@dividend+2,f,c
  6180  003A98  5017               	movf	___lldiv@divisor+3,w,c
  6181  003A9A  5A13               	subwfb	___lldiv@dividend+3,f,c
  6182  003A9C  8018               	bsf	___lldiv@quotient,0,c
  6183  003A9E                     l4438:
  6184  003A9E  90D8               	bcf	status,0,c
  6185  003AA0  3217               	rrcf	___lldiv@divisor+3,f,c
  6186  003AA2  3216               	rrcf	___lldiv@divisor+2,f,c
  6187  003AA4  3215               	rrcf	___lldiv@divisor+1,f,c
  6188  003AA6  3214               	rrcf	___lldiv@divisor,f,c
  6189  003AA8  2E1C               	decfsz	___lldiv@counter,f,c
  6190  003AAA  D7E1               	goto	l4430
  6191  003AAC                     l968:
  6192  003AAC  C018  F010         	movff	___lldiv@quotient,?___lldiv
  6193  003AB0  C019  F011         	movff	___lldiv@quotient+1,?___lldiv+1
  6194  003AB4  C01A  F012         	movff	___lldiv@quotient+2,?___lldiv+2
  6195  003AB8  C01B  F013         	movff	___lldiv@quotient+3,?___lldiv+3
  6196  003ABC  0012               	return		;funcret
  6197  003ABE                     __end_of___lldiv:
  6198                           	opt stack 0
  6199                           tblptru	equ	0xFF8
  6200                           tblptrh	equ	0xFF7
  6201                           tblptrl	equ	0xFF6
  6202                           tablat	equ	0xFF5
  6203                           prodh	equ	0xFF4
  6204                           prodl	equ	0xFF3
  6205                           intcon	equ	0xFF2
  6206                           intcon2	equ	0xFF1
  6207                           indf0	equ	0xFEF
  6208                           postinc0	equ	0xFEE
  6209                           fsr0h	equ	0xFEA
  6210                           fsr0l	equ	0xFE9
  6211                           wreg	equ	0xFE8
  6212                           indf1	equ	0xFE7
  6213                           fsr1h	equ	0xFE2
  6214                           fsr1l	equ	0xFE1
  6215                           indf2	equ	0xFDF
  6216                           postinc2	equ	0xFDE
  6217                           postdec2	equ	0xFDD
  6218                           fsr2h	equ	0xFDA
  6219                           fsr2l	equ	0xFD9
  6220                           status	equ	0xFD8
  6221                           
  6222 ;; *************** function _memset *****************
  6223 ;; Defined at:
  6224 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\memset.c"
  6225 ;; Parameters:    Size  Location     Type
  6226 ;;  p1              2   15[COMRAM] PTR void 
  6227 ;;		 -> parseGcode@Gparsed(16), uart_str(40), 
  6228 ;;  c               2   17[COMRAM] int 
  6229 ;;  n               2   19[COMRAM] unsigned int 
  6230 ;; Auto vars:     Size  Location     Type
  6231 ;;  p               2   21[COMRAM] PTR unsigned char 
  6232 ;;		 -> parseGcode@Gparsed(16), uart_str(40), 
  6233 ;; Return value:  Size  Location     Type
  6234 ;;                  2   15[COMRAM] PTR void 
  6235 ;; Registers used:
  6236 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6237 ;; Tracked objects:
  6238 ;;		On entry : 0/0
  6239 ;;		On exit  : 0/0
  6240 ;;		Unchanged: 0/0
  6241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6242 ;;      Params:         6       0       0       0       0       0       0       0       0
  6243 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6244 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6245 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6246 ;;Total ram usage:        8 bytes
  6247 ;; Hardware stack levels used:    1
  6248 ;; Hardware stack levels required when called:    2
  6249 ;; This function calls:
  6250 ;;		Nothing
  6251 ;; This function is called by:
  6252 ;;		_parseGcode
  6253 ;; This function uses a non-reentrant model
  6254 ;;
  6255                           
  6256                           	psect	text24
  6257  00419A                     __ptext24:
  6258                           	opt stack 0
  6259  00419A                     _memset:
  6260                           	opt stack 27
  6261                           
  6262                           ;incstack = 0
  6263  00419A  C010  F016         	movff	memset@p1,memset@p
  6264  00419E  C011  F017         	movff	memset@p1+1,memset@p+1
  6265  0041A2  D008               	goto	l4498
  6266  0041A4                     l4494:
  6267  0041A4  C016  FFD9         	movff	memset@p,fsr2l
  6268  0041A8  C017  FFDA         	movff	memset@p+1,fsr2h
  6269  0041AC  C012  FFDF         	movff	memset@c,indf2
  6270  0041B0  4A16               	infsnz	memset@p,f,c
  6271  0041B2  2A17               	incf	memset@p+1,f,c
  6272  0041B4                     l4498:
  6273  0041B4  0614               	decf	memset@n,f,c
  6274  0041B6  A0D8               	btfss	status,0,c
  6275  0041B8  0615               	decf	memset@n+1,f,c
  6276  0041BA  2814               	incf	memset@n,w,c
  6277  0041BC  E1F3               	bnz	l4494
  6278  0041BE  2815               	incf	memset@n+1,w,c
  6279  0041C0  B4D8               	btfsc	status,2,c
  6280  0041C2  0012               	return	
  6281  0041C4  D7EF               	goto	l4494
  6282  0041C6                     __end_of_memset:
  6283                           	opt stack 0
  6284                           tblptru	equ	0xFF8
  6285                           tblptrh	equ	0xFF7
  6286                           tblptrl	equ	0xFF6
  6287                           tablat	equ	0xFF5
  6288                           prodh	equ	0xFF4
  6289                           prodl	equ	0xFF3
  6290                           intcon	equ	0xFF2
  6291                           intcon2	equ	0xFF1
  6292                           indf0	equ	0xFEF
  6293                           postinc0	equ	0xFEE
  6294                           fsr0h	equ	0xFEA
  6295                           fsr0l	equ	0xFE9
  6296                           wreg	equ	0xFE8
  6297                           indf1	equ	0xFE7
  6298                           fsr1h	equ	0xFE2
  6299                           fsr1l	equ	0xFE1
  6300                           indf2	equ	0xFDF
  6301                           postinc2	equ	0xFDE
  6302                           postdec2	equ	0xFDD
  6303                           fsr2h	equ	0xFDA
  6304                           fsr2l	equ	0xFD9
  6305                           status	equ	0xFD8
  6306                           
  6307 ;; *************** function _execGcode *****************
  6308 ;; Defined at:
  6309 ;;		line 93 in file "gcode.c"
  6310 ;; Parameters:    Size  Location     Type
  6311 ;;  Gparsed         2   53[BANK0 ] PTR struct G_token_
  6312 ;;		 -> parseGcode@Gparsed(16), 
  6313 ;; Auto vars:     Size  Location     Type
  6314 ;;  arg1            3   61[BANK0 ] PTR struct G_token_
  6315 ;;  arg2            3   56[BANK0 ] PTR struct G_token_
  6316 ;;  feedrate        2   64[BANK0 ] unsigned short 
  6317 ;;  i               2   59[BANK0 ] int 
  6318 ;;  axis            1   66[BANK0 ] unsigned char 
  6319 ;; Return value:  Size  Location     Type
  6320 ;;                  1    wreg      enum E4563
  6321 ;; Registers used:
  6322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6323 ;; Tracked objects:
  6324 ;;		On entry : 0/0
  6325 ;;		On exit  : 0/0
  6326 ;;		Unchanged: 0/0
  6327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6328 ;;      Params:         0       2       0       0       0       0       0       0       0
  6329 ;;      Locals:         0      11       0       0       0       0       0       0       0
  6330 ;;      Temps:          0       1       0       0       0       0       0       0       0
  6331 ;;      Totals:         0      14       0       0       0       0       0       0       0
  6332 ;;Total ram usage:       14 bytes
  6333 ;; Hardware stack levels used:    1
  6334 ;; Hardware stack levels required when called:    6
  6335 ;; This function calls:
  6336 ;;		___fttol
  6337 ;;		_delay_ms
  6338 ;;		_delay_us
  6339 ;;		_homeAxis
  6340 ;;		_linearMove1Axis
  6341 ;;		_linearMove2Axis
  6342 ;; This function is called by:
  6343 ;;		_parseGcode
  6344 ;; This function uses a non-reentrant model
  6345 ;;
  6346                           
  6347                           	psect	text25
  6348  0022FE                     __ptext25:
  6349                           	opt stack 0
  6350  0022FE                     _execGcode:
  6351                           	opt stack 23
  6352                           
  6353                           ;gcode.c: 95: int i;
  6354                           ;gcode.c: 97: char axis = 0;
  6355                           
  6356                           ;incstack = 0
  6357  0022FE  0E00               	movlw	0
  6358  002300  0100               	movlb	0	; () banked
  6359  002302  6FA2               	movwf	execGcode@axis& (0+255),b
  6360                           
  6361                           ; BSR set to: 0
  6362                           ;gcode.c: 98: unsigned short feedrate = DEFAULT_FEEDRATE;
  6363  002304  C0EC  F03A         	movff	_DEFAULT_FEEDRATE,___fttol@f1
  6364  002308  C0ED  F03B         	movff	_DEFAULT_FEEDRATE+1,___fttol@f1+1
  6365  00230C  C0EE  F03C         	movff	_DEFAULT_FEEDRATE+2,___fttol@f1+2
  6366  002310  EC1C  F019         	call	___fttol	;wreg free
  6367  002314  C03A  F0A0         	movff	?___fttol,execGcode@feedrate
  6368  002318  C03B  F0A1         	movff	?___fttol+1,execGcode@feedrate+1
  6369                           
  6370                           ;gcode.c: 99: double arg1, arg2;
  6371                           ;gcode.c: 101: if (Gparsed[0].flag == 'G')
  6372  00231C  C095  FFD9         	movff	execGcode@Gparsed,fsr2l
  6373  002320  C096  FFDA         	movff	execGcode@Gparsed+1,fsr2h
  6374  002324  0E47               	movlw	71
  6375  002326  18DE               	xorwf	postinc2,w,c
  6376  002328  B4D8               	btfsc	status,2,c
  6377  00232A  D15A               	goto	l6160
  6378  00232C  D173               	goto	l6162
  6379  00232E                     l6050:
  6380                           
  6381                           ;gcode.c: 108: if (Gparsed[1].flag == 'F')
  6382  00232E  0100               	movlb	0	; () banked
  6383  002330  EE20 F004          	lfsr	2,4
  6384  002334  5195               	movf	execGcode@Gparsed& (0+255),w,b
  6385  002336  26D9               	addwf	fsr2l,f,c
  6386  002338  5196               	movf	(execGcode@Gparsed+1)& (0+255),w,b
  6387  00233A  22DA               	addwfc	fsr2h,f,c
  6388  00233C  0E46               	movlw	70
  6389  00233E  18DE               	xorwf	postinc2,w,c
  6390  002340  A4D8               	btfss	status,2,c
  6391  002342  D00F               	goto	l6058
  6392                           
  6393                           ; BSR set to: 0
  6394                           ;gcode.c: 109: {
  6395                           ;gcode.c: 110: DEFAULT_FEEDRATE = Gparsed[1].arg;
  6396  002344  0100               	movlb	0	; () banked
  6397  002346  EE20 F005          	lfsr	2,5
  6398  00234A  5195               	movf	execGcode@Gparsed& (0+255),w,b
  6399  00234C  26D9               	addwf	fsr2l,f,c
  6400  00234E  5196               	movf	(execGcode@Gparsed+1)& (0+255),w,b
  6401  002350  22DA               	addwfc	fsr2h,f,c
  6402  002352  CFDE F0EC          	movff	postinc2,_DEFAULT_FEEDRATE
  6403  002356  CFDE F0ED          	movff	postinc2,_DEFAULT_FEEDRATE+1
  6404  00235A  CFDD F0EE          	movff	postdec2,_DEFAULT_FEEDRATE+2
  6405                           
  6406                           ; BSR set to: 0
  6407                           ;gcode.c: 111: return G_SUCCESS;
  6408  00235E  0E00               	movlw	0
  6409                           
  6410                           ; BSR set to: 0
  6411  002360  0012               	return	
  6412  002362                     l6058:
  6413                           
  6414                           ; BSR set to: 0
  6415                           ;gcode.c: 112: }
  6416                           ;gcode.c: 114: axis = Gparsed[1].flag;
  6417  002362  0100               	movlb	0	; () banked
  6418  002364  EE20 F004          	lfsr	2,4
  6419  002368  5195               	movf	execGcode@Gparsed& (0+255),w,b
  6420  00236A  26D9               	addwf	fsr2l,f,c
  6421  00236C  5196               	movf	(execGcode@Gparsed+1)& (0+255),w,b
  6422  00236E  22DA               	addwfc	fsr2h,f,c
  6423  002370  50DF               	movf	indf2,w,c
  6424  002372  0100               	movlb	0	; () banked
  6425  002374  6FA2               	movwf	execGcode@axis& (0+255),b
  6426                           
  6427                           ;gcode.c: 115: arg1 = Gparsed[1].arg;
  6428  002376  0100               	movlb	0	; () banked
  6429  002378  EE20 F005          	lfsr	2,5
  6430  00237C  5195               	movf	execGcode@Gparsed& (0+255),w,b
  6431  00237E  26D9               	addwf	fsr2l,f,c
  6432  002380  5196               	movf	(execGcode@Gparsed+1)& (0+255),w,b
  6433  002382  22DA               	addwfc	fsr2h,f,c
  6434  002384  CFDE F09D          	movff	postinc2,execGcode@arg1
  6435  002388  CFDE F09E          	movff	postinc2,execGcode@arg1+1
  6436  00238C  CFDD F09F          	movff	postdec2,execGcode@arg1+2
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;gcode.c: 116: if ( ((axis<'X') || (axis>'Z')) && (axis!='R')) {return G_INVALID_ARGUMEN
      +                          T;}
  6440  002390  0E57               	movlw	87
  6441  002392  0100               	movlb	0	; () banked
  6442  002394  65A2               	cpfsgt	execGcode@axis& (0+255),b
  6443  002396  D004               	goto	l6064
  6444                           
  6445                           ; BSR set to: 0
  6446  002398  0E5A               	movlw	90
  6447  00239A  0100               	movlb	0	; () banked
  6448  00239C  65A2               	cpfsgt	execGcode@axis& (0+255),b
  6449  00239E  D007               	goto	l6070
  6450  0023A0                     l6064:
  6451                           
  6452                           ; BSR set to: 0
  6453  0023A0  0E52               	movlw	82
  6454  0023A2  0100               	movlb	0	; () banked
  6455  0023A4  19A2               	xorwf	execGcode@axis& (0+255),w,b
  6456  0023A6  B4D8               	btfsc	status,2,c
  6457  0023A8  D002               	goto	l6070
  6458                           
  6459                           ; BSR set to: 0
  6460  0023AA  0E02               	movlw	2
  6461                           
  6462                           ; BSR set to: 0
  6463  0023AC  0012               	return	
  6464  0023AE                     l6070:
  6465                           
  6466                           ; BSR set to: 0
  6467                           ;gcode.c: 119: if (Gparsed[2].flag == 0)
  6468  0023AE  0100               	movlb	0	; () banked
  6469  0023B0  EE20 F008          	lfsr	2,8
  6470  0023B4  5195               	movf	execGcode@Gparsed& (0+255),w,b
  6471  0023B6  26D9               	addwf	fsr2l,f,c
  6472  0023B8  5196               	movf	(execGcode@Gparsed+1)& (0+255),w,b
  6473  0023BA  22DA               	addwfc	fsr2h,f,c
  6474  0023BC  50DF               	movf	indf2,w,c
  6475  0023BE  A4D8               	btfss	status,2,c
  6476  0023C0  D00F               	goto	l6078
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;gcode.c: 120: {
  6480                           ;gcode.c: 121: return linearMove1Axis(axis, arg1, feedrate);
  6481  0023C2  C09D  F066         	movff	execGcode@arg1,linearMove1Axis@arg
  6482  0023C6  C09E  F067         	movff	execGcode@arg1+1,linearMove1Axis@arg+1
  6483  0023CA  C09F  F068         	movff	execGcode@arg1+2,linearMove1Axis@arg+2
  6484  0023CE  C0A0  F069         	movff	execGcode@feedrate,linearMove1Axis@feedrate
  6485  0023D2  C0A1  F06A         	movff	execGcode@feedrate+1,linearMove1Axis@feedrate+1
  6486  0023D6  0100               	movlb	0	; () banked
  6487  0023D8  51A2               	movf	execGcode@axis& (0+255),w,b
  6488  0023DA  EC5D  F00B         	call	_linearMove1Axis
  6489  0023DE  0012               	return	
  6490  0023E0                     l6078:
  6491                           
  6492                           ;gcode.c: 123: else if (Gparsed[2].flag == 'F')
  6493  0023E0  0100               	movlb	0	; () banked
  6494  0023E2  EE20 F008          	lfsr	2,8
  6495  0023E6  5195               	movf	execGcode@Gparsed& (0+255),w,b
  6496  0023E8  26D9               	addwf	fsr2l,f,c
  6497  0023EA  5196               	movf	(execGcode@Gparsed+1)& (0+255),w,b
  6498  0023EC  22DA               	addwfc	fsr2h,f,c
  6499  0023EE  0E46               	movlw	70
  6500  0023F0  18DE               	xorwf	postinc2,w,c
  6501  0023F2  A4D8               	btfss	status,2,c
  6502  0023F4  D022               	goto	l6088
  6503                           
  6504                           ; BSR set to: 0
  6505                           ;gcode.c: 124: {
  6506                           ;gcode.c: 125: feedrate = Gparsed[2].arg;
  6507  0023F6  0100               	movlb	0	; () banked
  6508  0023F8  EE20 F009          	lfsr	2,9
  6509  0023FC  5195               	movf	execGcode@Gparsed& (0+255),w,b
  6510  0023FE  26D9               	addwf	fsr2l,f,c
  6511  002400  5196               	movf	(execGcode@Gparsed+1)& (0+255),w,b
  6512  002402  22DA               	addwfc	fsr2h,f,c
  6513  002404  CFDE F03A          	movff	postinc2,___fttol@f1
  6514  002408  CFDE F03B          	movff	postinc2,___fttol@f1+1
  6515  00240C  CFDD F03C          	movff	postdec2,___fttol@f1+2
  6516  002410  EC1C  F019         	call	___fttol	;wreg free
  6517  002414  C03A  F0A0         	movff	?___fttol,execGcode@feedrate
  6518  002418  C03B  F0A1         	movff	?___fttol+1,execGcode@feedrate+1
  6519                           
  6520                           ;gcode.c: 126: return linearMove1Axis(axis, arg1, feedrate);
  6521  00241C  C09D  F066         	movff	execGcode@arg1,linearMove1Axis@arg
  6522  002420  C09E  F067         	movff	execGcode@arg1+1,linearMove1Axis@arg+1
  6523  002424  C09F  F068         	movff	execGcode@arg1+2,linearMove1Axis@arg+2
  6524  002428  C0A0  F069         	movff	execGcode@feedrate,linearMove1Axis@feedrate
  6525  00242C  C0A1  F06A         	movff	execGcode@feedrate+1,linearMove1Axis@feedrate+1
  6526  002430  0100               	movlb	0	; () banked
  6527  002432  51A2               	movf	execGcode@axis& (0+255),w,b
  6528  002434  EC5D  F00B         	call	_linearMove1Axis
  6529  002438  0012               	return	
  6530  00243A                     l6088:
  6531                           
  6532                           ;gcode.c: 128: else if (Gparsed[2].flag == 'Y')
  6533  00243A  0100               	movlb	0	; () banked
  6534  00243C  EE20 F008          	lfsr	2,8
  6535  002440  5195               	movf	execGcode@Gparsed& (0+255),w,b
  6536  002442  26D9               	addwf	fsr2l,f,c
  6537  002444  5196               	movf	(execGcode@Gparsed+1)& (0+255),w,b
  6538  002446  22DA               	addwfc	fsr2h,f,c
  6539  002448  0E59               	movlw	89
  6540  00244A  18DE               	xorwf	postinc2,w,c
  6541  00244C  A4D8               	btfss	status,2,c
  6542  00244E  D05D               	goto	l6112
  6543                           
  6544                           ; BSR set to: 0
  6545                           ;gcode.c: 129: {
  6546                           ;gcode.c: 130: arg2 = Gparsed[2].arg;
  6547  002450  0100               	movlb	0	; () banked
  6548  002452  EE20 F009          	lfsr	2,9
  6549  002456  5195               	movf	execGcode@Gparsed& (0+255),w,b
  6550  002458  26D9               	addwf	fsr2l,f,c
  6551  00245A  5196               	movf	(execGcode@Gparsed+1)& (0+255),w,b
  6552  00245C  22DA               	addwfc	fsr2h,f,c
  6553  00245E  CFDE F098          	movff	postinc2,execGcode@arg2
  6554  002462  CFDE F099          	movff	postinc2,execGcode@arg2+1
  6555  002466  CFDD F09A          	movff	postdec2,execGcode@arg2+2
  6556                           
  6557                           ;gcode.c: 131: if (Gparsed[3].flag == 0)
  6558  00246A  0100               	movlb	0	; () banked
  6559  00246C  EE20 F00C          	lfsr	2,12
  6560  002470  5195               	movf	execGcode@Gparsed& (0+255),w,b
  6561  002472  26D9               	addwf	fsr2l,f,c
  6562  002474  5196               	movf	(execGcode@Gparsed+1)& (0+255),w,b
  6563  002476  22DA               	addwfc	fsr2h,f,c
  6564  002478  50DF               	movf	indf2,w,c
  6565  00247A  A4D8               	btfss	status,2,c
  6566  00247C  D013               	goto	l6098
  6567                           
  6568                           ; BSR set to: 0
  6569                           ;gcode.c: 132: {
  6570                           ;gcode.c: 133: return linearMove2Axis(arg1, arg2, feedrate);
  6571  00247E  C09D  F078         	movff	execGcode@arg1,linearMove2Axis@x_target
  6572  002482  C09E  F079         	movff	execGcode@arg1+1,linearMove2Axis@x_target+1
  6573  002486  C09F  F07A         	movff	execGcode@arg1+2,linearMove2Axis@x_target+2
  6574  00248A  C098  F07B         	movff	execGcode@arg2,linearMove2Axis@y_target
  6575  00248E  C099  F07C         	movff	execGcode@arg2+1,linearMove2Axis@y_target+1
  6576  002492  C09A  F07D         	movff	execGcode@arg2+2,linearMove2Axis@y_target+2
  6577  002496  C0A0  F07E         	movff	execGcode@feedrate,linearMove2Axis@feedrate
  6578  00249A  C0A1  F07F         	movff	execGcode@feedrate+1,linearMove2Axis@feedrate+1
  6579  00249E  EC69  F008         	call	_linearMove2Axis	;wreg free
  6580  0024A2  0012               	return	
  6581  0024A4                     l6098:
  6582                           
  6583                           ;gcode.c: 135: else if (Gparsed[3].flag == 'F')
  6584  0024A4  0100               	movlb	0	; () banked
  6585  0024A6  EE20 F00C          	lfsr	2,12
  6586  0024AA  5195               	movf	execGcode@Gparsed& (0+255),w,b
  6587  0024AC  26D9               	addwf	fsr2l,f,c
  6588  0024AE  5196               	movf	(execGcode@Gparsed+1)& (0+255),w,b
  6589  0024B0  22DA               	addwfc	fsr2h,f,c
  6590  0024B2  0E46               	movlw	70
  6591  0024B4  18DE               	xorwf	postinc2,w,c
  6592  0024B6  A4D8               	btfss	status,2,c
  6593  0024B8  D026               	goto	l6108
  6594                           
  6595                           ; BSR set to: 0
  6596                           ;gcode.c: 136: {
  6597                           ;gcode.c: 137: feedrate = Gparsed[3].arg;
  6598  0024BA  0100               	movlb	0	; () banked
  6599  0024BC  EE20 F00D          	lfsr	2,13
  6600  0024C0  5195               	movf	execGcode@Gparsed& (0+255),w,b
  6601  0024C2  26D9               	addwf	fsr2l,f,c
  6602  0024C4  5196               	movf	(execGcode@Gparsed+1)& (0+255),w,b
  6603  0024C6  22DA               	addwfc	fsr2h,f,c
  6604  0024C8  CFDE F03A          	movff	postinc2,___fttol@f1
  6605  0024CC  CFDE F03B          	movff	postinc2,___fttol@f1+1
  6606  0024D0  CFDD F03C          	movff	postdec2,___fttol@f1+2
  6607  0024D4  EC1C  F019         	call	___fttol	;wreg free
  6608  0024D8  C03A  F0A0         	movff	?___fttol,execGcode@feedrate
  6609  0024DC  C03B  F0A1         	movff	?___fttol+1,execGcode@feedrate+1
  6610                           
  6611                           ;gcode.c: 138: return linearMove2Axis(arg1, arg2, feedrate);
  6612  0024E0  C09D  F078         	movff	execGcode@arg1,linearMove2Axis@x_target
  6613  0024E4  C09E  F079         	movff	execGcode@arg1+1,linearMove2Axis@x_target+1
  6614  0024E8  C09F  F07A         	movff	execGcode@arg1+2,linearMove2Axis@x_target+2
  6615  0024EC  C098  F07B         	movff	execGcode@arg2,linearMove2Axis@y_target
  6616  0024F0  C099  F07C         	movff	execGcode@arg2+1,linearMove2Axis@y_target+1
  6617  0024F4  C09A  F07D         	movff	execGcode@arg2+2,linearMove2Axis@y_target+2
  6618  0024F8  C0A0  F07E         	movff	execGcode@feedrate,linearMove2Axis@feedrate
  6619  0024FC  C0A1  F07F         	movff	execGcode@feedrate+1,linearMove2Axis@feedrate+1
  6620  002500  EC69  F008         	call	_linearMove2Axis	;wreg free
  6621  002504  0012               	return	
  6622  002506                     l6108:
  6623                           
  6624                           ;gcode.c: 140: else {return G_INVALID_ARGUMENT;}
  6625  002506  0E02               	movlw	2
  6626  002508  0012               	return	
  6627  00250A                     l6112:
  6628                           
  6629                           ;gcode.c: 142: else {return G_INVALID_ARGUMENT;}
  6630  00250A  0E02               	movlw	2
  6631  00250C  0012               	return	
  6632  00250E                     l6116:
  6633                           
  6634                           ;gcode.c: 147: i = Gparsed[1].arg;
  6635  00250E  0100               	movlb	0	; () banked
  6636  002510  EE20 F005          	lfsr	2,5
  6637  002514  5195               	movf	execGcode@Gparsed& (0+255),w,b
  6638  002516  26D9               	addwf	fsr2l,f,c
  6639  002518  5196               	movf	(execGcode@Gparsed+1)& (0+255),w,b
  6640  00251A  22DA               	addwfc	fsr2h,f,c
  6641  00251C  CFDE F03A          	movff	postinc2,___fttol@f1
  6642  002520  CFDE F03B          	movff	postinc2,___fttol@f1+1
  6643  002524  CFDD F03C          	movff	postdec2,___fttol@f1+2
  6644  002528  EC1C  F019         	call	___fttol	;wreg free
  6645  00252C  C03A  F09B         	movff	?___fttol,execGcode@i
  6646  002530  C03B  F09C         	movff	?___fttol+1,execGcode@i+1
  6647                           
  6648                           ;gcode.c: 149: if (Gparsed[1].flag == 'S') {delay_ms(i);}
  6649  002534  0100               	movlb	0	; () banked
  6650  002536  EE20 F004          	lfsr	2,4
  6651  00253A  5195               	movf	execGcode@Gparsed& (0+255),w,b
  6652  00253C  26D9               	addwf	fsr2l,f,c
  6653  00253E  5196               	movf	(execGcode@Gparsed+1)& (0+255),w,b
  6654  002540  22DA               	addwfc	fsr2h,f,c
  6655  002542  0E53               	movlw	83
  6656  002544  18DE               	xorwf	postinc2,w,c
  6657  002546  A4D8               	btfss	status,2,c
  6658  002548  D007               	goto	l6122
  6659                           
  6660                           ; BSR set to: 0
  6661  00254A  C09B  F010         	movff	execGcode@i,delay_ms@ms
  6662  00254E  C09C  F011         	movff	execGcode@i+1,delay_ms@ms+1
  6663  002552  ECE5  F01F         	call	_delay_ms	;wreg free
  6664  002556  D014               	goto	l6130
  6665  002558                     l6122:
  6666                           
  6667                           ;gcode.c: 150: else if (Gparsed[1].flag == 'P') {delay_us(i);}
  6668  002558  0100               	movlb	0	; () banked
  6669  00255A  EE20 F004          	lfsr	2,4
  6670  00255E  5195               	movf	execGcode@Gparsed& (0+255),w,b
  6671  002560  26D9               	addwf	fsr2l,f,c
  6672  002562  5196               	movf	(execGcode@Gparsed+1)& (0+255),w,b
  6673  002564  22DA               	addwfc	fsr2h,f,c
  6674  002566  0E50               	movlw	80
  6675  002568  18DE               	xorwf	postinc2,w,c
  6676  00256A  A4D8               	btfss	status,2,c
  6677  00256C  D007               	goto	l6126
  6678                           
  6679                           ; BSR set to: 0
  6680  00256E  C09B  F010         	movff	execGcode@i,delay_us@us
  6681  002572  C09C  F011         	movff	execGcode@i+1,delay_us@us+1
  6682  002576  EC77  F020         	call	_delay_us	;wreg free
  6683  00257A  D002               	goto	l6130
  6684  00257C                     l6126:
  6685                           
  6686                           ;gcode.c: 151: else {return G_INVALID_ARGUMENT;}
  6687  00257C  0E02               	movlw	2
  6688  00257E  0012               	return	
  6689  002580                     l6130:
  6690                           
  6691                           ;gcode.c: 152: return G_SUCCESS;
  6692  002580  0E00               	movlw	0
  6693  002582  0012               	return	
  6694  002584                     l6136:
  6695                           
  6696                           ;gcode.c: 156: axis = Gparsed[1].flag;
  6697  002584  0100               	movlb	0	; () banked
  6698  002586  EE20 F004          	lfsr	2,4
  6699  00258A  5195               	movf	execGcode@Gparsed& (0+255),w,b
  6700  00258C  26D9               	addwf	fsr2l,f,c
  6701  00258E  5196               	movf	(execGcode@Gparsed+1)& (0+255),w,b
  6702  002590  22DA               	addwfc	fsr2h,f,c
  6703  002592  50DF               	movf	indf2,w,c
  6704  002594  0100               	movlb	0	; () banked
  6705  002596  6FA2               	movwf	execGcode@axis& (0+255),b
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;gcode.c: 158: if (axis == 0)
  6709  002598  0100               	movlb	0	; () banked
  6710  00259A  51A2               	movf	execGcode@axis& (0+255),w,b
  6711  00259C  0100               	movlb	0	; () banked
  6712  00259E  A4D8               	btfss	status,2,c
  6713  0025A0  D007               	goto	l6142
  6714                           
  6715                           ; BSR set to: 0
  6716                           ;gcode.c: 159: {
  6717                           ;gcode.c: 161: homeAxis('X');
  6718  0025A2  0E58               	movlw	88
  6719  0025A4  EC33  F020         	call	_homeAxis
  6720                           
  6721                           ;gcode.c: 162: homeAxis('Y');
  6722  0025A8  0E59               	movlw	89
  6723  0025AA  EC33  F020         	call	_homeAxis
  6724                           
  6725                           ;gcode.c: 163: }
  6726  0025AE  D064               	goto	l6178
  6727  0025B0                     l6142:
  6728                           
  6729                           ;gcode.c: 164: else if ( (axis == 'X') || (axis == 'Y') || (axis == 'Z') ) {homeAxis(axi
      +                          s);}
  6730  0025B0  0E58               	movlw	88
  6731  0025B2  0100               	movlb	0	; () banked
  6732  0025B4  19A2               	xorwf	execGcode@axis& (0+255),w,b
  6733  0025B6  B4D8               	btfsc	status,2,c
  6734  0025B8  D00A               	goto	l6148
  6735                           
  6736                           ; BSR set to: 0
  6737  0025BA  0E59               	movlw	89
  6738  0025BC  0100               	movlb	0	; () banked
  6739  0025BE  19A2               	xorwf	execGcode@axis& (0+255),w,b
  6740  0025C0  B4D8               	btfsc	status,2,c
  6741  0025C2  D005               	goto	l6148
  6742                           
  6743                           ; BSR set to: 0
  6744  0025C4  0E5A               	movlw	90
  6745  0025C6  0100               	movlb	0	; () banked
  6746  0025C8  19A2               	xorwf	execGcode@axis& (0+255),w,b
  6747  0025CA  A4D8               	btfss	status,2,c
  6748  0025CC  D005               	goto	l6150
  6749  0025CE                     l6148:
  6750                           
  6751                           ; BSR set to: 0
  6752  0025CE  0100               	movlb	0	; () banked
  6753  0025D0  51A2               	movf	execGcode@axis& (0+255),w,b
  6754  0025D2  EC33  F020         	call	_homeAxis
  6755  0025D6  D050               	goto	l6178
  6756  0025D8                     l6150:
  6757                           
  6758                           ;gcode.c: 165: else {return G_INVALID_ARGUMENT;}
  6759  0025D8  0E02               	movlw	2
  6760  0025DA  0012               	return	
  6761  0025DC                     l6154:
  6762                           
  6763                           ;gcode.c: 169: return G_INVALID_COMMAND;
  6764  0025DC  0E01               	movlw	1
  6765  0025DE  0012               	return	
  6766  0025E0                     l6160:
  6767  0025E0  0100               	movlb	0	; () banked
  6768  0025E2  EE20 F001          	lfsr	2,1
  6769  0025E6  5195               	movf	execGcode@Gparsed& (0+255),w,b
  6770  0025E8  26D9               	addwf	fsr2l,f,c
  6771  0025EA  5196               	movf	(execGcode@Gparsed+1)& (0+255),w,b
  6772  0025EC  22DA               	addwfc	fsr2h,f,c
  6773  0025EE  CFDE F03A          	movff	postinc2,___fttol@f1
  6774  0025F2  CFDE F03B          	movff	postinc2,___fttol@f1+1
  6775  0025F6  CFDD F03C          	movff	postdec2,___fttol@f1+2
  6776  0025FA  EC1C  F019         	call	___fttol	;wreg free
  6777  0025FE  503A               	movf	?___fttol,w,c
  6778                           
  6779                           ; Switch size 1, requested type "space"
  6780                           ; Number of cases is 3, Range of values is 1 to 28
  6781                           ; switch strategies available:
  6782                           ; Name         Instructions Cycles
  6783                           ; simple_byte           10     6 (average)
  6784                           ;	Chosen strategy is simple_byte
  6785  002600  0A01               	xorlw	1	; case 1
  6786  002602  B4D8               	btfsc	status,2,c
  6787  002604  D694               	goto	l6050
  6788  002606  0A05               	xorlw	5	; case 4
  6789  002608  B4D8               	btfsc	status,2,c
  6790  00260A  D781               	goto	l6116
  6791  00260C  0A18               	xorlw	24	; case 28
  6792  00260E  B4D8               	btfsc	status,2,c
  6793  002610  D7B9               	goto	l6136
  6794  002612  D7E4               	goto	l6154
  6795  002614                     l6162:
  6796                           
  6797                           ;gcode.c: 173: else if (Gparsed[0].flag == 'M')
  6798  002614  C095  FFD9         	movff	execGcode@Gparsed,fsr2l
  6799  002618  C096  FFDA         	movff	execGcode@Gparsed+1,fsr2h
  6800  00261C  0E4D               	movlw	77
  6801  00261E  18DE               	xorwf	postinc2,w,c
  6802  002620  B4D8               	btfsc	status,2,c
  6803  002622  D00B               	goto	l6172
  6804  002624  D027               	goto	l6174
  6805  002626                     l242:
  6806                           
  6807                           ;gcode.c: 179: LATDbits.LATD4 = 0;
  6808  002626  988C               	bcf	3980,4,c	;volatile
  6809                           
  6810                           ;gcode.c: 180: break;
  6811  002628  D027               	goto	l6178
  6812  00262A                     l244:
  6813                           
  6814                           ;gcode.c: 183: LATDbits.LATD4 = 1;
  6815  00262A  888C               	bsf	3980,4,c	;volatile
  6816                           
  6817                           ;gcode.c: 184: break;
  6818  00262C  D025               	goto	l6178
  6819  00262E                     l245:
  6820                           
  6821                           ;gcode.c: 187: LATDbits.LATD5 = 1;
  6822  00262E  8A8C               	bsf	3980,5,c	;volatile
  6823                           
  6824                           ;gcode.c: 188: break;
  6825  002630  D023               	goto	l6178
  6826  002632                     l246:
  6827                           
  6828                           ;gcode.c: 191: LATDbits.LATD5 = 0;
  6829  002632  9A8C               	bcf	3980,5,c	;volatile
  6830                           
  6831                           ;gcode.c: 192: break;
  6832  002634  D021               	goto	l6178
  6833  002636                     l6166:
  6834                           
  6835                           ;gcode.c: 195: return G_INVALID_COMMAND;
  6836  002636  0E01               	movlw	1
  6837  002638  0012               	return	
  6838  00263A                     l6172:
  6839  00263A  0100               	movlb	0	; () banked
  6840  00263C  EE20 F001          	lfsr	2,1
  6841  002640  5195               	movf	execGcode@Gparsed& (0+255),w,b
  6842  002642  26D9               	addwf	fsr2l,f,c
  6843  002644  5196               	movf	(execGcode@Gparsed+1)& (0+255),w,b
  6844  002646  22DA               	addwfc	fsr2h,f,c
  6845  002648  CFDE F03A          	movff	postinc2,___fttol@f1
  6846  00264C  CFDE F03B          	movff	postinc2,___fttol@f1+1
  6847  002650  CFDD F03C          	movff	postdec2,___fttol@f1+2
  6848  002654  EC1C  F019         	call	___fttol	;wreg free
  6849  002658  503A               	movf	?___fttol,w,c
  6850                           
  6851                           ; Switch size 1, requested type "space"
  6852                           ; Number of cases is 4, Range of values is 10 to 13
  6853                           ; switch strategies available:
  6854                           ; Name         Instructions Cycles
  6855                           ; simple_byte           13     7 (average)
  6856                           ;	Chosen strategy is simple_byte
  6857  00265A  0A0A               	xorlw	10	; case 10
  6858  00265C  B4D8               	btfsc	status,2,c
  6859  00265E  D7E3               	goto	l242
  6860  002660  0A01               	xorlw	1	; case 11
  6861  002662  B4D8               	btfsc	status,2,c
  6862  002664  D7E2               	goto	l244
  6863  002666  0A07               	xorlw	7	; case 12
  6864  002668  B4D8               	btfsc	status,2,c
  6865  00266A  D7E1               	goto	l245
  6866  00266C  0A01               	xorlw	1	; case 13
  6867  00266E  B4D8               	btfsc	status,2,c
  6868  002670  D7E0               	goto	l246
  6869  002672  D7E1               	goto	l6166
  6870  002674                     l6174:
  6871                           
  6872                           ;gcode.c: 199: else
  6873                           ;gcode.c: 200: {
  6874                           ;gcode.c: 201: return G_INVALID_COMMAND;
  6875  002674  0E01               	movlw	1
  6876  002676  0012               	return	
  6877  002678                     l6178:
  6878                           
  6879                           ;gcode.c: 202: }
  6880                           ;gcode.c: 204: return G_SUCCESS;
  6881  002678  0E00               	movlw	0
  6882  00267A  0012               	return	
  6883  00267C                     __end_of_execGcode:
  6884                           	opt stack 0
  6885                           tblptru	equ	0xFF8
  6886                           tblptrh	equ	0xFF7
  6887                           tblptrl	equ	0xFF6
  6888                           tablat	equ	0xFF5
  6889                           prodh	equ	0xFF4
  6890                           prodl	equ	0xFF3
  6891                           intcon	equ	0xFF2
  6892                           intcon2	equ	0xFF1
  6893                           indf0	equ	0xFEF
  6894                           postinc0	equ	0xFEE
  6895                           fsr0h	equ	0xFEA
  6896                           fsr0l	equ	0xFE9
  6897                           wreg	equ	0xFE8
  6898                           indf1	equ	0xFE7
  6899                           fsr1h	equ	0xFE2
  6900                           fsr1l	equ	0xFE1
  6901                           indf2	equ	0xFDF
  6902                           postinc2	equ	0xFDE
  6903                           postdec2	equ	0xFDD
  6904                           fsr2h	equ	0xFDA
  6905                           fsr2l	equ	0xFD9
  6906                           status	equ	0xFD8
  6907                           
  6908 ;; *************** function _linearMove2Axis *****************
  6909 ;; Defined at:
  6910 ;;		line 448 in file "gcode.c"
  6911 ;; Parameters:    Size  Location     Type
  6912 ;;  x_target        3   24[BANK0 ] enum E4563
  6913 ;;  y_target        3   27[BANK0 ] enum E4563
  6914 ;;  feedrate        2   30[BANK0 ] unsigned short 
  6915 ;; Auto vars:     Size  Location     Type
  6916 ;;  del             3   44[BANK0 ] unsigned short 
  6917 ;;  del_y           3   41[BANK0 ] unsigned short 
  6918 ;;  del_x           3   38[BANK0 ] unsigned short 
  6919 ;;  singlearg       3   32[BANK0 ] unsigned short 
  6920 ;;  calc_delay      2   51[BANK0 ] unsigned short 
  6921 ;;  i               2   49[BANK0 ] unsigned int 
  6922 ;;  steps           2   47[BANK0 ] unsigned int 
  6923 ;;  halfdelay       2    0        unsigned short 
  6924 ;;  singleaxis      1   35[BANK0 ] unsigned char 
  6925 ;; Return value:  Size  Location     Type
  6926 ;;                  1    wreg      enum E4563
  6927 ;; Registers used:
  6928 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6929 ;; Tracked objects:
  6930 ;;		On entry : 0/0
  6931 ;;		On exit  : 0/0
  6932 ;;		Unchanged: 0/0
  6933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6934 ;;      Params:         0       8       0       0       0       0       0       0       0
  6935 ;;      Locals:         0      21       0       0       0       0       0       0       0
  6936 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6937 ;;      Totals:         0      29       0       0       0       0       0       0       0
  6938 ;;Total ram usage:       29 bytes
  6939 ;; Hardware stack levels used:    1
  6940 ;; Hardware stack levels required when called:    5
  6941 ;; This function calls:
  6942 ;;		___ftadd
  6943 ;;		___ftdiv
  6944 ;;		___ftge
  6945 ;;		___ftmul
  6946 ;;		___ftneg
  6947 ;;		___ftsub
  6948 ;;		___fttol
  6949 ;;		___lwdiv
  6950 ;;		___lwtoft
  6951 ;;		_calculate_motordelay
  6952 ;;		_delay_ms
  6953 ;;		_delay_us
  6954 ;;		_linearMove1Axis
  6955 ;; This function is called by:
  6956 ;;		_execGcode
  6957 ;; This function uses a non-reentrant model
  6958 ;;
  6959                           
  6960                           	psect	text26
  6961  0010D2                     __ptext26:
  6962                           	opt stack 0
  6963  0010D2                     _linearMove2Axis:
  6964                           	opt stack 23
  6965                           
  6966                           ;gcode.c: 450: unsigned int i, steps;
  6967                           ;gcode.c: 451: double del_x, del_y, del;
  6968                           ;gcode.c: 452: unsigned short halfdelay, calc_delay;
  6969                           ;gcode.c: 454: char singleaxis;
  6970                           ;gcode.c: 455: double singlearg;
  6971                           ;gcode.c: 460: if ((x_target < 0) || (x_target > (340))) {return G_OUT_OF_BOUNDS;}
  6972                           
  6973                           ;incstack = 0
  6974  0010D2  0100               	movlb	0	; () banked
  6975  0010D4  BF7A               	btfsc	(linearMove2Axis@x_target+2)& (0+255),7,b
  6976  0010D6  D010               	goto	l5654
  6977                           
  6978                           ; BSR set to: 0
  6979  0010D8  0E00               	movlw	0
  6980  0010DA  6E10               	movwf	___ftge@ff1,c
  6981  0010DC  0EAA               	movlw	170
  6982  0010DE  6E11               	movwf	___ftge@ff1+1,c
  6983  0010E0  0E43               	movlw	67
  6984  0010E2  6E12               	movwf	___ftge@ff1+2,c
  6985  0010E4  C078  F013         	movff	linearMove2Axis@x_target,___ftge@ff2
  6986  0010E8  C079  F014         	movff	linearMove2Axis@x_target+1,___ftge@ff2+1
  6987  0010EC  C07A  F015         	movff	linearMove2Axis@x_target+2,___ftge@ff2+2
  6988  0010F0  EC94  F01C         	call	___ftge	;wreg free
  6989  0010F4  B0D8               	btfsc	status,0,c
  6990  0010F6  D002               	goto	l5658
  6991  0010F8                     l5654:
  6992  0010F8  0E03               	movlw	3
  6993  0010FA  0012               	return	
  6994  0010FC                     l5658:
  6995                           
  6996                           ;gcode.c: 461: if ((y_target < 0) || (y_target > (340))) {return G_OUT_OF_BOUNDS;}
  6997  0010FC  0100               	movlb	0	; () banked
  6998  0010FE  BF7D               	btfsc	(linearMove2Axis@y_target+2)& (0+255),7,b
  6999  001100  D010               	goto	l5662
  7000                           
  7001                           ; BSR set to: 0
  7002  001102  0E00               	movlw	0
  7003  001104  6E10               	movwf	___ftge@ff1,c
  7004  001106  0EAA               	movlw	170
  7005  001108  6E11               	movwf	___ftge@ff1+1,c
  7006  00110A  0E43               	movlw	67
  7007  00110C  6E12               	movwf	___ftge@ff1+2,c
  7008  00110E  C07B  F013         	movff	linearMove2Axis@y_target,___ftge@ff2
  7009  001112  C07C  F014         	movff	linearMove2Axis@y_target+1,___ftge@ff2+1
  7010  001116  C07D  F015         	movff	linearMove2Axis@y_target+2,___ftge@ff2+2
  7011  00111A  EC94  F01C         	call	___ftge	;wreg free
  7012  00111E  B0D8               	btfsc	status,0,c
  7013  001120  D002               	goto	l5666
  7014  001122                     l5662:
  7015  001122  0E03               	movlw	3
  7016  001124  0012               	return	
  7017  001126                     l5666:
  7018                           
  7019                           ;gcode.c: 469: del_x = x_target - XPOS;
  7020  001126  C0E3  F010         	movff	_XPOS,___ftneg@f1
  7021  00112A  C0E4  F011         	movff	_XPOS+1,___ftneg@f1+1
  7022  00112E  C0E5  F012         	movff	_XPOS+2,___ftneg@f1+2
  7023  001132  EC31  F021         	call	___ftneg	;wreg free
  7024  001136  C010  F03D         	movff	?___ftneg,___ftadd@f1
  7025  00113A  C011  F03E         	movff	?___ftneg+1,___ftadd@f1+1
  7026  00113E  C012  F03F         	movff	?___ftneg+2,___ftadd@f1+2
  7027  001142  C078  F040         	movff	linearMove2Axis@x_target,___ftadd@f2
  7028  001146  C079  F041         	movff	linearMove2Axis@x_target+1,___ftadd@f2+1
  7029  00114A  C07A  F042         	movff	linearMove2Axis@x_target+2,___ftadd@f2+2
  7030  00114E  ECF0  F016         	call	___ftadd	;wreg free
  7031  001152  C03D  F086         	movff	?___ftadd,linearMove2Axis@del_x
  7032  001156  C03E  F087         	movff	?___ftadd+1,linearMove2Axis@del_x+1
  7033  00115A  C03F  F088         	movff	?___ftadd+2,linearMove2Axis@del_x+2
  7034                           
  7035                           ;gcode.c: 470: if (del_x > 0) {LATAbits.LATA4 = 1;}
  7036  00115E  0E00               	movlw	0
  7037  001160  6E10               	movwf	___ftge@ff1,c
  7038  001162  0E00               	movlw	0
  7039  001164  6E11               	movwf	___ftge@ff1+1,c
  7040  001166  0E00               	movlw	0
  7041  001168  6E12               	movwf	___ftge@ff1+2,c
  7042  00116A  C086  F013         	movff	linearMove2Axis@del_x,___ftge@ff2
  7043  00116E  C087  F014         	movff	linearMove2Axis@del_x+1,___ftge@ff2+1
  7044  001172  C088  F015         	movff	linearMove2Axis@del_x+2,___ftge@ff2+2
  7045  001176  EC94  F01C         	call	___ftge	;wreg free
  7046  00117A  B0D8               	btfsc	status,0,c
  7047  00117C  D002               	goto	l5670
  7048  00117E  8889               	bsf	3977,4,c	;volatile
  7049  001180  D015               	goto	l297
  7050  001182                     l5670:
  7051                           
  7052                           ;gcode.c: 471: else {del_x *= -1; LATAbits.LATA4 = 0;}
  7053  001182  C086  F024         	movff	linearMove2Axis@del_x,___ftmul@f1
  7054  001186  C087  F025         	movff	linearMove2Axis@del_x+1,___ftmul@f1+1
  7055  00118A  C088  F026         	movff	linearMove2Axis@del_x+2,___ftmul@f1+2
  7056  00118E  0E00               	movlw	0
  7057  001190  6E27               	movwf	___ftmul@f2,c
  7058  001192  0E80               	movlw	128
  7059  001194  6E28               	movwf	___ftmul@f2+1,c
  7060  001196  0EBF               	movlw	191
  7061  001198  6E29               	movwf	___ftmul@f2+2,c
  7062  00119A  EC2D  F01A         	call	___ftmul	;wreg free
  7063  00119E  C024  F086         	movff	?___ftmul,linearMove2Axis@del_x
  7064  0011A2  C025  F087         	movff	?___ftmul+1,linearMove2Axis@del_x+1
  7065  0011A6  C026  F088         	movff	?___ftmul+2,linearMove2Axis@del_x+2
  7066  0011AA  9889               	bcf	3977,4,c	;volatile
  7067  0011AC                     l297:
  7068                           
  7069                           ;gcode.c: 472: del_y = y_target - YPOS;
  7070  0011AC  C0E6  F010         	movff	_YPOS,___ftneg@f1
  7071  0011B0  C0E7  F011         	movff	_YPOS+1,___ftneg@f1+1
  7072  0011B4  C0E8  F012         	movff	_YPOS+2,___ftneg@f1+2
  7073  0011B8  EC31  F021         	call	___ftneg	;wreg free
  7074  0011BC  C010  F03D         	movff	?___ftneg,___ftadd@f1
  7075  0011C0  C011  F03E         	movff	?___ftneg+1,___ftadd@f1+1
  7076  0011C4  C012  F03F         	movff	?___ftneg+2,___ftadd@f1+2
  7077  0011C8  C07B  F040         	movff	linearMove2Axis@y_target,___ftadd@f2
  7078  0011CC  C07C  F041         	movff	linearMove2Axis@y_target+1,___ftadd@f2+1
  7079  0011D0  C07D  F042         	movff	linearMove2Axis@y_target+2,___ftadd@f2+2
  7080  0011D4  ECF0  F016         	call	___ftadd	;wreg free
  7081  0011D8  C03D  F089         	movff	?___ftadd,linearMove2Axis@del_y
  7082  0011DC  C03E  F08A         	movff	?___ftadd+1,linearMove2Axis@del_y+1
  7083  0011E0  C03F  F08B         	movff	?___ftadd+2,linearMove2Axis@del_y+2
  7084                           
  7085                           ;gcode.c: 473: if (del_y > 0) {LATEbits.LATE0 = 1; LATCbits.LATC2 = 1;}
  7086  0011E4  0E00               	movlw	0
  7087  0011E6  6E10               	movwf	___ftge@ff1,c
  7088  0011E8  0E00               	movlw	0
  7089  0011EA  6E11               	movwf	___ftge@ff1+1,c
  7090  0011EC  0E00               	movlw	0
  7091  0011EE  6E12               	movwf	___ftge@ff1+2,c
  7092  0011F0  C089  F013         	movff	linearMove2Axis@del_y,___ftge@ff2
  7093  0011F4  C08A  F014         	movff	linearMove2Axis@del_y+1,___ftge@ff2+1
  7094  0011F8  C08B  F015         	movff	linearMove2Axis@del_y+2,___ftge@ff2+2
  7095  0011FC  EC94  F01C         	call	___ftge	;wreg free
  7096  001200  B0D8               	btfsc	status,0,c
  7097  001202  D003               	goto	l5676
  7098  001204  808D               	bsf	3981,0,c	;volatile
  7099  001206  848B               	bsf	3979,2,c	;volatile
  7100  001208  D016               	goto	l299
  7101  00120A                     l5676:
  7102                           
  7103                           ;gcode.c: 474: else {del_y *= -1; LATEbits.LATE0 = 0; LATCbits.LATC2 = 0;}
  7104  00120A  C089  F024         	movff	linearMove2Axis@del_y,___ftmul@f1
  7105  00120E  C08A  F025         	movff	linearMove2Axis@del_y+1,___ftmul@f1+1
  7106  001212  C08B  F026         	movff	linearMove2Axis@del_y+2,___ftmul@f1+2
  7107  001216  0E00               	movlw	0
  7108  001218  6E27               	movwf	___ftmul@f2,c
  7109  00121A  0E80               	movlw	128
  7110  00121C  6E28               	movwf	___ftmul@f2+1,c
  7111  00121E  0EBF               	movlw	191
  7112  001220  6E29               	movwf	___ftmul@f2+2,c
  7113  001222  EC2D  F01A         	call	___ftmul	;wreg free
  7114  001226  C024  F089         	movff	?___ftmul,linearMove2Axis@del_y
  7115  00122A  C025  F08A         	movff	?___ftmul+1,linearMove2Axis@del_y+1
  7116  00122E  C026  F08B         	movff	?___ftmul+2,linearMove2Axis@del_y+2
  7117  001232  908D               	bcf	3981,0,c	;volatile
  7118  001234  948B               	bcf	3979,2,c	;volatile
  7119  001236                     l299:
  7120                           
  7121                           ;gcode.c: 477: if (del_x > del_y)
  7122  001236  C089  F010         	movff	linearMove2Axis@del_y,___ftge@ff1
  7123  00123A  C08A  F011         	movff	linearMove2Axis@del_y+1,___ftge@ff1+1
  7124  00123E  C08B  F012         	movff	linearMove2Axis@del_y+2,___ftge@ff1+2
  7125  001242  C086  F013         	movff	linearMove2Axis@del_x,___ftge@ff2
  7126  001246  C087  F014         	movff	linearMove2Axis@del_x+1,___ftge@ff2+1
  7127  00124A  C088  F015         	movff	linearMove2Axis@del_x+2,___ftge@ff2+2
  7128  00124E  EC94  F01C         	call	___ftge	;wreg free
  7129  001252  B0D8               	btfsc	status,0,c
  7130  001254  D010               	goto	l300
  7131                           
  7132                           ;gcode.c: 478: {
  7133                           ;gcode.c: 479: del = del_y;
  7134  001256  C089  F08C         	movff	linearMove2Axis@del_y,linearMove2Axis@del
  7135  00125A  C08A  F08D         	movff	linearMove2Axis@del_y+1,linearMove2Axis@del+1
  7136  00125E  C08B  F08E         	movff	linearMove2Axis@del_y+2,linearMove2Axis@del+2
  7137                           
  7138                           ;gcode.c: 481: singleaxis = 'X';
  7139  001262  0E58               	movlw	88
  7140  001264  0100               	movlb	0	; () banked
  7141  001266  6F83               	movwf	linearMove2Axis@singleaxis& (0+255),b
  7142                           
  7143                           ; BSR set to: 0
  7144                           ;gcode.c: 482: singlearg = x_target;
  7145  001268  C078  F080         	movff	linearMove2Axis@x_target,linearMove2Axis@singlearg
  7146  00126C  C079  F081         	movff	linearMove2Axis@x_target+1,linearMove2Axis@singlearg+1
  7147  001270  C07A  F082         	movff	linearMove2Axis@x_target+2,linearMove2Axis@singlearg+2
  7148                           
  7149                           ;gcode.c: 483: }
  7150  001274  D00F               	goto	l5692
  7151  001276                     l300:
  7152                           
  7153                           ;gcode.c: 484: else
  7154                           ;gcode.c: 485: {
  7155                           ;gcode.c: 486: del = del_x;
  7156  001276  C086  F08C         	movff	linearMove2Axis@del_x,linearMove2Axis@del
  7157  00127A  C087  F08D         	movff	linearMove2Axis@del_x+1,linearMove2Axis@del+1
  7158  00127E  C088  F08E         	movff	linearMove2Axis@del_x+2,linearMove2Axis@del+2
  7159                           
  7160                           ;gcode.c: 488: singleaxis = 'Y';
  7161  001282  0E59               	movlw	89
  7162  001284  0100               	movlb	0	; () banked
  7163  001286  6F83               	movwf	linearMove2Axis@singleaxis& (0+255),b
  7164                           
  7165                           ; BSR set to: 0
  7166                           ;gcode.c: 489: singlearg = y_target;
  7167  001288  C07B  F080         	movff	linearMove2Axis@y_target,linearMove2Axis@singlearg
  7168  00128C  C07C  F081         	movff	linearMove2Axis@y_target+1,linearMove2Axis@singlearg+1
  7169  001290  C07D  F082         	movff	linearMove2Axis@y_target+2,linearMove2Axis@singlearg+2
  7170  001294                     l5692:
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;gcode.c: 490: }
  7174                           ;gcode.c: 493: if (LATAbits.LATA4 == 1) {XPOS += del;}
  7175  001294  A889               	btfss	3977,4,c	;volatile
  7176  001296  D015               	goto	l5696
  7177                           
  7178                           ; BSR set to: 0
  7179  001298  C0E3  F03D         	movff	_XPOS,___ftadd@f1
  7180  00129C  C0E4  F03E         	movff	_XPOS+1,___ftadd@f1+1
  7181  0012A0  C0E5  F03F         	movff	_XPOS+2,___ftadd@f1+2
  7182  0012A4  C08C  F040         	movff	linearMove2Axis@del,___ftadd@f2
  7183  0012A8  C08D  F041         	movff	linearMove2Axis@del+1,___ftadd@f2+1
  7184  0012AC  C08E  F042         	movff	linearMove2Axis@del+2,___ftadd@f2+2
  7185  0012B0  ECF0  F016         	call	___ftadd	;wreg free
  7186  0012B4  C03D  F0E3         	movff	?___ftadd,_XPOS
  7187  0012B8  C03E  F0E4         	movff	?___ftadd+1,_XPOS+1
  7188  0012BC  C03F  F0E5         	movff	?___ftadd+2,_XPOS+2
  7189  0012C0  D014               	goto	l5698
  7190  0012C2                     l5696:
  7191                           
  7192                           ;gcode.c: 494: else {XPOS -= del;}
  7193  0012C2  C0E3  F063         	movff	_XPOS,___ftsub@f1
  7194  0012C6  C0E4  F064         	movff	_XPOS+1,___ftsub@f1+1
  7195  0012CA  C0E5  F065         	movff	_XPOS+2,___ftsub@f1+2
  7196  0012CE  C08C  F066         	movff	linearMove2Axis@del,___ftsub@f2
  7197  0012D2  C08D  F067         	movff	linearMove2Axis@del+1,___ftsub@f2+1
  7198  0012D6  C08E  F068         	movff	linearMove2Axis@del+2,___ftsub@f2+2
  7199  0012DA  EC0D  F020         	call	___ftsub	;wreg free
  7200  0012DE  C063  F0E3         	movff	?___ftsub,_XPOS
  7201  0012E2  C064  F0E4         	movff	?___ftsub+1,_XPOS+1
  7202  0012E6  C065  F0E5         	movff	?___ftsub+2,_XPOS+2
  7203  0012EA                     l5698:
  7204                           
  7205                           ;gcode.c: 495: if (LATEbits.LATE0 == 1) {YPOS += del;}
  7206  0012EA  A08D               	btfss	3981,0,c	;volatile
  7207  0012EC  D015               	goto	l5702
  7208  0012EE  C0E6  F03D         	movff	_YPOS,___ftadd@f1
  7209  0012F2  C0E7  F03E         	movff	_YPOS+1,___ftadd@f1+1
  7210  0012F6  C0E8  F03F         	movff	_YPOS+2,___ftadd@f1+2
  7211  0012FA  C08C  F040         	movff	linearMove2Axis@del,___ftadd@f2
  7212  0012FE  C08D  F041         	movff	linearMove2Axis@del+1,___ftadd@f2+1
  7213  001302  C08E  F042         	movff	linearMove2Axis@del+2,___ftadd@f2+2
  7214  001306  ECF0  F016         	call	___ftadd	;wreg free
  7215  00130A  C03D  F0E6         	movff	?___ftadd,_YPOS
  7216  00130E  C03E  F0E7         	movff	?___ftadd+1,_YPOS+1
  7217  001312  C03F  F0E8         	movff	?___ftadd+2,_YPOS+2
  7218  001316  D014               	goto	l305
  7219  001318                     l5702:
  7220                           
  7221                           ;gcode.c: 496: else {YPOS -= del;}
  7222  001318  C0E6  F063         	movff	_YPOS,___ftsub@f1
  7223  00131C  C0E7  F064         	movff	_YPOS+1,___ftsub@f1+1
  7224  001320  C0E8  F065         	movff	_YPOS+2,___ftsub@f1+2
  7225  001324  C08C  F066         	movff	linearMove2Axis@del,___ftsub@f2
  7226  001328  C08D  F067         	movff	linearMove2Axis@del+1,___ftsub@f2+1
  7227  00132C  C08E  F068         	movff	linearMove2Axis@del+2,___ftsub@f2+2
  7228  001330  EC0D  F020         	call	___ftsub	;wreg free
  7229  001334  C063  F0E6         	movff	?___ftsub,_YPOS
  7230  001338  C064  F0E7         	movff	?___ftsub+1,_YPOS+1
  7231  00133C  C065  F0E8         	movff	?___ftsub+2,_YPOS+2
  7232  001340                     l305:
  7233                           
  7234                           ;gcode.c: 497: delay_ms(30);
  7235  001340  0E00               	movlw	0
  7236  001342  6E11               	movwf	delay_ms@ms+1,c
  7237  001344  0E1E               	movlw	30
  7238  001346  6E10               	movwf	delay_ms@ms,c
  7239  001348  ECE5  F01F         	call	_delay_ms	;wreg free
  7240                           
  7241                           ;gcode.c: 501: steps = del*(6.267176 * (16));
  7242  00134C  0E8D               	movlw	141
  7243  00134E  6E27               	movwf	___ftmul@f2,c
  7244  001350  0EC8               	movlw	200
  7245  001352  6E28               	movwf	___ftmul@f2+1,c
  7246  001354  0E42               	movlw	66
  7247  001356  6E29               	movwf	___ftmul@f2+2,c
  7248  001358  C08C  F024         	movff	linearMove2Axis@del,___ftmul@f1
  7249  00135C  C08D  F025         	movff	linearMove2Axis@del+1,___ftmul@f1+1
  7250  001360  C08E  F026         	movff	linearMove2Axis@del+2,___ftmul@f1+2
  7251  001364  EC2D  F01A         	call	___ftmul	;wreg free
  7252  001368  C024  F03A         	movff	?___ftmul,___fttol@f1
  7253  00136C  C025  F03B         	movff	?___ftmul+1,___fttol@f1+1
  7254  001370  C026  F03C         	movff	?___ftmul+2,___fttol@f1+2
  7255  001374  EC1C  F019         	call	___fttol	;wreg free
  7256  001378  C03A  F08F         	movff	?___fttol,linearMove2Axis@steps
  7257  00137C  C03B  F090         	movff	?___fttol+1,linearMove2Axis@steps+1
  7258                           
  7259                           ;gcode.c: 503: if (steps < (feedrate/10))
  7260  001380  C07E  F024         	movff	linearMove2Axis@feedrate,___lwdiv@dividend
  7261  001384  C07F  F025         	movff	linearMove2Axis@feedrate+1,___lwdiv@dividend+1
  7262  001388  0E00               	movlw	0
  7263  00138A  6E27               	movwf	___lwdiv@divisor+1,c
  7264  00138C  0E0A               	movlw	10
  7265  00138E  6E26               	movwf	___lwdiv@divisor,c
  7266  001390  EC44  F01F         	call	___lwdiv	;wreg free
  7267  001394  5024               	movf	?___lwdiv,w,c
  7268  001396  0100               	movlb	0	; () banked
  7269  001398  5D8F               	subwf	linearMove2Axis@steps& (0+255),w,b
  7270  00139A  5025               	movf	?___lwdiv+1,w,c
  7271  00139C  0100               	movlb	0	; () banked
  7272  00139E  5990               	subwfb	(linearMove2Axis@steps+1)& (0+255),w,b
  7273  0013A0  B0D8               	btfsc	status,0,c
  7274  0013A2  D058               	goto	l5730
  7275                           
  7276                           ; BSR set to: 0
  7277                           ;gcode.c: 504: {
  7278                           ;gcode.c: 505: for (i=0; i<steps; ++i)
  7279  0013A4  0E00               	movlw	0
  7280  0013A6  0100               	movlb	0	; () banked
  7281  0013A8  6F92               	movwf	(linearMove2Axis@i+1)& (0+255),b
  7282  0013AA  0E00               	movlw	0
  7283  0013AC  6F91               	movwf	linearMove2Axis@i& (0+255),b
  7284  0013AE  D047               	goto	l5728
  7285  0013B0                     l5706:
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;gcode.c: 506: {
  7289                           ;gcode.c: 507: calc_delay = calculate_motordelay(feedrate, i, steps) * 1.4142136;
  7290  0013B0  C08F  F06A         	movff	linearMove2Axis@steps,calculate_motordelay@steps
  7291  0013B4  C090  F06B         	movff	linearMove2Axis@steps+1,calculate_motordelay@steps+1
  7292  0013B8  C091  F068         	movff	linearMove2Axis@i,calculate_motordelay@i
  7293  0013BC  C092  F069         	movff	linearMove2Axis@i+1,calculate_motordelay@i+1
  7294  0013C0  C07E  F066         	movff	linearMove2Axis@feedrate,calculate_motordelay@feedrate
  7295  0013C4  C07F  F067         	movff	linearMove2Axis@feedrate+1,calculate_motordelay@feedrate+1
  7296  0013C8  EC3E  F013         	call	_calculate_motordelay	;wreg free
  7297  0013CC  C066  F084         	movff	?_calculate_motordelay,_linearMove2Axis$2114
  7298  0013D0  C067  F085         	movff	?_calculate_motordelay+1,_linearMove2Axis$2114+1
  7299                           
  7300                           ;gcode.c: 506: {
  7301                           ;gcode.c: 507: calc_delay = calculate_motordelay(feedrate, i, steps) * 1.4142136;
  7302  0013D4  0E05               	movlw	5
  7303  0013D6  6E27               	movwf	___ftmul@f2,c
  7304  0013D8  0EB5               	movlw	181
  7305  0013DA  6E28               	movwf	___ftmul@f2+1,c
  7306  0013DC  0E3F               	movlw	63
  7307  0013DE  6E29               	movwf	___ftmul@f2+2,c
  7308  0013E0  C084  F018         	movff	_linearMove2Axis$2114,___lwtoft@c
  7309  0013E4  C085  F019         	movff	_linearMove2Axis$2114+1,___lwtoft@c+1
  7310  0013E8  EC1F  F021         	call	___lwtoft	;wreg free
  7311  0013EC  C018  F024         	movff	?___lwtoft,___ftmul@f1
  7312  0013F0  C019  F025         	movff	?___lwtoft+1,___ftmul@f1+1
  7313  0013F4  C01A  F026         	movff	?___lwtoft+2,___ftmul@f1+2
  7314  0013F8  EC2D  F01A         	call	___ftmul	;wreg free
  7315  0013FC  C024  F03A         	movff	?___ftmul,___fttol@f1
  7316  001400  C025  F03B         	movff	?___ftmul+1,___fttol@f1+1
  7317  001404  C026  F03C         	movff	?___ftmul+2,___fttol@f1+2
  7318  001408  EC1C  F019         	call	___fttol	;wreg free
  7319  00140C  C03A  F093         	movff	?___fttol,linearMove2Axis@calc_delay
  7320  001410  C03B  F094         	movff	?___fttol+1,linearMove2Axis@calc_delay+1
  7321                           
  7322                           ;gcode.c: 510: LATAbits.LATA5 = 1;
  7323  001414  8A89               	bsf	3977,5,c	;volatile
  7324                           
  7325                           ;gcode.c: 511: LATEbits.LATE1 = 1;
  7326  001416  828D               	bsf	3981,1,c	;volatile
  7327                           
  7328                           ;gcode.c: 512: LATCbits.LATC1 = 1;
  7329  001418  828B               	bsf	3979,1,c	;volatile
  7330                           
  7331                           ;gcode.c: 513: delay_us(calc_delay);
  7332  00141A  C093  F010         	movff	linearMove2Axis@calc_delay,delay_us@us
  7333  00141E  C094  F011         	movff	linearMove2Axis@calc_delay+1,delay_us@us+1
  7334  001422  EC77  F020         	call	_delay_us	;wreg free
  7335                           
  7336                           ;gcode.c: 514: LATAbits.LATA5 = 0;
  7337  001426  9A89               	bcf	3977,5,c	;volatile
  7338                           
  7339                           ;gcode.c: 515: LATEbits.LATE1 = 0;
  7340  001428  928D               	bcf	3981,1,c	;volatile
  7341                           
  7342                           ;gcode.c: 516: LATCbits.LATC1 = 0;
  7343  00142A  928B               	bcf	3979,1,c	;volatile
  7344                           
  7345                           ;gcode.c: 517: delay_us(calc_delay);
  7346  00142C  C093  F010         	movff	linearMove2Axis@calc_delay,delay_us@us
  7347  001430  C094  F011         	movff	linearMove2Axis@calc_delay+1,delay_us@us+1
  7348  001434  EC77  F020         	call	_delay_us	;wreg free
  7349  001438  0100               	movlb	0	; () banked
  7350  00143A  4B91               	infsnz	linearMove2Axis@i& (0+255),f,b
  7351  00143C  2B92               	incf	(linearMove2Axis@i+1)& (0+255),f,b
  7352  00143E                     l5728:
  7353                           
  7354                           ; BSR set to: 0
  7355  00143E  0100               	movlb	0	; () banked
  7356  001440  518F               	movf	linearMove2Axis@steps& (0+255),w,b
  7357  001442  0100               	movlb	0	; () banked
  7358  001444  5D91               	subwf	linearMove2Axis@i& (0+255),w,b
  7359  001446  0100               	movlb	0	; () banked
  7360  001448  5190               	movf	(linearMove2Axis@steps+1)& (0+255),w,b
  7361  00144A  0100               	movlb	0	; () banked
  7362  00144C  5992               	subwfb	(linearMove2Axis@i+1)& (0+255),w,b
  7363  00144E  B0D8               	btfsc	status,0,c
  7364  001450  D124               	goto	l5794
  7365  001452  D7AE               	goto	l5706
  7366  001454                     l5730:
  7367                           
  7368                           ; BSR set to: 0
  7369                           ;gcode.c: 520: else
  7370                           ;gcode.c: 521: {
  7371                           ;gcode.c: 522: for (i=0; i<(feedrate/20); ++i)
  7372  001454  0E00               	movlw	0
  7373  001456  0100               	movlb	0	; () banked
  7374  001458  6F92               	movwf	(linearMove2Axis@i+1)& (0+255),b
  7375  00145A  0E00               	movlw	0
  7376  00145C  6F91               	movwf	linearMove2Axis@i& (0+255),b
  7377  00145E  D047               	goto	l5754
  7378  001460                     l5732:
  7379                           
  7380                           ; BSR set to: 0
  7381                           ;gcode.c: 523: {
  7382                           ;gcode.c: 524: calc_delay = calculate_motordelay(feedrate, i, steps) * 1.4142136;
  7383  001460  C08F  F06A         	movff	linearMove2Axis@steps,calculate_motordelay@steps
  7384  001464  C090  F06B         	movff	linearMove2Axis@steps+1,calculate_motordelay@steps+1
  7385  001468  C091  F068         	movff	linearMove2Axis@i,calculate_motordelay@i
  7386  00146C  C092  F069         	movff	linearMove2Axis@i+1,calculate_motordelay@i+1
  7387  001470  C07E  F066         	movff	linearMove2Axis@feedrate,calculate_motordelay@feedrate
  7388  001474  C07F  F067         	movff	linearMove2Axis@feedrate+1,calculate_motordelay@feedrate+1
  7389  001478  EC3E  F013         	call	_calculate_motordelay	;wreg free
  7390  00147C  C066  F084         	movff	?_calculate_motordelay,_linearMove2Axis$2114
  7391  001480  C067  F085         	movff	?_calculate_motordelay+1,_linearMove2Axis$2114+1
  7392                           
  7393                           ;gcode.c: 523: {
  7394                           ;gcode.c: 524: calc_delay = calculate_motordelay(feedrate, i, steps) * 1.4142136;
  7395  001484  0E05               	movlw	5
  7396  001486  6E27               	movwf	___ftmul@f2,c
  7397  001488  0EB5               	movlw	181
  7398  00148A  6E28               	movwf	___ftmul@f2+1,c
  7399  00148C  0E3F               	movlw	63
  7400  00148E  6E29               	movwf	___ftmul@f2+2,c
  7401  001490  C084  F018         	movff	_linearMove2Axis$2114,___lwtoft@c
  7402  001494  C085  F019         	movff	_linearMove2Axis$2114+1,___lwtoft@c+1
  7403  001498  EC1F  F021         	call	___lwtoft	;wreg free
  7404  00149C  C018  F024         	movff	?___lwtoft,___ftmul@f1
  7405  0014A0  C019  F025         	movff	?___lwtoft+1,___ftmul@f1+1
  7406  0014A4  C01A  F026         	movff	?___lwtoft+2,___ftmul@f1+2
  7407  0014A8  EC2D  F01A         	call	___ftmul	;wreg free
  7408  0014AC  C024  F03A         	movff	?___ftmul,___fttol@f1
  7409  0014B0  C025  F03B         	movff	?___ftmul+1,___fttol@f1+1
  7410  0014B4  C026  F03C         	movff	?___ftmul+2,___fttol@f1+2
  7411  0014B8  EC1C  F019         	call	___fttol	;wreg free
  7412  0014BC  C03A  F093         	movff	?___fttol,linearMove2Axis@calc_delay
  7413  0014C0  C03B  F094         	movff	?___fttol+1,linearMove2Axis@calc_delay+1
  7414                           
  7415                           ;gcode.c: 526: LATAbits.LATA5 = 1;
  7416  0014C4  8A89               	bsf	3977,5,c	;volatile
  7417                           
  7418                           ;gcode.c: 527: LATEbits.LATE1 = 1;
  7419  0014C6  828D               	bsf	3981,1,c	;volatile
  7420                           
  7421                           ;gcode.c: 528: LATCbits.LATC1 = 1;
  7422  0014C8  828B               	bsf	3979,1,c	;volatile
  7423                           
  7424                           ;gcode.c: 529: delay_us(calc_delay);
  7425  0014CA  C093  F010         	movff	linearMove2Axis@calc_delay,delay_us@us
  7426  0014CE  C094  F011         	movff	linearMove2Axis@calc_delay+1,delay_us@us+1
  7427  0014D2  EC77  F020         	call	_delay_us	;wreg free
  7428                           
  7429                           ;gcode.c: 530: LATAbits.LATA5 = 0;
  7430  0014D6  9A89               	bcf	3977,5,c	;volatile
  7431                           
  7432                           ;gcode.c: 531: LATEbits.LATE1 = 0;
  7433  0014D8  928D               	bcf	3981,1,c	;volatile
  7434                           
  7435                           ;gcode.c: 532: LATCbits.LATC1 = 0;
  7436  0014DA  928B               	bcf	3979,1,c	;volatile
  7437                           
  7438                           ;gcode.c: 533: delay_us(calc_delay);
  7439  0014DC  C093  F010         	movff	linearMove2Axis@calc_delay,delay_us@us
  7440  0014E0  C094  F011         	movff	linearMove2Axis@calc_delay+1,delay_us@us+1
  7441  0014E4  EC77  F020         	call	_delay_us	;wreg free
  7442  0014E8  0100               	movlb	0	; () banked
  7443  0014EA  4B91               	infsnz	linearMove2Axis@i& (0+255),f,b
  7444  0014EC  2B92               	incf	(linearMove2Axis@i+1)& (0+255),f,b
  7445  0014EE                     l5754:
  7446                           
  7447                           ; BSR set to: 0
  7448  0014EE  C07E  F024         	movff	linearMove2Axis@feedrate,___lwdiv@dividend
  7449  0014F2  C07F  F025         	movff	linearMove2Axis@feedrate+1,___lwdiv@dividend+1
  7450  0014F6  0E00               	movlw	0
  7451  0014F8  6E27               	movwf	___lwdiv@divisor+1,c
  7452  0014FA  0E14               	movlw	20
  7453  0014FC  6E26               	movwf	___lwdiv@divisor,c
  7454  0014FE  EC44  F01F         	call	___lwdiv	;wreg free
  7455  001502  5024               	movf	?___lwdiv,w,c
  7456  001504  0100               	movlb	0	; () banked
  7457  001506  5D91               	subwf	linearMove2Axis@i& (0+255),w,b
  7458  001508  5025               	movf	?___lwdiv+1,w,c
  7459  00150A  0100               	movlb	0	; () banked
  7460  00150C  5992               	subwfb	(linearMove2Axis@i+1)& (0+255),w,b
  7461  00150E  A0D8               	btfss	status,0,c
  7462  001510  D7A7               	goto	l5732
  7463                           
  7464                           ; BSR set to: 0
  7465                           ;gcode.c: 534: }
  7466                           ;gcode.c: 535: calc_delay = (30000000 / (6.267176 * (16)))/feedrate;
  7467                           
  7468                           ; BSR set to: 0
  7469  001512  C07E  F018         	movff	linearMove2Axis@feedrate,___lwtoft@c
  7470  001516  C07F  F019         	movff	linearMove2Axis@feedrate+1,___lwtoft@c+1
  7471  00151A  EC1F  F021         	call	___lwtoft	;wreg free
  7472  00151E  C018  F01F         	movff	?___lwtoft,___ftdiv@f2
  7473  001522  C019  F020         	movff	?___lwtoft+1,___ftdiv@f2+1
  7474  001526  C01A  F021         	movff	?___lwtoft+2,___ftdiv@f2+2
  7475  00152A  0E15               	movlw	21
  7476  00152C  6E1C               	movwf	___ftdiv@f1,c
  7477  00152E  0E92               	movlw	146
  7478  001530  6E1D               	movwf	___ftdiv@f1+1,c
  7479  001532  0E48               	movlw	72
  7480  001534  6E1E               	movwf	___ftdiv@f1+2,c
  7481  001536  ECA7  F01A         	call	___ftdiv	;wreg free
  7482  00153A  C01C  F03A         	movff	?___ftdiv,___fttol@f1
  7483  00153E  C01D  F03B         	movff	?___ftdiv+1,___fttol@f1+1
  7484  001542  C01E  F03C         	movff	?___ftdiv+2,___fttol@f1+2
  7485  001546  EC1C  F019         	call	___fttol	;wreg free
  7486  00154A  C03A  F093         	movff	?___fttol,linearMove2Axis@calc_delay
  7487  00154E  C03B  F094         	movff	?___fttol+1,linearMove2Axis@calc_delay+1
  7488                           
  7489                           ;gcode.c: 536: calc_delay *= 1.4142136;
  7490  001552  0E05               	movlw	5
  7491  001554  6E27               	movwf	___ftmul@f2,c
  7492  001556  0EB5               	movlw	181
  7493  001558  6E28               	movwf	___ftmul@f2+1,c
  7494  00155A  0E3F               	movlw	63
  7495  00155C  6E29               	movwf	___ftmul@f2+2,c
  7496  00155E  C093  F018         	movff	linearMove2Axis@calc_delay,___lwtoft@c
  7497  001562  C094  F019         	movff	linearMove2Axis@calc_delay+1,___lwtoft@c+1
  7498  001566  EC1F  F021         	call	___lwtoft	;wreg free
  7499  00156A  C018  F024         	movff	?___lwtoft,___ftmul@f1
  7500  00156E  C019  F025         	movff	?___lwtoft+1,___ftmul@f1+1
  7501  001572  C01A  F026         	movff	?___lwtoft+2,___ftmul@f1+2
  7502  001576  EC2D  F01A         	call	___ftmul	;wreg free
  7503  00157A  C024  F03A         	movff	?___ftmul,___fttol@f1
  7504  00157E  C025  F03B         	movff	?___ftmul+1,___fttol@f1+1
  7505  001582  C026  F03C         	movff	?___ftmul+2,___fttol@f1+2
  7506  001586  EC1C  F019         	call	___fttol	;wreg free
  7507  00158A  C03A  F093         	movff	?___fttol,linearMove2Axis@calc_delay
  7508  00158E  C03B  F094         	movff	?___fttol+1,linearMove2Axis@calc_delay+1
  7509                           
  7510                           ;gcode.c: 537: for (; i<=steps-(feedrate/20); ++i)
  7511  001592  D015               	goto	l5768
  7512  001594                     l315:
  7513                           
  7514                           ; BSR set to: 0
  7515                           ;gcode.c: 538: {
  7516                           ;gcode.c: 539: LATAbits.LATA5 = 1;
  7517  001594  8A89               	bsf	3977,5,c	;volatile
  7518                           
  7519                           ;gcode.c: 540: LATEbits.LATE1 = 1;
  7520  001596  828D               	bsf	3981,1,c	;volatile
  7521                           
  7522                           ;gcode.c: 541: LATCbits.LATC1 = 1;
  7523  001598  828B               	bsf	3979,1,c	;volatile
  7524                           
  7525                           ; BSR set to: 0
  7526                           ;gcode.c: 542: delay_us(calc_delay);
  7527  00159A  C093  F010         	movff	linearMove2Axis@calc_delay,delay_us@us
  7528  00159E  C094  F011         	movff	linearMove2Axis@calc_delay+1,delay_us@us+1
  7529  0015A2  EC77  F020         	call	_delay_us	;wreg free
  7530                           
  7531                           ;gcode.c: 543: LATAbits.LATA5 = 0;
  7532  0015A6  9A89               	bcf	3977,5,c	;volatile
  7533                           
  7534                           ;gcode.c: 544: LATEbits.LATE1 = 0;
  7535  0015A8  928D               	bcf	3981,1,c	;volatile
  7536                           
  7537                           ;gcode.c: 545: LATCbits.LATC1 = 0;
  7538  0015AA  928B               	bcf	3979,1,c	;volatile
  7539                           
  7540                           ;gcode.c: 546: delay_us(calc_delay);
  7541  0015AC  C093  F010         	movff	linearMove2Axis@calc_delay,delay_us@us
  7542  0015B0  C094  F011         	movff	linearMove2Axis@calc_delay+1,delay_us@us+1
  7543  0015B4  EC77  F020         	call	_delay_us	;wreg free
  7544  0015B8  0100               	movlb	0	; () banked
  7545  0015BA  4B91               	infsnz	linearMove2Axis@i& (0+255),f,b
  7546  0015BC  2B92               	incf	(linearMove2Axis@i+1)& (0+255),f,b
  7547  0015BE                     l5768:
  7548  0015BE  C07E  F024         	movff	linearMove2Axis@feedrate,___lwdiv@dividend
  7549  0015C2  C07F  F025         	movff	linearMove2Axis@feedrate+1,___lwdiv@dividend+1
  7550  0015C6  0E00               	movlw	0
  7551  0015C8  6E27               	movwf	___lwdiv@divisor+1,c
  7552  0015CA  0E14               	movlw	20
  7553  0015CC  6E26               	movwf	___lwdiv@divisor,c
  7554  0015CE  EC44  F01F         	call	___lwdiv	;wreg free
  7555  0015D2  1E24               	comf	?___lwdiv,f,c
  7556  0015D4  1E25               	comf	?___lwdiv+1,f,c
  7557  0015D6  4A24               	infsnz	?___lwdiv,f,c
  7558  0015D8  2A25               	incf	?___lwdiv+1,f,c
  7559  0015DA  0100               	movlb	0	; () banked
  7560  0015DC  518F               	movf	linearMove2Axis@steps& (0+255),w,b
  7561  0015DE  2624               	addwf	?___lwdiv,f,c
  7562  0015E0  0100               	movlb	0	; () banked
  7563  0015E2  5190               	movf	(linearMove2Axis@steps+1)& (0+255),w,b
  7564  0015E4  2225               	addwfc	?___lwdiv+1,f,c
  7565  0015E6  0100               	movlb	0	; () banked
  7566  0015E8  5191               	movf	linearMove2Axis@i& (0+255),w,b
  7567  0015EA  5C24               	subwf	?___lwdiv,w,c
  7568  0015EC  0100               	movlb	0	; () banked
  7569  0015EE  5192               	movf	(linearMove2Axis@i+1)& (0+255),w,b
  7570  0015F0  5825               	subwfb	?___lwdiv+1,w,c
  7571  0015F2  A0D8               	btfss	status,0,c
  7572  0015F4  D048               	goto	l5792
  7573  0015F6  D7CE               	goto	l315
  7574  0015F8                     l5770:
  7575                           
  7576                           ; BSR set to: 0
  7577                           ;gcode.c: 549: {
  7578                           ;gcode.c: 550: calc_delay = calculate_motordelay(feedrate, i, steps) * 1.4142136;
  7579  0015F8  C08F  F06A         	movff	linearMove2Axis@steps,calculate_motordelay@steps
  7580  0015FC  C090  F06B         	movff	linearMove2Axis@steps+1,calculate_motordelay@steps+1
  7581  001600  C091  F068         	movff	linearMove2Axis@i,calculate_motordelay@i
  7582  001604  C092  F069         	movff	linearMove2Axis@i+1,calculate_motordelay@i+1
  7583  001608  C07E  F066         	movff	linearMove2Axis@feedrate,calculate_motordelay@feedrate
  7584  00160C  C07F  F067         	movff	linearMove2Axis@feedrate+1,calculate_motordelay@feedrate+1
  7585  001610  EC3E  F013         	call	_calculate_motordelay	;wreg free
  7586  001614  C066  F084         	movff	?_calculate_motordelay,_linearMove2Axis$2114
  7587  001618  C067  F085         	movff	?_calculate_motordelay+1,_linearMove2Axis$2114+1
  7588                           
  7589                           ;gcode.c: 549: {
  7590                           ;gcode.c: 550: calc_delay = calculate_motordelay(feedrate, i, steps) * 1.4142136;
  7591  00161C  0E05               	movlw	5
  7592  00161E  6E27               	movwf	___ftmul@f2,c
  7593  001620  0EB5               	movlw	181
  7594  001622  6E28               	movwf	___ftmul@f2+1,c
  7595  001624  0E3F               	movlw	63
  7596  001626  6E29               	movwf	___ftmul@f2+2,c
  7597  001628  C084  F018         	movff	_linearMove2Axis$2114,___lwtoft@c
  7598  00162C  C085  F019         	movff	_linearMove2Axis$2114+1,___lwtoft@c+1
  7599  001630  EC1F  F021         	call	___lwtoft	;wreg free
  7600  001634  C018  F024         	movff	?___lwtoft,___ftmul@f1
  7601  001638  C019  F025         	movff	?___lwtoft+1,___ftmul@f1+1
  7602  00163C  C01A  F026         	movff	?___lwtoft+2,___ftmul@f1+2
  7603  001640  EC2D  F01A         	call	___ftmul	;wreg free
  7604  001644  C024  F03A         	movff	?___ftmul,___fttol@f1
  7605  001648  C025  F03B         	movff	?___ftmul+1,___fttol@f1+1
  7606  00164C  C026  F03C         	movff	?___ftmul+2,___fttol@f1+2
  7607  001650  EC1C  F019         	call	___fttol	;wreg free
  7608  001654  C03A  F093         	movff	?___fttol,linearMove2Axis@calc_delay
  7609  001658  C03B  F094         	movff	?___fttol+1,linearMove2Axis@calc_delay+1
  7610                           
  7611                           ;gcode.c: 552: LATAbits.LATA5 = 1;
  7612  00165C  8A89               	bsf	3977,5,c	;volatile
  7613                           
  7614                           ;gcode.c: 553: LATEbits.LATE1 = 1;
  7615  00165E  828D               	bsf	3981,1,c	;volatile
  7616                           
  7617                           ;gcode.c: 554: LATCbits.LATC1 = 1;
  7618  001660  828B               	bsf	3979,1,c	;volatile
  7619                           
  7620                           ;gcode.c: 555: delay_us(calc_delay);
  7621  001662  C093  F010         	movff	linearMove2Axis@calc_delay,delay_us@us
  7622  001666  C094  F011         	movff	linearMove2Axis@calc_delay+1,delay_us@us+1
  7623  00166A  EC77  F020         	call	_delay_us	;wreg free
  7624                           
  7625                           ;gcode.c: 556: LATAbits.LATA5 = 0;
  7626  00166E  9A89               	bcf	3977,5,c	;volatile
  7627                           
  7628                           ;gcode.c: 557: LATEbits.LATE1 = 0;
  7629  001670  928D               	bcf	3981,1,c	;volatile
  7630                           
  7631                           ;gcode.c: 558: LATCbits.LATC1 = 0;
  7632  001672  928B               	bcf	3979,1,c	;volatile
  7633                           
  7634                           ;gcode.c: 559: delay_us(calc_delay);
  7635  001674  C093  F010         	movff	linearMove2Axis@calc_delay,delay_us@us
  7636  001678  C094  F011         	movff	linearMove2Axis@calc_delay+1,delay_us@us+1
  7637  00167C  EC77  F020         	call	_delay_us	;wreg free
  7638  001680  0100               	movlb	0	; () banked
  7639  001682  4B91               	infsnz	linearMove2Axis@i& (0+255),f,b
  7640  001684  2B92               	incf	(linearMove2Axis@i+1)& (0+255),f,b
  7641  001686                     l5792:
  7642                           
  7643                           ; BSR set to: 0
  7644  001686  0100               	movlb	0	; () banked
  7645  001688  518F               	movf	linearMove2Axis@steps& (0+255),w,b
  7646  00168A  0100               	movlb	0	; () banked
  7647  00168C  5D91               	subwf	linearMove2Axis@i& (0+255),w,b
  7648  00168E  0100               	movlb	0	; () banked
  7649  001690  5190               	movf	(linearMove2Axis@steps+1)& (0+255),w,b
  7650  001692  0100               	movlb	0	; () banked
  7651  001694  5992               	subwfb	(linearMove2Axis@i+1)& (0+255),w,b
  7652  001696  A0D8               	btfss	status,0,c
  7653  001698  D7AF               	goto	l5770
  7654  00169A                     l5794:
  7655                           
  7656                           ; BSR set to: 0
  7657                           ;gcode.c: 560: }
  7658                           ;gcode.c: 561: }
  7659                           ;gcode.c: 565: linearMove1Axis(singleaxis, singlearg, feedrate);
  7660  00169A  C080  F066         	movff	linearMove2Axis@singlearg,linearMove1Axis@arg
  7661  00169E  C081  F067         	movff	linearMove2Axis@singlearg+1,linearMove1Axis@arg+1
  7662  0016A2  C082  F068         	movff	linearMove2Axis@singlearg+2,linearMove1Axis@arg+2
  7663  0016A6  C07E  F069         	movff	linearMove2Axis@feedrate,linearMove1Axis@feedrate
  7664  0016AA  C07F  F06A         	movff	linearMove2Axis@feedrate+1,linearMove1Axis@feedrate+1
  7665  0016AE  0100               	movlb	0	; () banked
  7666  0016B0  5183               	movf	linearMove2Axis@singleaxis& (0+255),w,b
  7667  0016B2  EC5D  F00B         	call	_linearMove1Axis
  7668                           
  7669                           ;gcode.c: 570: return G_SUCCESS;
  7670  0016B6  0E00               	movlw	0
  7671  0016B8  0012               	return	
  7672  0016BA                     __end_of_linearMove2Axis:
  7673                           	opt stack 0
  7674                           tblptru	equ	0xFF8
  7675                           tblptrh	equ	0xFF7
  7676                           tblptrl	equ	0xFF6
  7677                           tablat	equ	0xFF5
  7678                           prodh	equ	0xFF4
  7679                           prodl	equ	0xFF3
  7680                           intcon	equ	0xFF2
  7681                           intcon2	equ	0xFF1
  7682                           indf0	equ	0xFEF
  7683                           postinc0	equ	0xFEE
  7684                           fsr0h	equ	0xFEA
  7685                           fsr0l	equ	0xFE9
  7686                           wreg	equ	0xFE8
  7687                           indf1	equ	0xFE7
  7688                           fsr1h	equ	0xFE2
  7689                           fsr1l	equ	0xFE1
  7690                           indf2	equ	0xFDF
  7691                           postinc2	equ	0xFDE
  7692                           postdec2	equ	0xFDD
  7693                           fsr2h	equ	0xFDA
  7694                           fsr2l	equ	0xFD9
  7695                           status	equ	0xFD8
  7696                           
  7697 ;; *************** function _calculate_motordelay *****************
  7698 ;; Defined at:
  7699 ;;		line 600 in file "gcode.c"
  7700 ;; Parameters:    Size  Location     Type
  7701 ;;  feedrate        2    6[BANK0 ] unsigned short 
  7702 ;;  i               2    8[BANK0 ] unsigned int 
  7703 ;;  steps           2   10[BANK0 ] unsigned int 
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;  depth           2   22[BANK0 ] unsigned short 
  7706 ;;  x               2   20[BANK0 ] unsigned short 
  7707 ;;  acc_max         2   18[BANK0 ] unsigned short 
  7708 ;;  init_feedrat    2   16[BANK0 ] unsigned short 
  7709 ;;  halfdelay       2   12[BANK0 ] unsigned short 
  7710 ;; Return value:  Size  Location     Type
  7711 ;;                  2    6[BANK0 ] unsigned short 
  7712 ;; Registers used:
  7713 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7714 ;; Tracked objects:
  7715 ;;		On entry : 0/0
  7716 ;;		On exit  : 0/0
  7717 ;;		Unchanged: 0/0
  7718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7719 ;;      Params:         0       6       0       0       0       0       0       0       0
  7720 ;;      Locals:         0      12       0       0       0       0       0       0       0
  7721 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7722 ;;      Totals:         2      18       0       0       0       0       0       0       0
  7723 ;;Total ram usage:       20 bytes
  7724 ;; Hardware stack levels used:    1
  7725 ;; Hardware stack levels required when called:    4
  7726 ;; This function calls:
  7727 ;;		___ftdiv
  7728 ;;		___fttol
  7729 ;;		___lwdiv
  7730 ;;		___lwtoft
  7731 ;;		___wmul
  7732 ;; This function is called by:
  7733 ;;		_linearMove2Axis
  7734 ;; This function uses a non-reentrant model
  7735 ;;
  7736                           
  7737                           	psect	text27
  7738  00267C                     __ptext27:
  7739                           	opt stack 0
  7740  00267C                     _calculate_motordelay:
  7741                           	opt stack 23
  7742                           
  7743                           ;gcode.c: 602: unsigned short halfdelay;
  7744                           ;gcode.c: 603: unsigned short x;
  7745                           ;gcode.c: 605: unsigned short depth = feedrate / 20;
  7746                           
  7747                           ;incstack = 0
  7748  00267C  C066  F024         	movff	calculate_motordelay@feedrate,___lwdiv@dividend
  7749  002680  C067  F025         	movff	calculate_motordelay@feedrate+1,___lwdiv@dividend+1
  7750  002684  0E00               	movlw	0
  7751  002686  6E27               	movwf	___lwdiv@divisor+1,c
  7752  002688  0E14               	movlw	20
  7753  00268A  6E26               	movwf	___lwdiv@divisor,c
  7754  00268C  EC44  F01F         	call	___lwdiv	;wreg free
  7755  002690  C024  F076         	movff	?___lwdiv,calculate_motordelay@depth
  7756  002694  C025  F077         	movff	?___lwdiv+1,calculate_motordelay@depth+1
  7757                           
  7758                           ;gcode.c: 606: unsigned short init_feedrate = 500;
  7759  002698  0E01               	movlw	1
  7760  00269A  0100               	movlb	0	; () banked
  7761  00269C  6F71               	movwf	(calculate_motordelay@init_feedrate+1)& (0+255),b
  7762  00269E  0EF4               	movlw	244
  7763  0026A0  6F70               	movwf	calculate_motordelay@init_feedrate& (0+255),b
  7764                           
  7765                           ; BSR set to: 0
  7766                           ;gcode.c: 608: unsigned short acc_max;
  7767                           ;gcode.c: 612: if (feedrate < init_feedrate) {return (30000000 / (6.267176 * (16)))/feed
      +                          rate;}
  7768  0026A2  0100               	movlb	0	; () banked
  7769  0026A4  5170               	movf	calculate_motordelay@init_feedrate& (0+255),w,b
  7770  0026A6  0100               	movlb	0	; () banked
  7771  0026A8  5D66               	subwf	calculate_motordelay@feedrate& (0+255),w,b
  7772  0026AA  0100               	movlb	0	; () banked
  7773  0026AC  5171               	movf	(calculate_motordelay@init_feedrate+1)& (0+255),w,b
  7774  0026AE  0100               	movlb	0	; () banked
  7775  0026B0  5967               	subwfb	(calculate_motordelay@feedrate+1)& (0+255),w,b
  7776  0026B2  B0D8               	btfsc	status,0,c
  7777  0026B4  D026               	goto	l5546
  7778                           
  7779                           ; BSR set to: 0
  7780  0026B6  C066  F018         	movff	calculate_motordelay@feedrate,___lwtoft@c
  7781  0026BA  C067  F019         	movff	calculate_motordelay@feedrate+1,___lwtoft@c+1
  7782  0026BE  EC1F  F021         	call	___lwtoft	;wreg free
  7783  0026C2  C018  F01F         	movff	?___lwtoft,___ftdiv@f2
  7784  0026C6  C019  F020         	movff	?___lwtoft+1,___ftdiv@f2+1
  7785  0026CA  C01A  F021         	movff	?___lwtoft+2,___ftdiv@f2+2
  7786  0026CE  0E15               	movlw	21
  7787  0026D0  6E1C               	movwf	___ftdiv@f1,c
  7788  0026D2  0E92               	movlw	146
  7789  0026D4  6E1D               	movwf	___ftdiv@f1+1,c
  7790  0026D6  0E48               	movlw	72
  7791  0026D8  6E1E               	movwf	___ftdiv@f1+2,c
  7792  0026DA  ECA7  F01A         	call	___ftdiv	;wreg free
  7793  0026DE  C01C  F03A         	movff	?___ftdiv,___fttol@f1
  7794  0026E2  C01D  F03B         	movff	?___ftdiv+1,___fttol@f1+1
  7795  0026E6  C01E  F03C         	movff	?___ftdiv+2,___fttol@f1+2
  7796  0026EA  EC1C  F019         	call	___fttol	;wreg free
  7797  0026EE  C03A  F066         	movff	?___fttol,?_calculate_motordelay
  7798  0026F2  C03B  F067         	movff	?___fttol+1,?_calculate_motordelay+1
  7799  0026F6  0012               	return	
  7800  0026F8  C03A  F066         	movff	?___fttol,?_calculate_motordelay
  7801  0026FC  C03B  F067         	movff	?___fttol+1,?_calculate_motordelay+1
  7802  002700  0012               	return	
  7803  002702                     l5546:
  7804                           
  7805                           ;gcode.c: 619: else
  7806                           ;gcode.c: 620: {
  7807                           ;gcode.c: 623: if (steps < (depth<<1))
  7808  002702  C076  F043         	movff	calculate_motordelay@depth,??_calculate_motordelay
  7809  002706  C077  F044         	movff	calculate_motordelay@depth+1,??_calculate_motordelay+1
  7810  00270A  90D8               	bcf	status,0,c
  7811  00270C  3643               	rlcf	??_calculate_motordelay,f,c
  7812  00270E  3644               	rlcf	??_calculate_motordelay+1,f,c
  7813  002710  5043               	movf	??_calculate_motordelay,w,c
  7814  002712  0100               	movlb	0	; () banked
  7815  002714  5D6A               	subwf	calculate_motordelay@steps& (0+255),w,b
  7816  002716  5044               	movf	??_calculate_motordelay+1,w,c
  7817  002718  0100               	movlb	0	; () banked
  7818  00271A  596B               	subwfb	(calculate_motordelay@steps+1)& (0+255),w,b
  7819  00271C  B0D8               	btfsc	status,0,c
  7820  00271E  D010               	goto	l5554
  7821                           
  7822                           ; BSR set to: 0
  7823                           ;gcode.c: 624: {
  7824                           ;gcode.c: 626: if (i < (steps>>1)) {x = i;}
  7825  002720  90D8               	bcf	status,0,c
  7826  002722  0100               	movlb	0	; () banked
  7827  002724  316B               	rrcf	(calculate_motordelay@steps+1)& (0+255),w,b
  7828  002726  6E44               	movwf	(??_calculate_motordelay+1)& (0+255),c
  7829  002728  0100               	movlb	0	; () banked
  7830  00272A  316A               	rrcf	calculate_motordelay@steps& (0+255),w,b
  7831  00272C  6E43               	movwf	??_calculate_motordelay& (0+255),c
  7832  00272E  5043               	movf	??_calculate_motordelay,w,c
  7833  002730  0100               	movlb	0	; () banked
  7834  002732  5D68               	subwf	calculate_motordelay@i& (0+255),w,b
  7835  002734  5044               	movf	??_calculate_motordelay+1,w,c
  7836  002736  0100               	movlb	0	; () banked
  7837  002738  5969               	subwfb	(calculate_motordelay@i+1)& (0+255),w,b
  7838  00273A  B0D8               	btfsc	status,0,c
  7839  00273C  D026               	goto	l5560
  7840  00273E  D00A               	goto	l5556
  7841  002740                     l5554:
  7842                           
  7843                           ; BSR set to: 0
  7844                           ;gcode.c: 629: else if (i < depth)
  7845  002740  0100               	movlb	0	; () banked
  7846  002742  5176               	movf	calculate_motordelay@depth& (0+255),w,b
  7847  002744  0100               	movlb	0	; () banked
  7848  002746  5D68               	subwf	calculate_motordelay@i& (0+255),w,b
  7849  002748  0100               	movlb	0	; () banked
  7850  00274A  5177               	movf	(calculate_motordelay@depth+1)& (0+255),w,b
  7851  00274C  0100               	movlb	0	; () banked
  7852  00274E  5969               	subwfb	(calculate_motordelay@i+1)& (0+255),w,b
  7853  002750  B0D8               	btfsc	status,0,c
  7854  002752  D005               	goto	l5558
  7855  002754                     l5556:
  7856                           
  7857                           ; BSR set to: 0
  7858                           ;gcode.c: 630: {
  7859                           ;gcode.c: 631: x = i;
  7860  002754  C068  F074         	movff	calculate_motordelay@i,calculate_motordelay@x
  7861  002758  C069  F075         	movff	calculate_motordelay@i+1,calculate_motordelay@x+1
  7862                           
  7863                           ;gcode.c: 632: }
  7864  00275C  D046               	goto	l5566
  7865  00275E                     l5558:
  7866                           
  7867                           ; BSR set to: 0
  7868                           ;gcode.c: 633: else if (i > steps-depth)
  7869  00275E  C076  F043         	movff	calculate_motordelay@depth,??_calculate_motordelay
  7870  002762  C077  F044         	movff	calculate_motordelay@depth+1,??_calculate_motordelay+1
  7871  002766  1E43               	comf	??_calculate_motordelay,f,c
  7872  002768  1E44               	comf	??_calculate_motordelay+1,f,c
  7873  00276A  4A43               	infsnz	??_calculate_motordelay,f,c
  7874  00276C  2A44               	incf	??_calculate_motordelay+1,f,c
  7875  00276E  0100               	movlb	0	; () banked
  7876  002770  516A               	movf	calculate_motordelay@steps& (0+255),w,b
  7877  002772  2643               	addwf	??_calculate_motordelay,f,c
  7878  002774  0100               	movlb	0	; () banked
  7879  002776  516B               	movf	(calculate_motordelay@steps+1)& (0+255),w,b
  7880  002778  2244               	addwfc	??_calculate_motordelay+1,f,c
  7881  00277A  0100               	movlb	0	; () banked
  7882  00277C  5168               	movf	calculate_motordelay@i& (0+255),w,b
  7883  00277E  5C43               	subwf	??_calculate_motordelay,w,c
  7884  002780  0100               	movlb	0	; () banked
  7885  002782  5169               	movf	(calculate_motordelay@i+1)& (0+255),w,b
  7886  002784  5844               	subwfb	??_calculate_motordelay+1,w,c
  7887  002786  B0D8               	btfsc	status,0,c
  7888  002788  D013               	goto	l5562
  7889  00278A                     l5560:
  7890                           
  7891                           ; BSR set to: 0
  7892                           ;gcode.c: 634: {
  7893                           ;gcode.c: 635: x = steps - i;
  7894  00278A  C068  F043         	movff	calculate_motordelay@i,??_calculate_motordelay
  7895  00278E  C069  F044         	movff	calculate_motordelay@i+1,??_calculate_motordelay+1
  7896  002792  1E43               	comf	??_calculate_motordelay,f,c
  7897  002794  1E44               	comf	??_calculate_motordelay+1,f,c
  7898  002796  4A43               	infsnz	??_calculate_motordelay,f,c
  7899  002798  2A44               	incf	??_calculate_motordelay+1,f,c
  7900  00279A  0100               	movlb	0	; () banked
  7901  00279C  516A               	movf	calculate_motordelay@steps& (0+255),w,b
  7902  00279E  2443               	addwf	??_calculate_motordelay,w,c
  7903  0027A0  0100               	movlb	0	; () banked
  7904  0027A2  6F74               	movwf	calculate_motordelay@x& (0+255),b
  7905  0027A4  0100               	movlb	0	; () banked
  7906  0027A6  516B               	movf	(calculate_motordelay@steps+1)& (0+255),w,b
  7907  0027A8  2044               	addwfc	??_calculate_motordelay+1,w,c
  7908  0027AA  0100               	movlb	0	; () banked
  7909  0027AC  6F75               	movwf	(calculate_motordelay@x+1)& (0+255),b
  7910                           
  7911                           ;gcode.c: 636: }
  7912  0027AE  D01D               	goto	l5566
  7913  0027B0                     l5562:
  7914                           
  7915                           ; BSR set to: 0
  7916                           ;gcode.c: 638: else {return ((30000000 / (6.267176 * (16)))/feedrate);}
  7917  0027B0  C066  F018         	movff	calculate_motordelay@feedrate,___lwtoft@c
  7918  0027B4  C067  F019         	movff	calculate_motordelay@feedrate+1,___lwtoft@c+1
  7919  0027B8  EC1F  F021         	call	___lwtoft	;wreg free
  7920  0027BC  C018  F01F         	movff	?___lwtoft,___ftdiv@f2
  7921  0027C0  C019  F020         	movff	?___lwtoft+1,___ftdiv@f2+1
  7922  0027C4  C01A  F021         	movff	?___lwtoft+2,___ftdiv@f2+2
  7923  0027C8  0E15               	movlw	21
  7924  0027CA  6E1C               	movwf	___ftdiv@f1,c
  7925  0027CC  0E92               	movlw	146
  7926  0027CE  6E1D               	movwf	___ftdiv@f1+1,c
  7927  0027D0  0E48               	movlw	72
  7928  0027D2  6E1E               	movwf	___ftdiv@f1+2,c
  7929  0027D4  ECA7  F01A         	call	___ftdiv	;wreg free
  7930  0027D8  C01C  F03A         	movff	?___ftdiv,___fttol@f1
  7931  0027DC  C01D  F03B         	movff	?___ftdiv+1,___fttol@f1+1
  7932  0027E0  C01E  F03C         	movff	?___ftdiv+2,___fttol@f1+2
  7933  0027E4  EC1C  F019         	call	___fttol	;wreg free
  7934  0027E8  D787               	goto	L6
  7935  0027EA                     l5566:
  7936                           
  7937                           ;gcode.c: 639: }
  7938                           ;gcode.c: 642: acc_max = (feedrate - init_feedrate);
  7939  0027EA  C070  F043         	movff	calculate_motordelay@init_feedrate,??_calculate_motordelay
  7940  0027EE  C071  F044         	movff	calculate_motordelay@init_feedrate+1,??_calculate_motordelay+1
  7941  0027F2  1E43               	comf	??_calculate_motordelay,f,c
  7942  0027F4  1E44               	comf	??_calculate_motordelay+1,f,c
  7943  0027F6  4A43               	infsnz	??_calculate_motordelay,f,c
  7944  0027F8  2A44               	incf	??_calculate_motordelay+1,f,c
  7945  0027FA  0100               	movlb	0	; () banked
  7946  0027FC  5166               	movf	calculate_motordelay@feedrate& (0+255),w,b
  7947  0027FE  2443               	addwf	??_calculate_motordelay,w,c
  7948  002800  0100               	movlb	0	; () banked
  7949  002802  6F72               	movwf	calculate_motordelay@acc_max& (0+255),b
  7950  002804  0100               	movlb	0	; () banked
  7951  002806  5167               	movf	(calculate_motordelay@feedrate+1)& (0+255),w,b
  7952  002808  2044               	addwfc	??_calculate_motordelay+1,w,c
  7953  00280A  0100               	movlb	0	; () banked
  7954  00280C  6F73               	movwf	(calculate_motordelay@acc_max+1)& (0+255),b
  7955                           
  7956                           ; BSR set to: 0
  7957                           ;gcode.c: 644: acc_max /= (depth>>1);
  7958  00280E  C072  F024         	movff	calculate_motordelay@acc_max,___lwdiv@dividend
  7959  002812  C073  F025         	movff	calculate_motordelay@acc_max+1,___lwdiv@dividend+1
  7960  002816  90D8               	bcf	status,0,c
  7961  002818  0100               	movlb	0	; () banked
  7962  00281A  3177               	rrcf	(calculate_motordelay@depth+1)& (0+255),w,b
  7963  00281C  6E43               	movwf	??_calculate_motordelay& (0+255),c
  7964  00281E  0100               	movlb	0	; () banked
  7965  002820  3176               	rrcf	calculate_motordelay@depth& (0+255),w,b
  7966  002822  6E26               	movwf	___lwdiv@divisor,c
  7967  002824  C043  F027         	movff	??_calculate_motordelay,___lwdiv@divisor+1
  7968  002828  EC44  F01F         	call	___lwdiv	;wreg free
  7969  00282C  C024  F072         	movff	?___lwdiv,calculate_motordelay@acc_max
  7970  002830  C025  F073         	movff	?___lwdiv+1,calculate_motordelay@acc_max+1
  7971                           
  7972                           ;gcode.c: 648: if (i <= (depth>>1))
  7973  002834  90D8               	bcf	status,0,c
  7974  002836  0100               	movlb	0	; () banked
  7975  002838  3177               	rrcf	(calculate_motordelay@depth+1)& (0+255),w,b
  7976  00283A  6E44               	movwf	(??_calculate_motordelay+1)& (0+255),c
  7977  00283C  0100               	movlb	0	; () banked
  7978  00283E  3176               	rrcf	calculate_motordelay@depth& (0+255),w,b
  7979  002840  6E43               	movwf	??_calculate_motordelay& (0+255),c
  7980  002842  0100               	movlb	0	; () banked
  7981  002844  5168               	movf	calculate_motordelay@i& (0+255),w,b
  7982  002846  5C43               	subwf	??_calculate_motordelay,w,c
  7983  002848  0100               	movlb	0	; () banked
  7984  00284A  5169               	movf	(calculate_motordelay@i+1)& (0+255),w,b
  7985  00284C  5844               	subwfb	??_calculate_motordelay+1,w,c
  7986  00284E  A0D8               	btfss	status,0,c
  7987  002850  D027               	goto	l5574
  7988                           
  7989                           ; BSR set to: 0
  7990                           ;gcode.c: 649: {
  7991                           ;gcode.c: 650: feedrate = acc_max*x*x / depth;
  7992  002852  C072  F01E         	movff	calculate_motordelay@acc_max,___wmul@multiplier
  7993  002856  C073  F01F         	movff	calculate_motordelay@acc_max+1,___wmul@multiplier+1
  7994  00285A  C074  F020         	movff	calculate_motordelay@x,___wmul@multiplicand
  7995  00285E  C075  F021         	movff	calculate_motordelay@x+1,___wmul@multiplicand+1
  7996  002862  ECF9  F020         	call	___wmul	;wreg free
  7997  002866  C01E  F06E         	movff	?___wmul,_calculate_motordelay$2115
  7998  00286A  C01F  F06F         	movff	?___wmul+1,_calculate_motordelay$2115+1
  7999                           
  8000                           ;gcode.c: 649: {
  8001                           ;gcode.c: 650: feedrate = acc_max*x*x / depth;
  8002  00286E  C06E  F01E         	movff	_calculate_motordelay$2115,___wmul@multiplier
  8003  002872  C06F  F01F         	movff	_calculate_motordelay$2115+1,___wmul@multiplier+1
  8004  002876  C074  F020         	movff	calculate_motordelay@x,___wmul@multiplicand
  8005  00287A  C075  F021         	movff	calculate_motordelay@x+1,___wmul@multiplicand+1
  8006  00287E  ECF9  F020         	call	___wmul	;wreg free
  8007  002882  C01E  F024         	movff	?___wmul,___lwdiv@dividend
  8008  002886  C01F  F025         	movff	?___wmul+1,___lwdiv@dividend+1
  8009  00288A  C076  F026         	movff	calculate_motordelay@depth,___lwdiv@divisor
  8010  00288E  C077  F027         	movff	calculate_motordelay@depth+1,___lwdiv@divisor+1
  8011  002892  EC44  F01F         	call	___lwdiv	;wreg free
  8012  002896  C024  F066         	movff	?___lwdiv,calculate_motordelay@feedrate
  8013  00289A  C025  F067         	movff	?___lwdiv+1,calculate_motordelay@feedrate+1
  8014                           
  8015                           ;gcode.c: 651: }
  8016  00289E  D04E               	goto	l5576
  8017  0028A0                     l5574:
  8018                           
  8019                           ;gcode.c: 652: else
  8020                           ;gcode.c: 653: {
  8021                           ;gcode.c: 655: feedrate = acc_max*depth>>1;
  8022  0028A0  C072  F01E         	movff	calculate_motordelay@acc_max,___wmul@multiplier
  8023  0028A4  C073  F01F         	movff	calculate_motordelay@acc_max+1,___wmul@multiplier+1
  8024  0028A8  C076  F020         	movff	calculate_motordelay@depth,___wmul@multiplicand
  8025  0028AC  C077  F021         	movff	calculate_motordelay@depth+1,___wmul@multiplicand+1
  8026  0028B0  ECF9  F020         	call	___wmul	;wreg free
  8027  0028B4  90D8               	bcf	status,0,c
  8028  0028B6  301F               	rrcf	?___wmul+1,w,c
  8029  0028B8  6E43               	movwf	??_calculate_motordelay& (0+255),c
  8030  0028BA  301E               	rrcf	?___wmul,w,c
  8031  0028BC  0100               	movlb	0	; () banked
  8032  0028BE  6F66               	movwf	calculate_motordelay@feedrate& (0+255),b
  8033  0028C0  C043  F067         	movff	??_calculate_motordelay,calculate_motordelay@feedrate+1
  8034                           
  8035                           ;gcode.c: 656: feedrate -= ((acc_max/depth) * (100-x)*(100-x));
  8036  0028C4  C074  F043         	movff	calculate_motordelay@x,??_calculate_motordelay
  8037  0028C8  C075  F044         	movff	calculate_motordelay@x+1,??_calculate_motordelay+1
  8038  0028CC  1E43               	comf	??_calculate_motordelay,f,c
  8039  0028CE  1E44               	comf	??_calculate_motordelay+1,f,c
  8040  0028D0  4A43               	infsnz	??_calculate_motordelay,f,c
  8041  0028D2  2A44               	incf	??_calculate_motordelay+1,f,c
  8042  0028D4  0E64               	movlw	100
  8043  0028D6  2443               	addwf	??_calculate_motordelay,w,c
  8044  0028D8  6E1E               	movwf	___wmul@multiplier,c
  8045  0028DA  0E00               	movlw	0
  8046  0028DC  2044               	addwfc	??_calculate_motordelay+1,w,c
  8047  0028DE  6E1F               	movwf	___wmul@multiplier+1,c
  8048  0028E0  C076  F026         	movff	calculate_motordelay@depth,___lwdiv@divisor
  8049  0028E4  C077  F027         	movff	calculate_motordelay@depth+1,___lwdiv@divisor+1
  8050  0028E8  C072  F024         	movff	calculate_motordelay@acc_max,___lwdiv@dividend
  8051  0028EC  C073  F025         	movff	calculate_motordelay@acc_max+1,___lwdiv@dividend+1
  8052  0028F0  EC44  F01F         	call	___lwdiv	;wreg free
  8053  0028F4  C024  F020         	movff	?___lwdiv,___wmul@multiplicand
  8054  0028F8  C025  F021         	movff	?___lwdiv+1,___wmul@multiplicand+1
  8055  0028FC  ECF9  F020         	call	___wmul	;wreg free
  8056  002900  C01E  F06E         	movff	?___wmul,_calculate_motordelay$2115
  8057  002904  C01F  F06F         	movff	?___wmul+1,_calculate_motordelay$2115+1
  8058                           
  8059                           ;gcode.c: 656: feedrate -= ((acc_max/depth) * (100-x)*(100-x));
  8060  002908  C074  F043         	movff	calculate_motordelay@x,??_calculate_motordelay
  8061  00290C  C075  F044         	movff	calculate_motordelay@x+1,??_calculate_motordelay+1
  8062  002910  1E43               	comf	??_calculate_motordelay,f,c
  8063  002912  1E44               	comf	??_calculate_motordelay+1,f,c
  8064  002914  4A43               	infsnz	??_calculate_motordelay,f,c
  8065  002916  2A44               	incf	??_calculate_motordelay+1,f,c
  8066  002918  0E64               	movlw	100
  8067  00291A  2443               	addwf	??_calculate_motordelay,w,c
  8068  00291C  6E1E               	movwf	___wmul@multiplier,c
  8069  00291E  0E00               	movlw	0
  8070  002920  2044               	addwfc	??_calculate_motordelay+1,w,c
  8071  002922  6E1F               	movwf	___wmul@multiplier+1,c
  8072  002924  C06E  F020         	movff	_calculate_motordelay$2115,___wmul@multiplicand
  8073  002928  C06F  F021         	movff	_calculate_motordelay$2115+1,___wmul@multiplicand+1
  8074  00292C  ECF9  F020         	call	___wmul	;wreg free
  8075  002930  501E               	movf	?___wmul,w,c
  8076  002932  0100               	movlb	0	; () banked
  8077  002934  5F66               	subwf	calculate_motordelay@feedrate& (0+255),f,b
  8078  002936  501F               	movf	?___wmul+1,w,c
  8079  002938  0100               	movlb	0	; () banked
  8080  00293A  5B67               	subwfb	(calculate_motordelay@feedrate+1)& (0+255),f,b
  8081  00293C                     l5576:
  8082                           
  8083                           ;gcode.c: 657: }
  8084                           ;gcode.c: 658: feedrate += init_feedrate;
  8085  00293C  0100               	movlb	0	; () banked
  8086  00293E  5170               	movf	calculate_motordelay@init_feedrate& (0+255),w,b
  8087  002940  0100               	movlb	0	; () banked
  8088  002942  2766               	addwf	calculate_motordelay@feedrate& (0+255),f,b
  8089  002944  0100               	movlb	0	; () banked
  8090  002946  5171               	movf	(calculate_motordelay@init_feedrate+1)& (0+255),w,b
  8091  002948  0100               	movlb	0	; () banked
  8092  00294A  2367               	addwfc	(calculate_motordelay@feedrate+1)& (0+255),f,b
  8093                           
  8094                           ; BSR set to: 0
  8095                           ;gcode.c: 663: halfdelay = (30000000 / (6.267176 * (16))) / feedrate;
  8096  00294C  C066  F018         	movff	calculate_motordelay@feedrate,___lwtoft@c
  8097  002950  C067  F019         	movff	calculate_motordelay@feedrate+1,___lwtoft@c+1
  8098  002954  EC1F  F021         	call	___lwtoft	;wreg free
  8099  002958  C018  F01F         	movff	?___lwtoft,___ftdiv@f2
  8100  00295C  C019  F020         	movff	?___lwtoft+1,___ftdiv@f2+1
  8101  002960  C01A  F021         	movff	?___lwtoft+2,___ftdiv@f2+2
  8102  002964  0E15               	movlw	21
  8103  002966  6E1C               	movwf	___ftdiv@f1,c
  8104  002968  0E92               	movlw	146
  8105  00296A  6E1D               	movwf	___ftdiv@f1+1,c
  8106  00296C  0E48               	movlw	72
  8107  00296E  6E1E               	movwf	___ftdiv@f1+2,c
  8108  002970  ECA7  F01A         	call	___ftdiv	;wreg free
  8109  002974  C01C  F03A         	movff	?___ftdiv,___fttol@f1
  8110  002978  C01D  F03B         	movff	?___ftdiv+1,___fttol@f1+1
  8111  00297C  C01E  F03C         	movff	?___ftdiv+2,___fttol@f1+2
  8112  002980  EC1C  F019         	call	___fttol	;wreg free
  8113  002984  C03A  F06C         	movff	?___fttol,calculate_motordelay@halfdelay
  8114  002988  C03B  F06D         	movff	?___fttol+1,calculate_motordelay@halfdelay+1
  8115                           
  8116                           ;gcode.c: 665: return halfdelay;
  8117  00298C  C06C  F066         	movff	calculate_motordelay@halfdelay,?_calculate_motordelay
  8118  002990  C06D  F067         	movff	calculate_motordelay@halfdelay+1,?_calculate_motordelay+1
  8119  002994  0012               	return	
  8120  002996                     __end_of_calculate_motordelay:
  8121                           	opt stack 0
  8122                           tblptru	equ	0xFF8
  8123                           tblptrh	equ	0xFF7
  8124                           tblptrl	equ	0xFF6
  8125                           tablat	equ	0xFF5
  8126                           prodh	equ	0xFF4
  8127                           prodl	equ	0xFF3
  8128                           intcon	equ	0xFF2
  8129                           intcon2	equ	0xFF1
  8130                           indf0	equ	0xFEF
  8131                           postinc0	equ	0xFEE
  8132                           fsr0h	equ	0xFEA
  8133                           fsr0l	equ	0xFE9
  8134                           wreg	equ	0xFE8
  8135                           indf1	equ	0xFE7
  8136                           fsr1h	equ	0xFE2
  8137                           fsr1l	equ	0xFE1
  8138                           indf2	equ	0xFDF
  8139                           postinc2	equ	0xFDE
  8140                           postdec2	equ	0xFDD
  8141                           fsr2h	equ	0xFDA
  8142                           fsr2l	equ	0xFD9
  8143                           status	equ	0xFD8
  8144                           
  8145 ;; *************** function ___wmul *****************
  8146 ;; Defined at:
  8147 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\Umul16.c"
  8148 ;; Parameters:    Size  Location     Type
  8149 ;;  multiplier      2   29[COMRAM] unsigned int 
  8150 ;;  multiplicand    2   31[COMRAM] unsigned int 
  8151 ;; Auto vars:     Size  Location     Type
  8152 ;;  product         2   33[COMRAM] unsigned int 
  8153 ;; Return value:  Size  Location     Type
  8154 ;;                  2   29[COMRAM] unsigned int 
  8155 ;; Registers used:
  8156 ;;		wreg, status,2, status,0, prodl, prodh
  8157 ;; Tracked objects:
  8158 ;;		On entry : 0/0
  8159 ;;		On exit  : 0/0
  8160 ;;		Unchanged: 0/0
  8161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8162 ;;      Params:         4       0       0       0       0       0       0       0       0
  8163 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8164 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8165 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8166 ;;Total ram usage:        6 bytes
  8167 ;; Hardware stack levels used:    1
  8168 ;; Hardware stack levels required when called:    2
  8169 ;; This function calls:
  8170 ;;		Nothing
  8171 ;; This function is called by:
  8172 ;;		_calculate_motordelay
  8173 ;;		_fround
  8174 ;;		_scale
  8175 ;;		_sprintf
  8176 ;; This function uses a non-reentrant model
  8177 ;;
  8178                           
  8179                           	psect	text28
  8180  0041F2                     __ptext28:
  8181                           	opt stack 0
  8182  0041F2                     ___wmul:
  8183                           	opt stack 25
  8184                           
  8185                           ;incstack = 0
  8186  0041F2  501E               	movf	___wmul@multiplier,w,c
  8187  0041F4  0220               	mulwf	___wmul@multiplicand,c
  8188  0041F6  CFF3 F022          	movff	prodl,___wmul@product
  8189  0041FA  CFF4 F023          	movff	prodh,___wmul@product+1
  8190  0041FE  501E               	movf	___wmul@multiplier,w,c
  8191  004200  0221               	mulwf	___wmul@multiplicand+1,c
  8192  004202  50F3               	movf	prodl,w,c
  8193  004204  2623               	addwf	___wmul@product+1,f,c
  8194  004206  501F               	movf	___wmul@multiplier+1,w,c
  8195  004208  0220               	mulwf	___wmul@multiplicand,c
  8196  00420A  50F3               	movf	prodl,w,c
  8197  00420C  2623               	addwf	___wmul@product+1,f,c
  8198  00420E  C022  F01E         	movff	___wmul@product,?___wmul
  8199  004212  C023  F01F         	movff	___wmul@product+1,?___wmul+1
  8200  004216  0012               	return	
  8201  004218                     __end_of___wmul:
  8202                           	opt stack 0
  8203                           tblptru	equ	0xFF8
  8204                           tblptrh	equ	0xFF7
  8205                           tblptrl	equ	0xFF6
  8206                           tablat	equ	0xFF5
  8207                           prodh	equ	0xFF4
  8208                           prodl	equ	0xFF3
  8209                           intcon	equ	0xFF2
  8210                           intcon2	equ	0xFF1
  8211                           indf0	equ	0xFEF
  8212                           postinc0	equ	0xFEE
  8213                           fsr0h	equ	0xFEA
  8214                           fsr0l	equ	0xFE9
  8215                           wreg	equ	0xFE8
  8216                           indf1	equ	0xFE7
  8217                           fsr1h	equ	0xFE2
  8218                           fsr1l	equ	0xFE1
  8219                           indf2	equ	0xFDF
  8220                           postinc2	equ	0xFDE
  8221                           postdec2	equ	0xFDD
  8222                           fsr2h	equ	0xFDA
  8223                           fsr2l	equ	0xFD9
  8224                           status	equ	0xFD8
  8225                           
  8226 ;; *************** function ___lwdiv *****************
  8227 ;; Defined at:
  8228 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lwdiv.c"
  8229 ;; Parameters:    Size  Location     Type
  8230 ;;  dividend        2   35[COMRAM] unsigned int 
  8231 ;;  divisor         2   37[COMRAM] unsigned int 
  8232 ;; Auto vars:     Size  Location     Type
  8233 ;;  quotient        2   39[COMRAM] unsigned int 
  8234 ;;  counter         1   41[COMRAM] unsigned char 
  8235 ;; Return value:  Size  Location     Type
  8236 ;;                  2   35[COMRAM] unsigned int 
  8237 ;; Registers used:
  8238 ;;		wreg, status,2, status,0
  8239 ;; Tracked objects:
  8240 ;;		On entry : 0/0
  8241 ;;		On exit  : 0/0
  8242 ;;		Unchanged: 0/0
  8243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8244 ;;      Params:         4       0       0       0       0       0       0       0       0
  8245 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8246 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8247 ;;      Totals:         7       0       0       0       0       0       0       0       0
  8248 ;;Total ram usage:        7 bytes
  8249 ;; Hardware stack levels used:    1
  8250 ;; Hardware stack levels required when called:    2
  8251 ;; This function calls:
  8252 ;;		Nothing
  8253 ;; This function is called by:
  8254 ;;		_linearMove2Axis
  8255 ;;		_calculate_motordelay
  8256 ;; This function uses a non-reentrant model
  8257 ;;
  8258                           
  8259                           	psect	text29
  8260  003E88                     __ptext29:
  8261                           	opt stack 0
  8262  003E88                     ___lwdiv:
  8263                           	opt stack 24
  8264                           
  8265                           ;incstack = 0
  8266  003E88  0E00               	movlw	0
  8267  003E8A  6E29               	movwf	___lwdiv@quotient+1,c
  8268  003E8C  0E00               	movlw	0
  8269  003E8E  6E28               	movwf	___lwdiv@quotient,c
  8270  003E90  5026               	movf	___lwdiv@divisor,w,c
  8271  003E92  1027               	iorwf	___lwdiv@divisor+1,w,c
  8272  003E94  B4D8               	btfsc	status,2,c
  8273  003E96  D01C               	goto	l1021
  8274  003E98  0E01               	movlw	1
  8275  003E9A  6E2A               	movwf	___lwdiv@counter,c
  8276  003E9C  D004               	goto	l3536
  8277  003E9E                     l3534:
  8278  003E9E  90D8               	bcf	status,0,c
  8279  003EA0  3626               	rlcf	___lwdiv@divisor,f,c
  8280  003EA2  3627               	rlcf	___lwdiv@divisor+1,f,c
  8281  003EA4  2A2A               	incf	___lwdiv@counter,f,c
  8282  003EA6                     l3536:
  8283  003EA6  AE27               	btfss	___lwdiv@divisor+1,7,c
  8284  003EA8  D7FA               	goto	l3534
  8285  003EAA                     l3538:
  8286  003EAA  90D8               	bcf	status,0,c
  8287  003EAC  3628               	rlcf	___lwdiv@quotient,f,c
  8288  003EAE  3629               	rlcf	___lwdiv@quotient+1,f,c
  8289  003EB0  5026               	movf	___lwdiv@divisor,w,c
  8290  003EB2  5C24               	subwf	___lwdiv@dividend,w,c
  8291  003EB4  5027               	movf	___lwdiv@divisor+1,w,c
  8292  003EB6  5825               	subwfb	___lwdiv@dividend+1,w,c
  8293  003EB8  A0D8               	btfss	status,0,c
  8294  003EBA  D005               	goto	l3546
  8295  003EBC  5026               	movf	___lwdiv@divisor,w,c
  8296  003EBE  5E24               	subwf	___lwdiv@dividend,f,c
  8297  003EC0  5027               	movf	___lwdiv@divisor+1,w,c
  8298  003EC2  5A25               	subwfb	___lwdiv@dividend+1,f,c
  8299  003EC4  8028               	bsf	___lwdiv@quotient,0,c
  8300  003EC6                     l3546:
  8301  003EC6  90D8               	bcf	status,0,c
  8302  003EC8  3227               	rrcf	___lwdiv@divisor+1,f,c
  8303  003ECA  3226               	rrcf	___lwdiv@divisor,f,c
  8304  003ECC  2E2A               	decfsz	___lwdiv@counter,f,c
  8305  003ECE  D7ED               	goto	l3538
  8306  003ED0                     l1021:
  8307  003ED0  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  8308  003ED4  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8309  003ED8  0012               	return		;funcret
  8310  003EDA                     __end_of___lwdiv:
  8311                           	opt stack 0
  8312                           tblptru	equ	0xFF8
  8313                           tblptrh	equ	0xFF7
  8314                           tblptrl	equ	0xFF6
  8315                           tablat	equ	0xFF5
  8316                           prodh	equ	0xFF4
  8317                           prodl	equ	0xFF3
  8318                           intcon	equ	0xFF2
  8319                           intcon2	equ	0xFF1
  8320                           indf0	equ	0xFEF
  8321                           postinc0	equ	0xFEE
  8322                           fsr0h	equ	0xFEA
  8323                           fsr0l	equ	0xFE9
  8324                           wreg	equ	0xFE8
  8325                           indf1	equ	0xFE7
  8326                           fsr1h	equ	0xFE2
  8327                           fsr1l	equ	0xFE1
  8328                           indf2	equ	0xFDF
  8329                           postinc2	equ	0xFDE
  8330                           postdec2	equ	0xFDD
  8331                           fsr2h	equ	0xFDA
  8332                           fsr2l	equ	0xFD9
  8333                           status	equ	0xFD8
  8334                           
  8335 ;; *************** function ___ftsub *****************
  8336 ;; Defined at:
  8337 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftsub.c"
  8338 ;; Parameters:    Size  Location     Type
  8339 ;;  f1              3    3[BANK0 ] float 
  8340 ;;  f2              3    6[BANK0 ] float 
  8341 ;; Auto vars:     Size  Location     Type
  8342 ;;		None
  8343 ;; Return value:  Size  Location     Type
  8344 ;;                  3    3[BANK0 ] float 
  8345 ;; Registers used:
  8346 ;;		wreg, status,2, status,0, cstack
  8347 ;; Tracked objects:
  8348 ;;		On entry : 0/0
  8349 ;;		On exit  : 0/0
  8350 ;;		Unchanged: 0/0
  8351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8352 ;;      Params:         0       6       0       0       0       0       0       0       0
  8353 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8354 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8355 ;;      Totals:         0       6       0       0       0       0       0       0       0
  8356 ;;Total ram usage:        6 bytes
  8357 ;; Hardware stack levels used:    1
  8358 ;; Hardware stack levels required when called:    4
  8359 ;; This function calls:
  8360 ;;		___ftadd
  8361 ;; This function is called by:
  8362 ;;		_linearMove2Axis
  8363 ;;		_sprintf
  8364 ;; This function uses a non-reentrant model
  8365 ;;
  8366                           
  8367                           	psect	text30
  8368  00401A                     __ptext30:
  8369                           	opt stack 0
  8370  00401A                     ___ftsub:
  8371                           	opt stack 24
  8372                           
  8373                           ;incstack = 0
  8374  00401A  0100               	movlb	0	; () banked
  8375  00401C  5166               	movf	___ftsub@f2& (0+255),w,b
  8376  00401E  0100               	movlb	0	; () banked
  8377  004020  1167               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  8378  004022  0100               	movlb	0	; () banked
  8379  004024  1168               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  8380  004026  B4D8               	btfsc	status,2,c
  8381  004028  D009               	goto	l5646
  8382                           
  8383                           ; BSR set to: 0
  8384  00402A  0E00               	movlw	0
  8385  00402C  0100               	movlb	0	; () banked
  8386  00402E  1B66               	xorwf	___ftsub@f2& (0+255),f,b
  8387  004030  0E00               	movlw	0
  8388  004032  0100               	movlb	0	; () banked
  8389  004034  1B67               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8390  004036  0E80               	movlw	128
  8391  004038  0100               	movlb	0	; () banked
  8392  00403A  1B68               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8393  00403C                     l5646:
  8394                           
  8395                           ; BSR set to: 0
  8396  00403C  C063  F03D         	movff	___ftsub@f1,___ftadd@f1
  8397  004040  C064  F03E         	movff	___ftsub@f1+1,___ftadd@f1+1
  8398  004044  C065  F03F         	movff	___ftsub@f1+2,___ftadd@f1+2
  8399  004048  C066  F040         	movff	___ftsub@f2,___ftadd@f2
  8400  00404C  C067  F041         	movff	___ftsub@f2+1,___ftadd@f2+1
  8401  004050  C068  F042         	movff	___ftsub@f2+2,___ftadd@f2+2
  8402  004054  ECF0  F016         	call	___ftadd	;wreg free
  8403  004058  C03D  F063         	movff	?___ftadd,?___ftsub
  8404  00405C  C03E  F064         	movff	?___ftadd+1,?___ftsub+1
  8405  004060  C03F  F065         	movff	?___ftadd+2,?___ftsub+2
  8406  004064  0012               	return	
  8407  004066                     __end_of___ftsub:
  8408                           	opt stack 0
  8409                           tblptru	equ	0xFF8
  8410                           tblptrh	equ	0xFF7
  8411                           tblptrl	equ	0xFF6
  8412                           tablat	equ	0xFF5
  8413                           prodh	equ	0xFF4
  8414                           prodl	equ	0xFF3
  8415                           intcon	equ	0xFF2
  8416                           intcon2	equ	0xFF1
  8417                           indf0	equ	0xFEF
  8418                           postinc0	equ	0xFEE
  8419                           fsr0h	equ	0xFEA
  8420                           fsr0l	equ	0xFE9
  8421                           wreg	equ	0xFE8
  8422                           indf1	equ	0xFE7
  8423                           fsr1h	equ	0xFE2
  8424                           fsr1l	equ	0xFE1
  8425                           indf2	equ	0xFDF
  8426                           postinc2	equ	0xFDE
  8427                           postdec2	equ	0xFDD
  8428                           fsr2h	equ	0xFDA
  8429                           fsr2l	equ	0xFD9
  8430                           status	equ	0xFD8
  8431                           
  8432 ;; *************** function _homeAxis *****************
  8433 ;; Defined at:
  8434 ;;		line 677 in file "gcode.c"
  8435 ;; Parameters:    Size  Location     Type
  8436 ;;  axis            1    wreg     unsigned char 
  8437 ;; Auto vars:     Size  Location     Type
  8438 ;;  axis            1   21[BANK0 ] unsigned char 
  8439 ;; Return value:  Size  Location     Type
  8440 ;;                  1    wreg      void 
  8441 ;; Registers used:
  8442 ;;		wreg, status,2, status,0, cstack
  8443 ;; Tracked objects:
  8444 ;;		On entry : 0/0
  8445 ;;		On exit  : 0/0
  8446 ;;		Unchanged: 0/0
  8447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8448 ;;      Params:         0       0       0       0       0       0       0       0       0
  8449 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8450 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8451 ;;      Totals:         0       1       0       0       0       0       0       0       0
  8452 ;;Total ram usage:        1 bytes
  8453 ;; Hardware stack levels used:    1
  8454 ;; Hardware stack levels required when called:    5
  8455 ;; This function calls:
  8456 ;;		_linearMove1Axis
  8457 ;;		_moveToSwitch
  8458 ;; This function is called by:
  8459 ;;		_execGcode
  8460 ;; This function uses a non-reentrant model
  8461 ;;
  8462                           
  8463                           	psect	text31
  8464  004066                     __ptext31:
  8465                           	opt stack 0
  8466  004066                     _homeAxis:
  8467                           	opt stack 23
  8468                           
  8469                           ;incstack = 0
  8470                           ;homeAxis@axis stored from wreg
  8471  004066  0100               	movlb	0	; () banked
  8472  004068  6F75               	movwf	homeAxis@axis& (0+255),b
  8473                           
  8474                           ;gcode.c: 679: moveToSwitch(axis, (2000));
  8475  00406A  0E07               	movlw	7
  8476  00406C  6E44               	movwf	moveToSwitch@speed+1,c
  8477  00406E  0ED0               	movlw	208
  8478  004070  6E43               	movwf	moveToSwitch@speed,c
  8479  004072  0100               	movlb	0	; () banked
  8480  004074  5175               	movf	homeAxis@axis& (0+255),w,b
  8481  004076  ECAA  F019         	call	_moveToSwitch
  8482                           
  8483                           ;gcode.c: 680: linearMove1Axis(axis, 5.0, (300));
  8484  00407A  0E00               	movlw	0
  8485  00407C  0100               	movlb	0	; () banked
  8486  00407E  6F66               	movwf	linearMove1Axis@arg& (0+255),b
  8487  004080  0EA0               	movlw	160
  8488  004082  0100               	movlb	0	; () banked
  8489  004084  6F67               	movwf	(linearMove1Axis@arg+1)& (0+255),b
  8490  004086  0E40               	movlw	64
  8491  004088  0100               	movlb	0	; () banked
  8492  00408A  6F68               	movwf	(linearMove1Axis@arg+2)& (0+255),b
  8493  00408C  0E01               	movlw	1
  8494  00408E  0100               	movlb	0	; () banked
  8495  004090  6F6A               	movwf	(linearMove1Axis@feedrate+1)& (0+255),b
  8496  004092  0E2C               	movlw	44
  8497  004094  6F69               	movwf	linearMove1Axis@feedrate& (0+255),b
  8498  004096  0100               	movlb	0	; () banked
  8499  004098  5175               	movf	homeAxis@axis& (0+255),w,b
  8500  00409A  EC5D  F00B         	call	_linearMove1Axis
  8501                           
  8502                           ;gcode.c: 681: moveToSwitch(axis, (300));
  8503  00409E  0E01               	movlw	1
  8504  0040A0  6E44               	movwf	moveToSwitch@speed+1,c
  8505  0040A2  0E2C               	movlw	44
  8506  0040A4  6E43               	movwf	moveToSwitch@speed,c
  8507  0040A6  0100               	movlb	0	; () banked
  8508  0040A8  5175               	movf	homeAxis@axis& (0+255),w,b
  8509  0040AA  ECAA  F019         	call	_moveToSwitch
  8510  0040AE  0012               	return		;funcret
  8511  0040B0                     __end_of_homeAxis:
  8512                           	opt stack 0
  8513                           tblptru	equ	0xFF8
  8514                           tblptrh	equ	0xFF7
  8515                           tblptrl	equ	0xFF6
  8516                           tablat	equ	0xFF5
  8517                           prodh	equ	0xFF4
  8518                           prodl	equ	0xFF3
  8519                           intcon	equ	0xFF2
  8520                           intcon2	equ	0xFF1
  8521                           indf0	equ	0xFEF
  8522                           postinc0	equ	0xFEE
  8523                           fsr0h	equ	0xFEA
  8524                           fsr0l	equ	0xFE9
  8525                           wreg	equ	0xFE8
  8526                           indf1	equ	0xFE7
  8527                           fsr1h	equ	0xFE2
  8528                           fsr1l	equ	0xFE1
  8529                           indf2	equ	0xFDF
  8530                           postinc2	equ	0xFDE
  8531                           postdec2	equ	0xFDD
  8532                           fsr2h	equ	0xFDA
  8533                           fsr2l	equ	0xFD9
  8534                           status	equ	0xFD8
  8535                           
  8536 ;; *************** function _moveToSwitch *****************
  8537 ;; Defined at:
  8538 ;;		line 691 in file "gcode.c"
  8539 ;; Parameters:    Size  Location     Type
  8540 ;;  axis            1    wreg     unsigned char 
  8541 ;;  speed           2   66[COMRAM] int 
  8542 ;; Auto vars:     Size  Location     Type
  8543 ;;  axis            1    8[BANK0 ] unsigned char 
  8544 ;;  delay           2    9[BANK0 ] unsigned short 
  8545 ;;  limit           2    6[BANK0 ] unsigned short 
  8546 ;; Return value:  Size  Location     Type
  8547 ;;                  1    wreg      void 
  8548 ;; Registers used:
  8549 ;;		wreg, status,2, status,0, cstack
  8550 ;; Tracked objects:
  8551 ;;		On entry : 0/0
  8552 ;;		On exit  : 0/0
  8553 ;;		Unchanged: 0/0
  8554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8555 ;;      Params:         2       0       0       0       0       0       0       0       0
  8556 ;;      Locals:         0       5       0       0       0       0       0       0       0
  8557 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8558 ;;      Totals:         2       5       0       0       0       0       0       0       0
  8559 ;;Total ram usage:        7 bytes
  8560 ;; Hardware stack levels used:    1
  8561 ;; Hardware stack levels required when called:    4
  8562 ;; This function calls:
  8563 ;;		___awtoft
  8564 ;;		___ftdiv
  8565 ;;		___fttol
  8566 ;;		_delay_ms
  8567 ;;		_delay_us
  8568 ;; This function is called by:
  8569 ;;		_homeAxis
  8570 ;; This function uses a non-reentrant model
  8571 ;;
  8572                           
  8573                           	psect	text32
  8574  003354                     __ptext32:
  8575                           	opt stack 0
  8576  003354                     _moveToSwitch:
  8577                           	opt stack 23
  8578                           
  8579                           ;incstack = 0
  8580                           ;moveToSwitch@axis stored from wreg
  8581  003354  0100               	movlb	0	; () banked
  8582  003356  6F68               	movwf	moveToSwitch@axis& (0+255),b
  8583                           
  8584                           ;gcode.c: 693: unsigned short delay;
  8585                           ;gcode.c: 694: unsigned short limit;
  8586                           ;gcode.c: 700: if (axis == 'X')
  8587  003358  0E58               	movlw	88
  8588  00335A  0100               	movlb	0	; () banked
  8589  00335C  1968               	xorwf	moveToSwitch@axis& (0+255),w,b
  8590  00335E  A4D8               	btfss	status,2,c
  8591  003360  D00F               	goto	l5588
  8592                           
  8593                           ; BSR set to: 0
  8594                           ;gcode.c: 701: {
  8595                           ;gcode.c: 704: limit = 1<<4;
  8596  003362  0E00               	movlw	0
  8597  003364  0100               	movlb	0	; () banked
  8598  003366  6F67               	movwf	(moveToSwitch@limit+1)& (0+255),b
  8599  003368  0E10               	movlw	16
  8600  00336A  6F66               	movwf	moveToSwitch@limit& (0+255),b
  8601                           
  8602                           ;gcode.c: 705: XPOS = 0;
  8603  00336C  0E00               	movlw	0
  8604  00336E  0100               	movlb	0	; () banked
  8605  003370  6FE3               	movwf	_XPOS& (0+255),b
  8606  003372  0E00               	movlw	0
  8607  003374  0100               	movlb	0	; () banked
  8608  003376  6FE4               	movwf	(_XPOS+1)& (0+255),b
  8609  003378  0E00               	movlw	0
  8610  00337A  0100               	movlb	0	; () banked
  8611  00337C  6FE5               	movwf	(_XPOS+2)& (0+255),b
  8612                           
  8613                           ;gcode.c: 706: }
  8614  00337E  D013               	goto	l5592
  8615  003380                     l5588:
  8616                           
  8617                           ; BSR set to: 0
  8618                           ;gcode.c: 707: else if (axis == 'Y')
  8619  003380  0E59               	movlw	89
  8620  003382  0100               	movlb	0	; () banked
  8621  003384  1968               	xorwf	moveToSwitch@axis& (0+255),w,b
  8622  003386  A4D8               	btfss	status,2,c
  8623  003388  D00E               	goto	l5592
  8624                           
  8625                           ; BSR set to: 0
  8626                           ;gcode.c: 708: {
  8627                           ;gcode.c: 711: limit = 1<<5;
  8628  00338A  0E00               	movlw	0
  8629  00338C  0100               	movlb	0	; () banked
  8630  00338E  6F67               	movwf	(moveToSwitch@limit+1)& (0+255),b
  8631  003390  0E20               	movlw	32
  8632  003392  6F66               	movwf	moveToSwitch@limit& (0+255),b
  8633                           
  8634                           ;gcode.c: 712: YPOS = 0;
  8635  003394  0E00               	movlw	0
  8636  003396  0100               	movlb	0	; () banked
  8637  003398  6FE6               	movwf	_YPOS& (0+255),b
  8638  00339A  0E00               	movlw	0
  8639  00339C  0100               	movlb	0	; () banked
  8640  00339E  6FE7               	movwf	(_YPOS+1)& (0+255),b
  8641  0033A0  0E00               	movlw	0
  8642  0033A2  0100               	movlb	0	; () banked
  8643  0033A4  6FE8               	movwf	(_YPOS+2)& (0+255),b
  8644  0033A6                     l5592:
  8645                           
  8646                           ; BSR set to: 0
  8647                           ;gcode.c: 713: }
  8648                           ;gcode.c: 722: LATAbits.LATA4 = 0;
  8649  0033A6  9889               	bcf	3977,4,c	;volatile
  8650                           
  8651                           ; BSR set to: 0
  8652                           ;gcode.c: 723: LATEbits.LATE0 = 0;
  8653  0033A8  908D               	bcf	3981,0,c	;volatile
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;gcode.c: 724: LATCbits.LATC2 = 0;
  8657  0033AA  948B               	bcf	3979,2,c	;volatile
  8658                           
  8659                           ; BSR set to: 0
  8660                           ;gcode.c: 725: LATDbits.LATD0 = 0;
  8661  0033AC  908C               	bcf	3980,0,c	;volatile
  8662                           
  8663                           ; BSR set to: 0
  8664                           ;gcode.c: 727: delay_ms(1);
  8665  0033AE  0E00               	movlw	0
  8666  0033B0  6E11               	movwf	delay_ms@ms+1,c
  8667  0033B2  0E01               	movlw	1
  8668  0033B4  6E10               	movwf	delay_ms@ms,c
  8669  0033B6  ECE5  F01F         	call	_delay_ms	;wreg free
  8670                           
  8671                           ;gcode.c: 733: delay = (30000000 / (6.267176 * (16)))/speed;
  8672  0033BA  C043  F018         	movff	moveToSwitch@speed,___awtoft@c
  8673  0033BE  C044  F019         	movff	moveToSwitch@speed+1,___awtoft@c+1
  8674  0033C2  ECB1  F020         	call	___awtoft	;wreg free
  8675  0033C6  C018  F01F         	movff	?___awtoft,___ftdiv@f2
  8676  0033CA  C019  F020         	movff	?___awtoft+1,___ftdiv@f2+1
  8677  0033CE  C01A  F021         	movff	?___awtoft+2,___ftdiv@f2+2
  8678  0033D2  0E15               	movlw	21
  8679  0033D4  6E1C               	movwf	___ftdiv@f1,c
  8680  0033D6  0E92               	movlw	146
  8681  0033D8  6E1D               	movwf	___ftdiv@f1+1,c
  8682  0033DA  0E48               	movlw	72
  8683  0033DC  6E1E               	movwf	___ftdiv@f1+2,c
  8684  0033DE  ECA7  F01A         	call	___ftdiv	;wreg free
  8685  0033E2  C01C  F03A         	movff	?___ftdiv,___fttol@f1
  8686  0033E6  C01D  F03B         	movff	?___ftdiv+1,___fttol@f1+1
  8687  0033EA  C01E  F03C         	movff	?___ftdiv+2,___fttol@f1+2
  8688  0033EE  EC1C  F019         	call	___fttol	;wreg free
  8689  0033F2  C03A  F069         	movff	?___fttol,moveToSwitch@delay
  8690  0033F6  C03B  F06A         	movff	?___fttol+1,moveToSwitch@delay+1
  8691  0033FA                     l5604:
  8692                           
  8693                           ;gcode.c: 736: {
  8694                           ;gcode.c: 738: if (axis == 'X')
  8695  0033FA  0E58               	movlw	88
  8696  0033FC  0100               	movlb	0	; () banked
  8697  0033FE  1968               	xorwf	moveToSwitch@axis& (0+255),w,b
  8698  003400  A4D8               	btfss	status,2,c
  8699  003402  D00F               	goto	l5612
  8700                           
  8701                           ; BSR set to: 0
  8702                           ;gcode.c: 739: {
  8703                           ;gcode.c: 740: LATAbits.LATA5 = 1;
  8704  003404  8A89               	bsf	3977,5,c	;volatile
  8705                           
  8706                           ; BSR set to: 0
  8707                           ;gcode.c: 741: delay_us(delay);
  8708  003406  C069  F010         	movff	moveToSwitch@delay,delay_us@us
  8709  00340A  C06A  F011         	movff	moveToSwitch@delay+1,delay_us@us+1
  8710  00340E  EC77  F020         	call	_delay_us	;wreg free
  8711                           
  8712                           ;gcode.c: 742: LATAbits.LATA5 = 0;
  8713  003412  9A89               	bcf	3977,5,c	;volatile
  8714                           
  8715                           ;gcode.c: 743: delay_us(delay);
  8716  003414  C069  F010         	movff	moveToSwitch@delay,delay_us@us
  8717  003418  C06A  F011         	movff	moveToSwitch@delay+1,delay_us@us+1
  8718  00341C  EC77  F020         	call	_delay_us	;wreg free
  8719                           
  8720                           ;gcode.c: 744: }
  8721  003420  D015               	goto	l5622
  8722  003422                     l5612:
  8723                           
  8724                           ;gcode.c: 745: else if (axis == 'Y')
  8725  003422  0E59               	movlw	89
  8726  003424  0100               	movlb	0	; () banked
  8727  003426  1968               	xorwf	moveToSwitch@axis& (0+255),w,b
  8728  003428  A4D8               	btfss	status,2,c
  8729  00342A  D010               	goto	l5622
  8730                           
  8731                           ; BSR set to: 0
  8732                           ;gcode.c: 746: {
  8733                           ;gcode.c: 747: LATEbits.LATE1 = 1;
  8734  00342C  828D               	bsf	3981,1,c	;volatile
  8735                           
  8736                           ;gcode.c: 748: LATCbits.LATC1 = 1;
  8737  00342E  828B               	bsf	3979,1,c	;volatile
  8738                           
  8739                           ; BSR set to: 0
  8740                           ;gcode.c: 749: delay_us(delay);
  8741  003430  C069  F010         	movff	moveToSwitch@delay,delay_us@us
  8742  003434  C06A  F011         	movff	moveToSwitch@delay+1,delay_us@us+1
  8743  003438  EC77  F020         	call	_delay_us	;wreg free
  8744                           
  8745                           ;gcode.c: 750: LATEbits.LATE1 = 0;
  8746  00343C  928D               	bcf	3981,1,c	;volatile
  8747                           
  8748                           ;gcode.c: 751: LATCbits.LATC1 = 0;
  8749  00343E  928B               	bcf	3979,1,c	;volatile
  8750                           
  8751                           ;gcode.c: 752: delay_us(delay);
  8752  003440  C069  F010         	movff	moveToSwitch@delay,delay_us@us
  8753  003444  C06A  F011         	movff	moveToSwitch@delay+1,delay_us@us+1
  8754  003448  EC77  F020         	call	_delay_us	;wreg free
  8755  00344C                     l5622:
  8756                           
  8757                           ;gcode.c: 753: }
  8758                           ;gcode.c: 755: if ((PORTB & limit) == 0) {break;}
  8759  00344C  5081               	movf	3969,w,c	;volatile
  8760  00344E  0100               	movlb	0	; () banked
  8761  003450  1566               	andwf	moveToSwitch@limit& (0+255),w,b
  8762  003452  0900               	iorlw	0
  8763  003454  B4D8               	btfsc	status,2,c
  8764  003456  0012               	return	
  8765  003458  D7D0               	goto	l5604
  8766  00345A                     __end_of_moveToSwitch:
  8767                           	opt stack 0
  8768                           tblptru	equ	0xFF8
  8769                           tblptrh	equ	0xFF7
  8770                           tblptrl	equ	0xFF6
  8771                           tablat	equ	0xFF5
  8772                           prodh	equ	0xFF4
  8773                           prodl	equ	0xFF3
  8774                           intcon	equ	0xFF2
  8775                           intcon2	equ	0xFF1
  8776                           indf0	equ	0xFEF
  8777                           postinc0	equ	0xFEE
  8778                           fsr0h	equ	0xFEA
  8779                           fsr0l	equ	0xFE9
  8780                           wreg	equ	0xFE8
  8781                           indf1	equ	0xFE7
  8782                           fsr1h	equ	0xFE2
  8783                           fsr1l	equ	0xFE1
  8784                           indf2	equ	0xFDF
  8785                           postinc2	equ	0xFDE
  8786                           postdec2	equ	0xFDD
  8787                           fsr2h	equ	0xFDA
  8788                           fsr2l	equ	0xFD9
  8789                           status	equ	0xFD8
  8790                           
  8791 ;; *************** function ___awtoft *****************
  8792 ;; Defined at:
  8793 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awtoft.c"
  8794 ;; Parameters:    Size  Location     Type
  8795 ;;  c               2   23[COMRAM] int 
  8796 ;; Auto vars:     Size  Location     Type
  8797 ;;  sign            1   26[COMRAM] unsigned char 
  8798 ;; Return value:  Size  Location     Type
  8799 ;;                  3   23[COMRAM] float 
  8800 ;; Registers used:
  8801 ;;		wreg, status,2, status,0, cstack
  8802 ;; Tracked objects:
  8803 ;;		On entry : 0/0
  8804 ;;		On exit  : 0/0
  8805 ;;		Unchanged: 0/0
  8806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8807 ;;      Params:         3       0       0       0       0       0       0       0       0
  8808 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8809 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8810 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8811 ;;Total ram usage:        4 bytes
  8812 ;; Hardware stack levels used:    1
  8813 ;; Hardware stack levels required when called:    3
  8814 ;; This function calls:
  8815 ;;		___ftpack
  8816 ;; This function is called by:
  8817 ;;		_moveToSwitch
  8818 ;; This function uses a non-reentrant model
  8819 ;;
  8820                           
  8821                           	psect	text33
  8822  004162                     __ptext33:
  8823                           	opt stack 0
  8824  004162                     ___awtoft:
  8825                           	opt stack 23
  8826                           
  8827                           ; BSR set to: 0
  8828                           ;incstack = 0
  8829  004162  0E00               	movlw	0
  8830  004164  6E1B               	movwf	___awtoft@sign,c
  8831  004166  AE19               	btfss	___awtoft@c+1,7,c
  8832  004168  D006               	goto	l5356
  8833  00416A  6C18               	negf	___awtoft@c,c
  8834  00416C  1E19               	comf	___awtoft@c+1,f,c
  8835  00416E  B0D8               	btfsc	status,0,c
  8836  004170  2A19               	incf	___awtoft@c+1,f,c
  8837  004172  0E01               	movlw	1
  8838  004174  6E1B               	movwf	___awtoft@sign,c
  8839  004176                     l5356:
  8840  004176  C018  F010         	movff	___awtoft@c,___ftpack@arg
  8841  00417A  C019  F011         	movff	___awtoft@c+1,___ftpack@arg+1
  8842  00417E  6A12               	clrf	___ftpack@arg+2,c
  8843  004180  0E8E               	movlw	142
  8844  004182  6E13               	movwf	___ftpack@exp,c
  8845  004184  C01B  F014         	movff	___awtoft@sign,___ftpack@sign
  8846  004188  EC3D  F01C         	call	___ftpack	;wreg free
  8847  00418C  C010  F018         	movff	?___ftpack,?___awtoft
  8848  004190  C011  F019         	movff	?___ftpack+1,?___awtoft+1
  8849  004194  C012  F01A         	movff	?___ftpack+2,?___awtoft+2
  8850  004198  0012               	return	
  8851  00419A                     __end_of___awtoft:
  8852                           	opt stack 0
  8853                           tblptru	equ	0xFF8
  8854                           tblptrh	equ	0xFF7
  8855                           tblptrl	equ	0xFF6
  8856                           tablat	equ	0xFF5
  8857                           prodh	equ	0xFF4
  8858                           prodl	equ	0xFF3
  8859                           intcon	equ	0xFF2
  8860                           intcon2	equ	0xFF1
  8861                           indf0	equ	0xFEF
  8862                           postinc0	equ	0xFEE
  8863                           fsr0h	equ	0xFEA
  8864                           fsr0l	equ	0xFE9
  8865                           wreg	equ	0xFE8
  8866                           indf1	equ	0xFE7
  8867                           fsr1h	equ	0xFE2
  8868                           fsr1l	equ	0xFE1
  8869                           indf2	equ	0xFDF
  8870                           postinc2	equ	0xFDE
  8871                           postdec2	equ	0xFDD
  8872                           fsr2h	equ	0xFDA
  8873                           fsr2l	equ	0xFD9
  8874                           status	equ	0xFD8
  8875                           
  8876 ;; *************** function _linearMove1Axis *****************
  8877 ;; Defined at:
  8878 ;;		line 216 in file "gcode.c"
  8879 ;; Parameters:    Size  Location     Type
  8880 ;;  axis            1    wreg     unsigned char 
  8881 ;;  arg             3    6[BANK0 ] unsigned char 
  8882 ;;  feedrate        2    9[BANK0 ] unsigned short 
  8883 ;; Auto vars:     Size  Location     Type
  8884 ;;  axis            1   20[BANK0 ] unsigned char 
  8885 ;;  del             3   13[BANK0 ] unsigned char 
  8886 ;;  calc_delay      2   18[BANK0 ] unsigned short 
  8887 ;;  i               2   16[BANK0 ] unsigned int 
  8888 ;;  steps           2   11[BANK0 ] unsigned int 
  8889 ;;  halfdelay       2    0        unsigned short 
  8890 ;; Return value:  Size  Location     Type
  8891 ;;                  1    wreg      enum E4563
  8892 ;; Registers used:
  8893 ;;		wreg, status,2, status,0, cstack
  8894 ;; Tracked objects:
  8895 ;;		On entry : 0/0
  8896 ;;		On exit  : 0/0
  8897 ;;		Unchanged: 0/0
  8898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8899 ;;      Params:         0       5       0       0       0       0       0       0       0
  8900 ;;      Locals:         0      10       0       0       0       0       0       0       0
  8901 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8902 ;;      Totals:         0      15       0       0       0       0       0       0       0
  8903 ;;Total ram usage:       15 bytes
  8904 ;; Hardware stack levels used:    1
  8905 ;; Hardware stack levels required when called:    4
  8906 ;; This function calls:
  8907 ;;		___ftadd
  8908 ;;		___ftdiv
  8909 ;;		___ftge
  8910 ;;		___ftmul
  8911 ;;		___ftneg
  8912 ;;		___fttol
  8913 ;;		___lwtoft
  8914 ;;		_delay_ms
  8915 ;;		_delay_us
  8916 ;; This function is called by:
  8917 ;;		_execGcode
  8918 ;;		_linearMove2Axis
  8919 ;;		_homeAxis
  8920 ;; This function uses a non-reentrant model
  8921 ;;
  8922                           
  8923                           	psect	text34
  8924  0016BA                     __ptext34:
  8925                           	opt stack 0
  8926  0016BA                     _linearMove1Axis:
  8927                           	opt stack 23
  8928                           
  8929                           ;incstack = 0
  8930                           ;linearMove1Axis@axis stored from wreg
  8931  0016BA  0100               	movlb	0	; () banked
  8932  0016BC  6F74               	movwf	linearMove1Axis@axis& (0+255),b
  8933                           
  8934                           ;gcode.c: 218: unsigned int i, steps;
  8935                           ;gcode.c: 219: double del;
  8936                           ;gcode.c: 220: unsigned short calc_delay, halfdelay;
  8937                           ;gcode.c: 229: if ( (arg < 0) && (axis != 'R') ) {return G_OUT_OF_BOUNDS;}
  8938  0016BE  0100               	movlb	0	; () banked
  8939  0016C0  AF68               	btfss	(linearMove1Axis@arg+2)& (0+255),7,b
  8940  0016C2  D007               	goto	l5418
  8941                           
  8942                           ; BSR set to: 0
  8943  0016C4  0E52               	movlw	82
  8944  0016C6  0100               	movlb	0	; () banked
  8945  0016C8  1974               	xorwf	linearMove1Axis@axis& (0+255),w,b
  8946  0016CA  B4D8               	btfsc	status,2,c
  8947  0016CC  D002               	goto	l5418
  8948                           
  8949                           ; BSR set to: 0
  8950  0016CE  0E03               	movlw	3
  8951                           
  8952                           ; BSR set to: 0
  8953  0016D0  0012               	return	
  8954  0016D2                     l5418:
  8955                           
  8956                           ; BSR set to: 0
  8957                           ;gcode.c: 306: if (axis == 'X')
  8958  0016D2  0E58               	movlw	88
  8959  0016D4  0100               	movlb	0	; () banked
  8960  0016D6  1974               	xorwf	linearMove1Axis@axis& (0+255),w,b
  8961  0016D8  A4D8               	btfss	status,2,c
  8962  0016DA  D035               	goto	l5430
  8963                           
  8964                           ; BSR set to: 0
  8965                           ;gcode.c: 307: {
  8966                           ;gcode.c: 308: if (arg > (340)) {return G_OUT_OF_BOUNDS;}
  8967  0016DC  0E00               	movlw	0
  8968  0016DE  6E10               	movwf	___ftge@ff1,c
  8969  0016E0  0EAA               	movlw	170
  8970  0016E2  6E11               	movwf	___ftge@ff1+1,c
  8971  0016E4  0E43               	movlw	67
  8972  0016E6  6E12               	movwf	___ftge@ff1+2,c
  8973  0016E8  C066  F013         	movff	linearMove1Axis@arg,___ftge@ff2
  8974  0016EC  C067  F014         	movff	linearMove1Axis@arg+1,___ftge@ff2+1
  8975  0016F0  C068  F015         	movff	linearMove1Axis@arg+2,___ftge@ff2+2
  8976  0016F4  EC94  F01C         	call	___ftge	;wreg free
  8977  0016F8  B0D8               	btfsc	status,0,c
  8978  0016FA  D002               	goto	l5426
  8979  0016FC  0E03               	movlw	3
  8980  0016FE  0012               	return	
  8981  001700                     l5426:
  8982                           
  8983                           ;gcode.c: 309: del = arg - XPOS;
  8984  001700  C0E3  F010         	movff	_XPOS,___ftneg@f1
  8985  001704  C0E4  F011         	movff	_XPOS+1,___ftneg@f1+1
  8986  001708  C0E5  F012         	movff	_XPOS+2,___ftneg@f1+2
  8987  00170C  EC31  F021         	call	___ftneg	;wreg free
  8988  001710  C010  F03D         	movff	?___ftneg,___ftadd@f1
  8989  001714  C011  F03E         	movff	?___ftneg+1,___ftadd@f1+1
  8990  001718  C012  F03F         	movff	?___ftneg+2,___ftadd@f1+2
  8991  00171C  C066  F040         	movff	linearMove1Axis@arg,___ftadd@f2
  8992  001720  C067  F041         	movff	linearMove1Axis@arg+1,___ftadd@f2+1
  8993  001724  C068  F042         	movff	linearMove1Axis@arg+2,___ftadd@f2+2
  8994  001728  ECF0  F016         	call	___ftadd	;wreg free
  8995  00172C  C03D  F06D         	movff	?___ftadd,linearMove1Axis@del
  8996  001730  C03E  F06E         	movff	?___ftadd+1,linearMove1Axis@del+1
  8997  001734  C03F  F06F         	movff	?___ftadd+2,linearMove1Axis@del+2
  8998                           
  8999                           ;gcode.c: 310: XPOS = arg;
  9000  001738  C066  F0E3         	movff	linearMove1Axis@arg,_XPOS
  9001  00173C  C067  F0E4         	movff	linearMove1Axis@arg+1,_XPOS+1
  9002  001740  C068  F0E5         	movff	linearMove1Axis@arg+2,_XPOS+2
  9003                           
  9004                           ;gcode.c: 312: }
  9005  001744  D0D1               	goto	l255
  9006  001746                     l5430:
  9007                           
  9008                           ;gcode.c: 313: else if (axis == 'Y')
  9009  001746  0E59               	movlw	89
  9010  001748  0100               	movlb	0	; () banked
  9011  00174A  1974               	xorwf	linearMove1Axis@axis& (0+255),w,b
  9012  00174C  A4D8               	btfss	status,2,c
  9013  00174E  D035               	goto	l5442
  9014                           
  9015                           ; BSR set to: 0
  9016                           ;gcode.c: 314: {
  9017                           ;gcode.c: 315: if (arg > (340)) {return G_OUT_OF_BOUNDS;}
  9018  001750  0E00               	movlw	0
  9019  001752  6E10               	movwf	___ftge@ff1,c
  9020  001754  0EAA               	movlw	170
  9021  001756  6E11               	movwf	___ftge@ff1+1,c
  9022  001758  0E43               	movlw	67
  9023  00175A  6E12               	movwf	___ftge@ff1+2,c
  9024  00175C  C066  F013         	movff	linearMove1Axis@arg,___ftge@ff2
  9025  001760  C067  F014         	movff	linearMove1Axis@arg+1,___ftge@ff2+1
  9026  001764  C068  F015         	movff	linearMove1Axis@arg+2,___ftge@ff2+2
  9027  001768  EC94  F01C         	call	___ftge	;wreg free
  9028  00176C  B0D8               	btfsc	status,0,c
  9029  00176E  D002               	goto	l5438
  9030  001770  0E03               	movlw	3
  9031  001772  0012               	return	
  9032  001774                     l5438:
  9033                           
  9034                           ;gcode.c: 316: del = arg - YPOS;
  9035  001774  C0E6  F010         	movff	_YPOS,___ftneg@f1
  9036  001778  C0E7  F011         	movff	_YPOS+1,___ftneg@f1+1
  9037  00177C  C0E8  F012         	movff	_YPOS+2,___ftneg@f1+2
  9038  001780  EC31  F021         	call	___ftneg	;wreg free
  9039  001784  C010  F03D         	movff	?___ftneg,___ftadd@f1
  9040  001788  C011  F03E         	movff	?___ftneg+1,___ftadd@f1+1
  9041  00178C  C012  F03F         	movff	?___ftneg+2,___ftadd@f1+2
  9042  001790  C066  F040         	movff	linearMove1Axis@arg,___ftadd@f2
  9043  001794  C067  F041         	movff	linearMove1Axis@arg+1,___ftadd@f2+1
  9044  001798  C068  F042         	movff	linearMove1Axis@arg+2,___ftadd@f2+2
  9045  00179C  ECF0  F016         	call	___ftadd	;wreg free
  9046  0017A0  C03D  F06D         	movff	?___ftadd,linearMove1Axis@del
  9047  0017A4  C03E  F06E         	movff	?___ftadd+1,linearMove1Axis@del+1
  9048  0017A8  C03F  F06F         	movff	?___ftadd+2,linearMove1Axis@del+2
  9049                           
  9050                           ;gcode.c: 317: YPOS = arg;
  9051  0017AC  C066  F0E6         	movff	linearMove1Axis@arg,_YPOS
  9052  0017B0  C067  F0E7         	movff	linearMove1Axis@arg+1,_YPOS+1
  9053  0017B4  C068  F0E8         	movff	linearMove1Axis@arg+2,_YPOS+2
  9054                           
  9055                           ;gcode.c: 320: }
  9056  0017B8  D097               	goto	l255
  9057  0017BA                     l5442:
  9058                           
  9059                           ;gcode.c: 321: else if (axis == 'Z')
  9060  0017BA  0E5A               	movlw	90
  9061  0017BC  0100               	movlb	0	; () banked
  9062  0017BE  1974               	xorwf	linearMove1Axis@axis& (0+255),w,b
  9063  0017C0  A4D8               	btfss	status,2,c
  9064  0017C2  D035               	goto	l5454
  9065                           
  9066                           ; BSR set to: 0
  9067                           ;gcode.c: 322: {
  9068                           ;gcode.c: 323: if (arg > (10)) {return G_OUT_OF_BOUNDS;}
  9069  0017C4  0E00               	movlw	0
  9070  0017C6  6E10               	movwf	___ftge@ff1,c
  9071  0017C8  0E20               	movlw	32
  9072  0017CA  6E11               	movwf	___ftge@ff1+1,c
  9073  0017CC  0E41               	movlw	65
  9074  0017CE  6E12               	movwf	___ftge@ff1+2,c
  9075  0017D0  C066  F013         	movff	linearMove1Axis@arg,___ftge@ff2
  9076  0017D4  C067  F014         	movff	linearMove1Axis@arg+1,___ftge@ff2+1
  9077  0017D8  C068  F015         	movff	linearMove1Axis@arg+2,___ftge@ff2+2
  9078  0017DC  EC94  F01C         	call	___ftge	;wreg free
  9079  0017E0  B0D8               	btfsc	status,0,c
  9080  0017E2  D002               	goto	l5450
  9081  0017E4  0E03               	movlw	3
  9082  0017E6  0012               	return	
  9083  0017E8                     l5450:
  9084                           
  9085                           ;gcode.c: 324: del = arg - ZPOS;
  9086  0017E8  C0E9  F010         	movff	_ZPOS,___ftneg@f1
  9087  0017EC  C0EA  F011         	movff	_ZPOS+1,___ftneg@f1+1
  9088  0017F0  C0EB  F012         	movff	_ZPOS+2,___ftneg@f1+2
  9089  0017F4  EC31  F021         	call	___ftneg	;wreg free
  9090  0017F8  C010  F03D         	movff	?___ftneg,___ftadd@f1
  9091  0017FC  C011  F03E         	movff	?___ftneg+1,___ftadd@f1+1
  9092  001800  C012  F03F         	movff	?___ftneg+2,___ftadd@f1+2
  9093  001804  C066  F040         	movff	linearMove1Axis@arg,___ftadd@f2
  9094  001808  C067  F041         	movff	linearMove1Axis@arg+1,___ftadd@f2+1
  9095  00180C  C068  F042         	movff	linearMove1Axis@arg+2,___ftadd@f2+2
  9096  001810  ECF0  F016         	call	___ftadd	;wreg free
  9097  001814  C03D  F06D         	movff	?___ftadd,linearMove1Axis@del
  9098  001818  C03E  F06E         	movff	?___ftadd+1,linearMove1Axis@del+1
  9099  00181C  C03F  F06F         	movff	?___ftadd+2,linearMove1Axis@del+2
  9100                           
  9101                           ;gcode.c: 325: ZPOS = arg;
  9102  001820  C066  F0E9         	movff	linearMove1Axis@arg,_ZPOS
  9103  001824  C067  F0EA         	movff	linearMove1Axis@arg+1,_ZPOS+1
  9104  001828  C068  F0EB         	movff	linearMove1Axis@arg+2,_ZPOS+2
  9105                           
  9106                           ;gcode.c: 328: }
  9107  00182C  D05D               	goto	l255
  9108  00182E                     l5454:
  9109                           
  9110                           ;gcode.c: 329: else if (axis == 'R')
  9111  00182E  0E52               	movlw	82
  9112  001830  0100               	movlb	0	; () banked
  9113  001832  1974               	xorwf	linearMove1Axis@axis& (0+255),w,b
  9114  001834  A4D8               	btfss	status,2,c
  9115  001836  D058               	goto	l255
  9116                           
  9117                           ; BSR set to: 0
  9118                           ;gcode.c: 330: {
  9119                           ;gcode.c: 333: arg *= 0.175;
  9120  001838  C066  F024         	movff	linearMove1Axis@arg,___ftmul@f1
  9121  00183C  C067  F025         	movff	linearMove1Axis@arg+1,___ftmul@f1+1
  9122  001840  C068  F026         	movff	linearMove1Axis@arg+2,___ftmul@f1+2
  9123  001844  0E33               	movlw	51
  9124  001846  6E27               	movwf	___ftmul@f2,c
  9125  001848  0E33               	movlw	51
  9126  00184A  6E28               	movwf	___ftmul@f2+1,c
  9127  00184C  0E3E               	movlw	62
  9128  00184E  6E29               	movwf	___ftmul@f2+2,c
  9129  001850  EC2D  F01A         	call	___ftmul	;wreg free
  9130  001854  C024  F066         	movff	?___ftmul,linearMove1Axis@arg
  9131  001858  C025  F067         	movff	?___ftmul+1,linearMove1Axis@arg+1
  9132  00185C  C026  F068         	movff	?___ftmul+2,linearMove1Axis@arg+2
  9133                           
  9134                           ;gcode.c: 335: if ( (arg < (-180)) || (arg > (180)) ) {return G_OUT_OF_BOUNDS;}
  9135  001860  C066  F010         	movff	linearMove1Axis@arg,___ftge@ff1
  9136  001864  C067  F011         	movff	linearMove1Axis@arg+1,___ftge@ff1+1
  9137  001868  C068  F012         	movff	linearMove1Axis@arg+2,___ftge@ff1+2
  9138  00186C  0E00               	movlw	0
  9139  00186E  6E13               	movwf	___ftge@ff2,c
  9140  001870  0E34               	movlw	52
  9141  001872  6E14               	movwf	___ftge@ff2+1,c
  9142  001874  0EC3               	movlw	195
  9143  001876  6E15               	movwf	___ftge@ff2+2,c
  9144  001878  EC94  F01C         	call	___ftge	;wreg free
  9145  00187C  A0D8               	btfss	status,0,c
  9146  00187E  D010               	goto	l5460
  9147  001880  0E00               	movlw	0
  9148  001882  6E10               	movwf	___ftge@ff1,c
  9149  001884  0E34               	movlw	52
  9150  001886  6E11               	movwf	___ftge@ff1+1,c
  9151  001888  0E43               	movlw	67
  9152  00188A  6E12               	movwf	___ftge@ff1+2,c
  9153  00188C  C066  F013         	movff	linearMove1Axis@arg,___ftge@ff2
  9154  001890  C067  F014         	movff	linearMove1Axis@arg+1,___ftge@ff2+1
  9155  001894  C068  F015         	movff	linearMove1Axis@arg+2,___ftge@ff2+2
  9156  001898  EC94  F01C         	call	___ftge	;wreg free
  9157  00189C  B0D8               	btfsc	status,0,c
  9158  00189E  D002               	goto	l5464
  9159  0018A0                     l5460:
  9160  0018A0  0E03               	movlw	3
  9161  0018A2  0012               	return	
  9162  0018A4                     l5464:
  9163                           
  9164                           ;gcode.c: 336: del = arg - RPOS;
  9165  0018A4  C046  F010         	movff	_RPOS,___ftneg@f1
  9166  0018A8  C047  F011         	movff	_RPOS+1,___ftneg@f1+1
  9167  0018AC  C048  F012         	movff	_RPOS+2,___ftneg@f1+2
  9168  0018B0  EC31  F021         	call	___ftneg	;wreg free
  9169  0018B4  C010  F03D         	movff	?___ftneg,___ftadd@f1
  9170  0018B8  C011  F03E         	movff	?___ftneg+1,___ftadd@f1+1
  9171  0018BC  C012  F03F         	movff	?___ftneg+2,___ftadd@f1+2
  9172  0018C0  C066  F040         	movff	linearMove1Axis@arg,___ftadd@f2
  9173  0018C4  C067  F041         	movff	linearMove1Axis@arg+1,___ftadd@f2+1
  9174  0018C8  C068  F042         	movff	linearMove1Axis@arg+2,___ftadd@f2+2
  9175  0018CC  ECF0  F016         	call	___ftadd	;wreg free
  9176  0018D0  C03D  F06D         	movff	?___ftadd,linearMove1Axis@del
  9177  0018D4  C03E  F06E         	movff	?___ftadd+1,linearMove1Axis@del+1
  9178  0018D8  C03F  F06F         	movff	?___ftadd+2,linearMove1Axis@del+2
  9179                           
  9180                           ;gcode.c: 337: RPOS = arg;
  9181  0018DC  C066  F046         	movff	linearMove1Axis@arg,_RPOS
  9182  0018E0  C067  F047         	movff	linearMove1Axis@arg+1,_RPOS+1
  9183  0018E4  C068  F048         	movff	linearMove1Axis@arg+2,_RPOS+2
  9184  0018E8                     l255:
  9185                           
  9186                           ;gcode.c: 340: }
  9187                           ;gcode.c: 342: if (del > 0)
  9188  0018E8  0E00               	movlw	0
  9189  0018EA  6E10               	movwf	___ftge@ff1,c
  9190  0018EC  0E00               	movlw	0
  9191  0018EE  6E11               	movwf	___ftge@ff1+1,c
  9192  0018F0  0E00               	movlw	0
  9193  0018F2  6E12               	movwf	___ftge@ff1+2,c
  9194  0018F4  C06D  F013         	movff	linearMove1Axis@del,___ftge@ff2
  9195  0018F8  C06E  F014         	movff	linearMove1Axis@del+1,___ftge@ff2+1
  9196  0018FC  C06F  F015         	movff	linearMove1Axis@del+2,___ftge@ff2+2
  9197  001900  EC94  F01C         	call	___ftge	;wreg free
  9198  001904  B0D8               	btfsc	status,0,c
  9199  001906  D006               	goto	l266
  9200                           
  9201                           ;gcode.c: 343: {
  9202                           ;gcode.c: 345: LATAbits.LATA4 = 1;
  9203  001908  8889               	bsf	3977,4,c	;volatile
  9204                           
  9205                           ;gcode.c: 346: LATEbits.LATE0 = 1;
  9206  00190A  808D               	bsf	3981,0,c	;volatile
  9207                           
  9208                           ;gcode.c: 347: LATCbits.LATC2 = 1;
  9209  00190C  848B               	bsf	3979,2,c	;volatile
  9210                           
  9211                           ;gcode.c: 348: LATDbits.LATD0 = 1;
  9212  00190E  808C               	bsf	3980,0,c	;volatile
  9213                           
  9214                           ;gcode.c: 349: LATDbits.LATD2 = 1;
  9215  001910  848C               	bsf	3980,2,c	;volatile
  9216                           
  9217                           ;gcode.c: 350: }
  9218  001912  D019               	goto	l267
  9219  001914                     l266:
  9220                           
  9221                           ;gcode.c: 351: else
  9222                           ;gcode.c: 352: {
  9223                           ;gcode.c: 353: LATAbits.LATA4 = 0;
  9224  001914  9889               	bcf	3977,4,c	;volatile
  9225                           
  9226                           ;gcode.c: 354: LATEbits.LATE0 = 0;
  9227  001916  908D               	bcf	3981,0,c	;volatile
  9228                           
  9229                           ;gcode.c: 355: LATCbits.LATC2 = 0;
  9230  001918  948B               	bcf	3979,2,c	;volatile
  9231                           
  9232                           ;gcode.c: 356: LATDbits.LATD0 = 0;
  9233  00191A  908C               	bcf	3980,0,c	;volatile
  9234                           
  9235                           ;gcode.c: 357: LATDbits.LATD2 = 0;
  9236  00191C  948C               	bcf	3980,2,c	;volatile
  9237                           
  9238                           ;gcode.c: 358: del *= -1;
  9239  00191E  C06D  F024         	movff	linearMove1Axis@del,___ftmul@f1
  9240  001922  C06E  F025         	movff	linearMove1Axis@del+1,___ftmul@f1+1
  9241  001926  C06F  F026         	movff	linearMove1Axis@del+2,___ftmul@f1+2
  9242  00192A  0E00               	movlw	0
  9243  00192C  6E27               	movwf	___ftmul@f2,c
  9244  00192E  0E80               	movlw	128
  9245  001930  6E28               	movwf	___ftmul@f2+1,c
  9246  001932  0EBF               	movlw	191
  9247  001934  6E29               	movwf	___ftmul@f2+2,c
  9248  001936  EC2D  F01A         	call	___ftmul	;wreg free
  9249  00193A  C024  F06D         	movff	?___ftmul,linearMove1Axis@del
  9250  00193E  C025  F06E         	movff	?___ftmul+1,linearMove1Axis@del+1
  9251  001942  C026  F06F         	movff	?___ftmul+2,linearMove1Axis@del+2
  9252  001946                     l267:
  9253                           
  9254                           ;gcode.c: 359: }
  9255                           ;gcode.c: 363: delay_ms(50);
  9256  001946  0E00               	movlw	0
  9257  001948  6E11               	movwf	delay_ms@ms+1,c
  9258  00194A  0E32               	movlw	50
  9259  00194C  6E10               	movwf	delay_ms@ms,c
  9260  00194E  ECE5  F01F         	call	_delay_ms	;wreg free
  9261                           
  9262                           ;gcode.c: 367: steps = del*(6.267176 * (16));
  9263  001952  0E8D               	movlw	141
  9264  001954  6E27               	movwf	___ftmul@f2,c
  9265  001956  0EC8               	movlw	200
  9266  001958  6E28               	movwf	___ftmul@f2+1,c
  9267  00195A  0E42               	movlw	66
  9268  00195C  6E29               	movwf	___ftmul@f2+2,c
  9269  00195E  C06D  F024         	movff	linearMove1Axis@del,___ftmul@f1
  9270  001962  C06E  F025         	movff	linearMove1Axis@del+1,___ftmul@f1+1
  9271  001966  C06F  F026         	movff	linearMove1Axis@del+2,___ftmul@f1+2
  9272  00196A  EC2D  F01A         	call	___ftmul	;wreg free
  9273  00196E  C024  F03A         	movff	?___ftmul,___fttol@f1
  9274  001972  C025  F03B         	movff	?___ftmul+1,___fttol@f1+1
  9275  001976  C026  F03C         	movff	?___ftmul+2,___fttol@f1+2
  9276  00197A  EC1C  F019         	call	___fttol	;wreg free
  9277  00197E  C03A  F06B         	movff	?___fttol,linearMove1Axis@steps
  9278  001982  C03B  F06C         	movff	?___fttol+1,linearMove1Axis@steps+1
  9279                           
  9280                           ;gcode.c: 370: if (axis == 'X')
  9281  001986  0E58               	movlw	88
  9282  001988  0100               	movlb	0	; () banked
  9283  00198A  1974               	xorwf	linearMove1Axis@axis& (0+255),w,b
  9284  00198C  A4D8               	btfss	status,2,c
  9285  00198E  D042               	goto	l5486
  9286                           
  9287                           ; BSR set to: 0
  9288                           ;gcode.c: 371: {
  9289                           ;gcode.c: 373: calc_delay = (30000000 / (6.267176 * (16)))/feedrate;
  9290  001990  C069  F018         	movff	linearMove1Axis@feedrate,___lwtoft@c
  9291  001994  C06A  F019         	movff	linearMove1Axis@feedrate+1,___lwtoft@c+1
  9292  001998  EC1F  F021         	call	___lwtoft	;wreg free
  9293  00199C  C018  F01F         	movff	?___lwtoft,___ftdiv@f2
  9294  0019A0  C019  F020         	movff	?___lwtoft+1,___ftdiv@f2+1
  9295  0019A4  C01A  F021         	movff	?___lwtoft+2,___ftdiv@f2+2
  9296  0019A8  0E15               	movlw	21
  9297  0019AA  6E1C               	movwf	___ftdiv@f1,c
  9298  0019AC  0E92               	movlw	146
  9299  0019AE  6E1D               	movwf	___ftdiv@f1+1,c
  9300  0019B0  0E48               	movlw	72
  9301  0019B2  6E1E               	movwf	___ftdiv@f1+2,c
  9302  0019B4  ECA7  F01A         	call	___ftdiv	;wreg free
  9303  0019B8  C01C  F03A         	movff	?___ftdiv,___fttol@f1
  9304  0019BC  C01D  F03B         	movff	?___ftdiv+1,___fttol@f1+1
  9305  0019C0  C01E  F03C         	movff	?___ftdiv+2,___fttol@f1+2
  9306  0019C4  EC1C  F019         	call	___fttol	;wreg free
  9307  0019C8  C03A  F072         	movff	?___fttol,linearMove1Axis@calc_delay
  9308  0019CC  C03B  F073         	movff	?___fttol+1,linearMove1Axis@calc_delay+1
  9309                           
  9310                           ;gcode.c: 374: for (i=0; i<steps; ++i)
  9311  0019D0  0E00               	movlw	0
  9312  0019D2  0100               	movlb	0	; () banked
  9313  0019D4  6F71               	movwf	(linearMove1Axis@i+1)& (0+255),b
  9314  0019D6  0E00               	movlw	0
  9315  0019D8  6F70               	movwf	linearMove1Axis@i& (0+255),b
  9316  0019DA  D011               	goto	l5484
  9317  0019DC                     l270:
  9318                           
  9319                           ; BSR set to: 0
  9320                           ;gcode.c: 375: {
  9321                           ;gcode.c: 378: LATAbits.LATA5 = 1;
  9322  0019DC  8A89               	bsf	3977,5,c	;volatile
  9323                           
  9324                           ; BSR set to: 0
  9325                           ;gcode.c: 379: delay_us(calc_delay);
  9326  0019DE  C072  F010         	movff	linearMove1Axis@calc_delay,delay_us@us
  9327  0019E2  C073  F011         	movff	linearMove1Axis@calc_delay+1,delay_us@us+1
  9328  0019E6  EC77  F020         	call	_delay_us	;wreg free
  9329                           
  9330                           ;gcode.c: 380: LATAbits.LATA5 = 0;
  9331  0019EA  9A89               	bcf	3977,5,c	;volatile
  9332                           
  9333                           ;gcode.c: 381: delay_us(calc_delay);
  9334  0019EC  C072  F010         	movff	linearMove1Axis@calc_delay,delay_us@us
  9335  0019F0  C073  F011         	movff	linearMove1Axis@calc_delay+1,delay_us@us+1
  9336  0019F4  EC77  F020         	call	_delay_us	;wreg free
  9337  0019F8  0100               	movlb	0	; () banked
  9338  0019FA  4B70               	infsnz	linearMove1Axis@i& (0+255),f,b
  9339  0019FC  2B71               	incf	(linearMove1Axis@i+1)& (0+255),f,b
  9340  0019FE                     l5484:
  9341                           
  9342                           ; BSR set to: 0
  9343  0019FE  0100               	movlb	0	; () banked
  9344  001A00  516B               	movf	linearMove1Axis@steps& (0+255),w,b
  9345  001A02  0100               	movlb	0	; () banked
  9346  001A04  5D70               	subwf	linearMove1Axis@i& (0+255),w,b
  9347  001A06  0100               	movlb	0	; () banked
  9348  001A08  516C               	movf	(linearMove1Axis@steps+1)& (0+255),w,b
  9349  001A0A  0100               	movlb	0	; () banked
  9350  001A0C  5971               	subwfb	(linearMove1Axis@i+1)& (0+255),w,b
  9351  001A0E  B0D8               	btfsc	status,0,c
  9352  001A10  D0A1               	goto	l5526
  9353  001A12  D7E4               	goto	l270
  9354  001A14                     l5486:
  9355                           
  9356                           ; BSR set to: 0
  9357                           ;gcode.c: 384: else if (axis == 'Y')
  9358  001A14  0E59               	movlw	89
  9359  001A16  0100               	movlb	0	; () banked
  9360  001A18  1974               	xorwf	linearMove1Axis@axis& (0+255),w,b
  9361  001A1A  A4D8               	btfss	status,2,c
  9362  001A1C  D044               	goto	l5502
  9363                           
  9364                           ; BSR set to: 0
  9365                           ;gcode.c: 385: {
  9366                           ;gcode.c: 387: calc_delay = (30000000 / (6.267176 * (16)))/feedrate;
  9367  001A1E  C069  F018         	movff	linearMove1Axis@feedrate,___lwtoft@c
  9368  001A22  C06A  F019         	movff	linearMove1Axis@feedrate+1,___lwtoft@c+1
  9369  001A26  EC1F  F021         	call	___lwtoft	;wreg free
  9370  001A2A  C018  F01F         	movff	?___lwtoft,___ftdiv@f2
  9371  001A2E  C019  F020         	movff	?___lwtoft+1,___ftdiv@f2+1
  9372  001A32  C01A  F021         	movff	?___lwtoft+2,___ftdiv@f2+2
  9373  001A36  0E15               	movlw	21
  9374  001A38  6E1C               	movwf	___ftdiv@f1,c
  9375  001A3A  0E92               	movlw	146
  9376  001A3C  6E1D               	movwf	___ftdiv@f1+1,c
  9377  001A3E  0E48               	movlw	72
  9378  001A40  6E1E               	movwf	___ftdiv@f1+2,c
  9379  001A42  ECA7  F01A         	call	___ftdiv	;wreg free
  9380  001A46  C01C  F03A         	movff	?___ftdiv,___fttol@f1
  9381  001A4A  C01D  F03B         	movff	?___ftdiv+1,___fttol@f1+1
  9382  001A4E  C01E  F03C         	movff	?___ftdiv+2,___fttol@f1+2
  9383  001A52  EC1C  F019         	call	___fttol	;wreg free
  9384  001A56  C03A  F072         	movff	?___fttol,linearMove1Axis@calc_delay
  9385  001A5A  C03B  F073         	movff	?___fttol+1,linearMove1Axis@calc_delay+1
  9386                           
  9387                           ;gcode.c: 388: for (i=0; i<steps; ++i)
  9388  001A5E  0E00               	movlw	0
  9389  001A60  0100               	movlb	0	; () banked
  9390  001A62  6F71               	movwf	(linearMove1Axis@i+1)& (0+255),b
  9391  001A64  0E00               	movlw	0
  9392  001A66  6F70               	movwf	linearMove1Axis@i& (0+255),b
  9393  001A68  D013               	goto	l5500
  9394  001A6A                     l275:
  9395                           
  9396                           ; BSR set to: 0
  9397                           ;gcode.c: 389: {
  9398                           ;gcode.c: 392: LATEbits.LATE1 = 1;
  9399  001A6A  828D               	bsf	3981,1,c	;volatile
  9400                           
  9401                           ;gcode.c: 393: LATCbits.LATC1 = 1;
  9402  001A6C  828B               	bsf	3979,1,c	;volatile
  9403                           
  9404                           ; BSR set to: 0
  9405                           ;gcode.c: 394: delay_us(calc_delay);
  9406  001A6E  C072  F010         	movff	linearMove1Axis@calc_delay,delay_us@us
  9407  001A72  C073  F011         	movff	linearMove1Axis@calc_delay+1,delay_us@us+1
  9408  001A76  EC77  F020         	call	_delay_us	;wreg free
  9409                           
  9410                           ;gcode.c: 395: LATEbits.LATE1 = 0;
  9411  001A7A  928D               	bcf	3981,1,c	;volatile
  9412                           
  9413                           ;gcode.c: 396: LATCbits.LATC1 = 0;
  9414  001A7C  928B               	bcf	3979,1,c	;volatile
  9415                           
  9416                           ;gcode.c: 397: delay_us(calc_delay);
  9417  001A7E  C072  F010         	movff	linearMove1Axis@calc_delay,delay_us@us
  9418  001A82  C073  F011         	movff	linearMove1Axis@calc_delay+1,delay_us@us+1
  9419  001A86  EC77  F020         	call	_delay_us	;wreg free
  9420  001A8A  0100               	movlb	0	; () banked
  9421  001A8C  4B70               	infsnz	linearMove1Axis@i& (0+255),f,b
  9422  001A8E  2B71               	incf	(linearMove1Axis@i+1)& (0+255),f,b
  9423  001A90                     l5500:
  9424                           
  9425                           ; BSR set to: 0
  9426  001A90  0100               	movlb	0	; () banked
  9427  001A92  516B               	movf	linearMove1Axis@steps& (0+255),w,b
  9428  001A94  0100               	movlb	0	; () banked
  9429  001A96  5D70               	subwf	linearMove1Axis@i& (0+255),w,b
  9430  001A98  0100               	movlb	0	; () banked
  9431  001A9A  516C               	movf	(linearMove1Axis@steps+1)& (0+255),w,b
  9432  001A9C  0100               	movlb	0	; () banked
  9433  001A9E  5971               	subwfb	(linearMove1Axis@i+1)& (0+255),w,b
  9434  001AA0  B0D8               	btfsc	status,0,c
  9435  001AA2  D058               	goto	l5526
  9436  001AA4  D7E2               	goto	l275
  9437  001AA6                     l5502:
  9438                           
  9439                           ; BSR set to: 0
  9440                           ;gcode.c: 400: else if (axis == 'Z')
  9441  001AA6  0E5A               	movlw	90
  9442  001AA8  0100               	movlb	0	; () banked
  9443  001AAA  1974               	xorwf	linearMove1Axis@axis& (0+255),w,b
  9444  001AAC  A4D8               	btfss	status,2,c
  9445  001AAE  D027               	goto	l5514
  9446                           
  9447                           ; BSR set to: 0
  9448                           ;gcode.c: 401: {
  9449                           ;gcode.c: 403: calc_delay = (30000000 / (6.267176 * (16)))/(300);
  9450  001AB0  0E03               	movlw	3
  9451  001AB2  0100               	movlb	0	; () banked
  9452  001AB4  6F73               	movwf	(linearMove1Axis@calc_delay+1)& (0+255),b
  9453  001AB6  0EE5               	movlw	229
  9454  001AB8  6F72               	movwf	linearMove1Axis@calc_delay& (0+255),b
  9455                           
  9456                           ;gcode.c: 404: for (i=0; i<steps; ++i)
  9457  001ABA  0E00               	movlw	0
  9458  001ABC  0100               	movlb	0	; () banked
  9459  001ABE  6F71               	movwf	(linearMove1Axis@i+1)& (0+255),b
  9460  001AC0  0E00               	movlw	0
  9461  001AC2  6F70               	movwf	linearMove1Axis@i& (0+255),b
  9462  001AC4  D011               	goto	l5512
  9463  001AC6                     l280:
  9464                           
  9465                           ; BSR set to: 0
  9466                           ;gcode.c: 405: {
  9467                           ;gcode.c: 408: LATDbits.LATD1 = 1;
  9468  001AC6  828C               	bsf	3980,1,c	;volatile
  9469                           
  9470                           ; BSR set to: 0
  9471                           ;gcode.c: 409: delay_us(calc_delay);
  9472  001AC8  C072  F010         	movff	linearMove1Axis@calc_delay,delay_us@us
  9473  001ACC  C073  F011         	movff	linearMove1Axis@calc_delay+1,delay_us@us+1
  9474  001AD0  EC77  F020         	call	_delay_us	;wreg free
  9475                           
  9476                           ;gcode.c: 410: LATDbits.LATD1 = 0;
  9477  001AD4  928C               	bcf	3980,1,c	;volatile
  9478                           
  9479                           ;gcode.c: 411: delay_us(calc_delay);
  9480  001AD6  C072  F010         	movff	linearMove1Axis@calc_delay,delay_us@us
  9481  001ADA  C073  F011         	movff	linearMove1Axis@calc_delay+1,delay_us@us+1
  9482  001ADE  EC77  F020         	call	_delay_us	;wreg free
  9483  001AE2  0100               	movlb	0	; () banked
  9484  001AE4  4B70               	infsnz	linearMove1Axis@i& (0+255),f,b
  9485  001AE6  2B71               	incf	(linearMove1Axis@i+1)& (0+255),f,b
  9486  001AE8                     l5512:
  9487                           
  9488                           ; BSR set to: 0
  9489  001AE8  0100               	movlb	0	; () banked
  9490  001AEA  516B               	movf	linearMove1Axis@steps& (0+255),w,b
  9491  001AEC  0100               	movlb	0	; () banked
  9492  001AEE  5D70               	subwf	linearMove1Axis@i& (0+255),w,b
  9493  001AF0  0100               	movlb	0	; () banked
  9494  001AF2  516C               	movf	(linearMove1Axis@steps+1)& (0+255),w,b
  9495  001AF4  0100               	movlb	0	; () banked
  9496  001AF6  5971               	subwfb	(linearMove1Axis@i+1)& (0+255),w,b
  9497  001AF8  B0D8               	btfsc	status,0,c
  9498  001AFA  D02C               	goto	l5526
  9499  001AFC  D7E4               	goto	l280
  9500  001AFE                     l5514:
  9501                           
  9502                           ; BSR set to: 0
  9503                           ;gcode.c: 414: else if (axis == 'R')
  9504  001AFE  0E52               	movlw	82
  9505  001B00  0100               	movlb	0	; () banked
  9506  001B02  1974               	xorwf	linearMove1Axis@axis& (0+255),w,b
  9507  001B04  A4D8               	btfss	status,2,c
  9508  001B06  D026               	goto	l5526
  9509                           
  9510                           ; BSR set to: 0
  9511                           ;gcode.c: 415: {
  9512                           ;gcode.c: 417: calc_delay = (30000000 / (6.267176 * (16)))/(300);
  9513  001B08  0E03               	movlw	3
  9514  001B0A  0100               	movlb	0	; () banked
  9515  001B0C  6F73               	movwf	(linearMove1Axis@calc_delay+1)& (0+255),b
  9516  001B0E  0EE5               	movlw	229
  9517  001B10  6F72               	movwf	linearMove1Axis@calc_delay& (0+255),b
  9518                           
  9519                           ;gcode.c: 418: for (i=0; i<steps; ++i)
  9520  001B12  0E00               	movlw	0
  9521  001B14  0100               	movlb	0	; () banked
  9522  001B16  6F71               	movwf	(linearMove1Axis@i+1)& (0+255),b
  9523  001B18  0E00               	movlw	0
  9524  001B1A  6F70               	movwf	linearMove1Axis@i& (0+255),b
  9525  001B1C  D011               	goto	l5524
  9526  001B1E                     l285:
  9527                           
  9528                           ; BSR set to: 0
  9529                           ;gcode.c: 419: {
  9530                           ;gcode.c: 422: LATDbits.LATD3 = 1;
  9531  001B1E  868C               	bsf	3980,3,c	;volatile
  9532                           
  9533                           ; BSR set to: 0
  9534                           ;gcode.c: 423: delay_us(calc_delay);
  9535  001B20  C072  F010         	movff	linearMove1Axis@calc_delay,delay_us@us
  9536  001B24  C073  F011         	movff	linearMove1Axis@calc_delay+1,delay_us@us+1
  9537  001B28  EC77  F020         	call	_delay_us	;wreg free
  9538                           
  9539                           ;gcode.c: 424: LATDbits.LATD3 = 0;
  9540  001B2C  968C               	bcf	3980,3,c	;volatile
  9541                           
  9542                           ;gcode.c: 425: delay_us(calc_delay);
  9543  001B2E  C072  F010         	movff	linearMove1Axis@calc_delay,delay_us@us
  9544  001B32  C073  F011         	movff	linearMove1Axis@calc_delay+1,delay_us@us+1
  9545  001B36  EC77  F020         	call	_delay_us	;wreg free
  9546  001B3A  0100               	movlb	0	; () banked
  9547  001B3C  4B70               	infsnz	linearMove1Axis@i& (0+255),f,b
  9548  001B3E  2B71               	incf	(linearMove1Axis@i+1)& (0+255),f,b
  9549  001B40                     l5524:
  9550                           
  9551                           ; BSR set to: 0
  9552  001B40  0100               	movlb	0	; () banked
  9553  001B42  516B               	movf	linearMove1Axis@steps& (0+255),w,b
  9554  001B44  0100               	movlb	0	; () banked
  9555  001B46  5D70               	subwf	linearMove1Axis@i& (0+255),w,b
  9556  001B48  0100               	movlb	0	; () banked
  9557  001B4A  516C               	movf	(linearMove1Axis@steps+1)& (0+255),w,b
  9558  001B4C  0100               	movlb	0	; () banked
  9559  001B4E  5971               	subwfb	(linearMove1Axis@i+1)& (0+255),w,b
  9560  001B50  A0D8               	btfss	status,0,c
  9561  001B52  D7E5               	goto	l285
  9562  001B54                     l5526:
  9563                           
  9564                           ; BSR set to: 0
  9565                           ;gcode.c: 426: }
  9566                           ;gcode.c: 427: }
  9567                           ;gcode.c: 433: return G_SUCCESS;
  9568  001B54  0E00               	movlw	0
  9569  001B56  0012               	return	
  9570  001B58                     __end_of_linearMove1Axis:
  9571                           	opt stack 0
  9572                           tblptru	equ	0xFF8
  9573                           tblptrh	equ	0xFF7
  9574                           tblptrl	equ	0xFF6
  9575                           tablat	equ	0xFF5
  9576                           prodh	equ	0xFF4
  9577                           prodl	equ	0xFF3
  9578                           intcon	equ	0xFF2
  9579                           intcon2	equ	0xFF1
  9580                           indf0	equ	0xFEF
  9581                           postinc0	equ	0xFEE
  9582                           fsr0h	equ	0xFEA
  9583                           fsr0l	equ	0xFE9
  9584                           wreg	equ	0xFE8
  9585                           indf1	equ	0xFE7
  9586                           fsr1h	equ	0xFE2
  9587                           fsr1l	equ	0xFE1
  9588                           indf2	equ	0xFDF
  9589                           postinc2	equ	0xFDE
  9590                           postdec2	equ	0xFDD
  9591                           fsr2h	equ	0xFDA
  9592                           fsr2l	equ	0xFD9
  9593                           status	equ	0xFD8
  9594                           
  9595 ;; *************** function _delay_us *****************
  9596 ;; Defined at:
  9597 ;;		line 103 in file "system.c"
  9598 ;; Parameters:    Size  Location     Type
  9599 ;;  us              2   15[COMRAM] unsigned short 
  9600 ;; Auto vars:     Size  Location     Type
  9601 ;;  current_time    2   19[COMRAM] unsigned int 
  9602 ;; Return value:  Size  Location     Type
  9603 ;;                  1    wreg      void 
  9604 ;; Registers used:
  9605 ;;		wreg, status,2, status,0
  9606 ;; Tracked objects:
  9607 ;;		On entry : 0/0
  9608 ;;		On exit  : 0/0
  9609 ;;		Unchanged: 0/0
  9610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9611 ;;      Params:         2       0       0       0       0       0       0       0       0
  9612 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9613 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9614 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9615 ;;Total ram usage:        6 bytes
  9616 ;; Hardware stack levels used:    1
  9617 ;; Hardware stack levels required when called:    2
  9618 ;; This function calls:
  9619 ;;		Nothing
  9620 ;; This function is called by:
  9621 ;;		_execGcode
  9622 ;;		_linearMove1Axis
  9623 ;;		_linearMove2Axis
  9624 ;;		_moveToSwitch
  9625 ;; This function uses a non-reentrant model
  9626 ;;
  9627                           
  9628                           	psect	text35
  9629  0040EE                     __ptext35:
  9630                           	opt stack 0
  9631  0040EE                     _delay_us:
  9632                           	opt stack 24
  9633                           
  9634                           ;system.c: 107: unsigned int current_time = SYSTEM_TIME;
  9635                           
  9636                           ;incstack = 0
  9637  0040EE  C049  F014         	movff	_SYSTEM_TIME,delay_us@current_time
  9638  0040F2  C04A  F015         	movff	_SYSTEM_TIME+1,delay_us@current_time+1
  9639                           
  9640                           ;system.c: 108: us >>= 6;
  9641  0040F6  0E06               	movlw	6
  9642  0040F8  6E12               	movwf	??_delay_us& (0+255),c
  9643  0040FA                     u5615:
  9644  0040FA  90D8               	bcf	status,0,c
  9645  0040FC  3211               	rrcf	delay_us@us+1,f,c
  9646  0040FE  3210               	rrcf	delay_us@us,f,c
  9647  004100  2E12               	decfsz	??_delay_us& (0+255),f,c
  9648  004102  D7FB               	goto	u5615
  9649  004104                     l5176:
  9650  004104  C014  F012         	movff	delay_us@current_time,??_delay_us
  9651  004108  C015  F013         	movff	delay_us@current_time+1,??_delay_us+1
  9652  00410C  1E12               	comf	??_delay_us,f,c
  9653  00410E  1E13               	comf	??_delay_us+1,f,c
  9654  004110  4A12               	infsnz	??_delay_us,f,c
  9655  004112  2A13               	incf	??_delay_us+1,f,c
  9656  004114  5049               	movf	_SYSTEM_TIME,w,c
  9657  004116  2612               	addwf	??_delay_us,f,c
  9658  004118  504A               	movf	_SYSTEM_TIME+1,w,c
  9659  00411A  2213               	addwfc	??_delay_us+1,f,c
  9660  00411C  5010               	movf	delay_us@us,w,c
  9661  00411E  5C12               	subwf	??_delay_us,w,c
  9662  004120  5011               	movf	delay_us@us+1,w,c
  9663  004122  5813               	subwfb	??_delay_us+1,w,c
  9664  004124  B0D8               	btfsc	status,0,c
  9665  004126  0012               	return	
  9666  004128  D7ED               	goto	l5176
  9667  00412A                     __end_of_delay_us:
  9668                           	opt stack 0
  9669                           tblptru	equ	0xFF8
  9670                           tblptrh	equ	0xFF7
  9671                           tblptrl	equ	0xFF6
  9672                           tablat	equ	0xFF5
  9673                           prodh	equ	0xFF4
  9674                           prodl	equ	0xFF3
  9675                           intcon	equ	0xFF2
  9676                           intcon2	equ	0xFF1
  9677                           indf0	equ	0xFEF
  9678                           postinc0	equ	0xFEE
  9679                           fsr0h	equ	0xFEA
  9680                           fsr0l	equ	0xFE9
  9681                           wreg	equ	0xFE8
  9682                           indf1	equ	0xFE7
  9683                           fsr1h	equ	0xFE2
  9684                           fsr1l	equ	0xFE1
  9685                           indf2	equ	0xFDF
  9686                           postinc2	equ	0xFDE
  9687                           postdec2	equ	0xFDD
  9688                           fsr2h	equ	0xFDA
  9689                           fsr2l	equ	0xFD9
  9690                           status	equ	0xFD8
  9691                           
  9692 ;; *************** function ___lwtoft *****************
  9693 ;; Defined at:
  9694 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lwtoft.c"
  9695 ;; Parameters:    Size  Location     Type
  9696 ;;  c               2   23[COMRAM] unsigned int 
  9697 ;; Auto vars:     Size  Location     Type
  9698 ;;		None
  9699 ;; Return value:  Size  Location     Type
  9700 ;;                  3   23[COMRAM] float 
  9701 ;; Registers used:
  9702 ;;		wreg, status,2, status,0, cstack
  9703 ;; Tracked objects:
  9704 ;;		On entry : 0/0
  9705 ;;		On exit  : 0/0
  9706 ;;		Unchanged: 0/0
  9707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9708 ;;      Params:         3       0       0       0       0       0       0       0       0
  9709 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9710 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9711 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9712 ;;Total ram usage:        3 bytes
  9713 ;; Hardware stack levels used:    1
  9714 ;; Hardware stack levels required when called:    3
  9715 ;; This function calls:
  9716 ;;		___ftpack
  9717 ;; This function is called by:
  9718 ;;		_linearMove1Axis
  9719 ;;		_linearMove2Axis
  9720 ;;		_calculate_motordelay
  9721 ;; This function uses a non-reentrant model
  9722 ;;
  9723                           
  9724                           	psect	text36
  9725  00423E                     __ptext36:
  9726                           	opt stack 0
  9727  00423E                     ___lwtoft:
  9728                           	opt stack 23
  9729                           
  9730                           ;incstack = 0
  9731  00423E  C018  F010         	movff	___lwtoft@c,___ftpack@arg
  9732  004242  C019  F011         	movff	___lwtoft@c+1,___ftpack@arg+1
  9733  004246  6A12               	clrf	___ftpack@arg+2,c
  9734  004248  0E8E               	movlw	142
  9735  00424A  6E13               	movwf	___ftpack@exp,c
  9736  00424C  0E00               	movlw	0
  9737  00424E  6E14               	movwf	___ftpack@sign,c
  9738  004250  EC3D  F01C         	call	___ftpack	;wreg free
  9739  004254  C010  F018         	movff	?___ftpack,?___lwtoft
  9740  004258  C011  F019         	movff	?___ftpack+1,?___lwtoft+1
  9741  00425C  C012  F01A         	movff	?___ftpack+2,?___lwtoft+2
  9742  004260  0012               	return	
  9743  004262                     __end_of___lwtoft:
  9744                           	opt stack 0
  9745                           tblptru	equ	0xFF8
  9746                           tblptrh	equ	0xFF7
  9747                           tblptrl	equ	0xFF6
  9748                           tablat	equ	0xFF5
  9749                           prodh	equ	0xFF4
  9750                           prodl	equ	0xFF3
  9751                           intcon	equ	0xFF2
  9752                           intcon2	equ	0xFF1
  9753                           indf0	equ	0xFEF
  9754                           postinc0	equ	0xFEE
  9755                           fsr0h	equ	0xFEA
  9756                           fsr0l	equ	0xFE9
  9757                           wreg	equ	0xFE8
  9758                           indf1	equ	0xFE7
  9759                           fsr1h	equ	0xFE2
  9760                           fsr1l	equ	0xFE1
  9761                           indf2	equ	0xFDF
  9762                           postinc2	equ	0xFDE
  9763                           postdec2	equ	0xFDD
  9764                           fsr2h	equ	0xFDA
  9765                           fsr2l	equ	0xFD9
  9766                           status	equ	0xFD8
  9767                           
  9768 ;; *************** function ___fttol *****************
  9769 ;; Defined at:
  9770 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\fttol.c"
  9771 ;; Parameters:    Size  Location     Type
  9772 ;;  f1              3   57[COMRAM] float 
  9773 ;; Auto vars:     Size  Location     Type
  9774 ;;  lval            4    1[BANK0 ] unsigned long 
  9775 ;;  exp1            1    5[BANK0 ] unsigned char 
  9776 ;;  sign1           1    0[BANK0 ] unsigned char 
  9777 ;; Return value:  Size  Location     Type
  9778 ;;                  4   57[COMRAM] long 
  9779 ;; Registers used:
  9780 ;;		wreg, status,2, status,0
  9781 ;; Tracked objects:
  9782 ;;		On entry : 0/0
  9783 ;;		On exit  : 0/0
  9784 ;;		Unchanged: 0/0
  9785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9786 ;;      Params:         4       0       0       0       0       0       0       0       0
  9787 ;;      Locals:         0       6       0       0       0       0       0       0       0
  9788 ;;      Temps:          5       0       0       0       0       0       0       0       0
  9789 ;;      Totals:         9       6       0       0       0       0       0       0       0
  9790 ;;Total ram usage:       15 bytes
  9791 ;; Hardware stack levels used:    1
  9792 ;; Hardware stack levels required when called:    2
  9793 ;; This function calls:
  9794 ;;		Nothing
  9795 ;; This function is called by:
  9796 ;;		_execGcode
  9797 ;;		_linearMove1Axis
  9798 ;;		_linearMove2Axis
  9799 ;;		_calculate_motordelay
  9800 ;;		_moveToSwitch
  9801 ;;		_sprintf
  9802 ;; This function uses a non-reentrant model
  9803 ;;
  9804                           
  9805                           	psect	text37
  9806  003238                     __ptext37:
  9807                           	opt stack 0
  9808  003238                     ___fttol:
  9809                           	opt stack 26
  9810                           
  9811                           ;incstack = 0
  9812  003238  C03C  F03E         	movff	___fttol@f1+2,??___fttol
  9813  00323C  6A3F               	clrf	(??___fttol+1)& (0+255),c
  9814  00323E  6A40               	clrf	(??___fttol+2)& (0+255),c
  9815  003240  343B               	rlcf	___fttol@f1+1,w,c
  9816  003242  363E               	rlcf	??___fttol& (0+255),f,c
  9817  003244  E301               	bnc	u5971
  9818  003246  803F               	bsf	(??___fttol+1)& (0+255),0,c
  9819  003248                     u5971:
  9820  003248  503E               	movf	??___fttol,w,c
  9821  00324A  0100               	movlb	0	; () banked
  9822  00324C  6F65               	movwf	___fttol@exp1& (0+255),b
  9823  00324E  0100               	movlb	0	; () banked
  9824  003250  5165               	movf	___fttol@exp1& (0+255),w,b
  9825  003252  A4D8               	btfss	status,2,c
  9826  003254  D009               	goto	l5366
  9827                           
  9828                           ; BSR set to: 0
  9829  003256  0E00               	movlw	0
  9830  003258  6E3A               	movwf	?___fttol,c
  9831  00325A  0E00               	movlw	0
  9832  00325C  6E3B               	movwf	?___fttol+1,c
  9833  00325E  0E00               	movlw	0
  9834  003260  6E3C               	movwf	?___fttol+2,c
  9835  003262  0E00               	movlw	0
  9836  003264  6E3D               	movwf	?___fttol+3,c
  9837                           
  9838                           ; BSR set to: 0
  9839  003266  0012               	return	
  9840  003268                     l5366:
  9841                           
  9842                           ; BSR set to: 0
  9843  003268  0E17               	movlw	23
  9844  00326A  6E3E               	movwf	??___fttol& (0+255),c
  9845  00326C  C03A  F03F         	movff	___fttol@f1,??___fttol+1
  9846  003270  C03B  F040         	movff	___fttol@f1+1,??___fttol+2
  9847  003274  C03C  F041         	movff	___fttol@f1+2,??___fttol+3
  9848  003278  283E               	incf	??___fttol,w,c
  9849  00327A  6E42               	movwf	(??___fttol+4)& (0+255),c
  9850  00327C  D004               	goto	u5990
  9851  00327E                     u5995:
  9852  00327E  90D8               	bcf	status,0,c
  9853  003280  3241               	rrcf	??___fttol+3,f,c
  9854  003282  3240               	rrcf	??___fttol+2,f,c
  9855  003284  323F               	rrcf	??___fttol+1,f,c
  9856  003286                     u5990:
  9857  003286  2E42               	decfsz	(??___fttol+4)& (0+255),f,c
  9858  003288  D7FA               	goto	u5995
  9859  00328A  503F               	movf	??___fttol+1,w,c
  9860  00328C  0100               	movlb	0	; () banked
  9861  00328E  6F60               	movwf	___fttol@sign1& (0+255),b
  9862                           
  9863                           ; BSR set to: 0
  9864  003290  8E3B               	bsf	___fttol@f1+1,7,c
  9865                           
  9866                           ; BSR set to: 0
  9867  003292  0EFF               	movlw	255
  9868  003294  163A               	andwf	___fttol@f1,f,c
  9869  003296  0EFF               	movlw	255
  9870  003298  163B               	andwf	___fttol@f1+1,f,c
  9871  00329A  0E00               	movlw	0
  9872  00329C  163C               	andwf	___fttol@f1+2,f,c
  9873                           
  9874                           ; BSR set to: 0
  9875  00329E  503A               	movf	___fttol@f1,w,c
  9876  0032A0  0100               	movlb	0	; () banked
  9877  0032A2  6F61               	movwf	___fttol@lval& (0+255),b
  9878  0032A4  503B               	movf	___fttol@f1+1,w,c
  9879  0032A6  0100               	movlb	0	; () banked
  9880  0032A8  6F62               	movwf	(___fttol@lval+1)& (0+255),b
  9881  0032AA  503C               	movf	___fttol@f1+2,w,c
  9882  0032AC  0100               	movlb	0	; () banked
  9883  0032AE  6F63               	movwf	(___fttol@lval+2)& (0+255),b
  9884  0032B0  0100               	movlb	0	; () banked
  9885  0032B2  6B64               	clrf	(___fttol@lval+3)& (0+255),b
  9886                           
  9887                           ; BSR set to: 0
  9888  0032B4  0E8E               	movlw	142
  9889  0032B6  0100               	movlb	0	; () banked
  9890  0032B8  5F65               	subwf	___fttol@exp1& (0+255),f,b
  9891                           
  9892                           ; BSR set to: 0
  9893  0032BA  0100               	movlb	0	; () banked
  9894  0032BC  AF65               	btfss	___fttol@exp1& (0+255),7,b
  9895  0032BE  D019               	goto	l5388
  9896                           
  9897                           ; BSR set to: 0
  9898  0032C0  0100               	movlb	0	; () banked
  9899  0032C2  5165               	movf	___fttol@exp1& (0+255),w,b
  9900  0032C4  0A80               	xorlw	128
  9901  0032C6  0F8F               	addlw	143
  9902  0032C8  B0D8               	btfsc	status,0,c
  9903  0032CA  D009               	goto	l5384
  9904                           
  9905                           ; BSR set to: 0
  9906  0032CC  0E00               	movlw	0
  9907  0032CE  6E3A               	movwf	?___fttol,c
  9908  0032D0  0E00               	movlw	0
  9909  0032D2  6E3B               	movwf	?___fttol+1,c
  9910  0032D4  0E00               	movlw	0
  9911  0032D6  6E3C               	movwf	?___fttol+2,c
  9912  0032D8  0E00               	movlw	0
  9913  0032DA  6E3D               	movwf	?___fttol+3,c
  9914                           
  9915                           ; BSR set to: 0
  9916  0032DC  0012               	return	
  9917  0032DE                     l5384:
  9918                           
  9919                           ; BSR set to: 0
  9920  0032DE  0100               	movlb	0	; () banked
  9921  0032E0  90D8               	bcf	status,0,c
  9922  0032E2  3364               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9923  0032E4  3363               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9924  0032E6  3362               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9925  0032E8  3361               	rrcf	___fttol@lval& (0+255),f,b
  9926                           
  9927                           ; BSR set to: 0
  9928  0032EA  0100               	movlb	0	; () banked
  9929  0032EC  3F65               	incfsz	___fttol@exp1& (0+255),f,b
  9930  0032EE  D7F7               	goto	l5384
  9931                           
  9932                           ; BSR set to: 0
  9933  0032F0  D01A               	goto	l5398
  9934  0032F2                     l5388:
  9935                           
  9936                           ; BSR set to: 0
  9937  0032F2  0E17               	movlw	23
  9938  0032F4  0100               	movlb	0	; () banked
  9939  0032F6  6565               	cpfsgt	___fttol@exp1& (0+255),b
  9940  0032F8  D011               	goto	l5396
  9941                           
  9942                           ; BSR set to: 0
  9943  0032FA  0E00               	movlw	0
  9944  0032FC  6E3A               	movwf	?___fttol,c
  9945  0032FE  0E00               	movlw	0
  9946  003300  6E3B               	movwf	?___fttol+1,c
  9947  003302  0E00               	movlw	0
  9948  003304  6E3C               	movwf	?___fttol+2,c
  9949  003306  0E00               	movlw	0
  9950  003308  6E3D               	movwf	?___fttol+3,c
  9951                           
  9952                           ; BSR set to: 0
  9953  00330A  0012               	return	
  9954  00330C                     l5394:
  9955                           
  9956                           ; BSR set to: 0
  9957  00330C  0100               	movlb	0	; () banked
  9958  00330E  90D8               	bcf	status,0,c
  9959  003310  3761               	rlcf	___fttol@lval& (0+255),f,b
  9960  003312  3762               	rlcf	(___fttol@lval+1)& (0+255),f,b
  9961  003314  3763               	rlcf	(___fttol@lval+2)& (0+255),f,b
  9962  003316  3764               	rlcf	(___fttol@lval+3)& (0+255),f,b
  9963  003318  0100               	movlb	0	; () banked
  9964  00331A  0765               	decf	___fttol@exp1& (0+255),f,b
  9965  00331C                     l5396:
  9966                           
  9967                           ; BSR set to: 0
  9968  00331C  0100               	movlb	0	; () banked
  9969  00331E  5165               	movf	___fttol@exp1& (0+255),w,b
  9970  003320  0100               	movlb	0	; () banked
  9971  003322  A4D8               	btfss	status,2,c
  9972  003324  D7F3               	goto	l5394
  9973  003326                     l5398:
  9974                           
  9975                           ; BSR set to: 0
  9976  003326  0100               	movlb	0	; () banked
  9977  003328  5160               	movf	___fttol@sign1& (0+255),w,b
  9978  00332A  0100               	movlb	0	; () banked
  9979  00332C  B4D8               	btfsc	status,2,c
  9980  00332E  D009               	goto	l5402
  9981                           
  9982                           ; BSR set to: 0
  9983  003330  0100               	movlb	0	; () banked
  9984  003332  1F64               	comf	(___fttol@lval+3)& (0+255),f,b
  9985  003334  1F63               	comf	(___fttol@lval+2)& (0+255),f,b
  9986  003336  1F62               	comf	(___fttol@lval+1)& (0+255),f,b
  9987  003338  6D61               	negf	___fttol@lval& (0+255),b
  9988  00333A  0E00               	movlw	0
  9989  00333C  2362               	addwfc	(___fttol@lval+1)& (0+255),f,b
  9990  00333E  2363               	addwfc	(___fttol@lval+2)& (0+255),f,b
  9991  003340  2364               	addwfc	(___fttol@lval+3)& (0+255),f,b
  9992  003342                     l5402:
  9993                           
  9994                           ; BSR set to: 0
  9995  003342  C061  F03A         	movff	___fttol@lval,?___fttol
  9996  003346  C062  F03B         	movff	___fttol@lval+1,?___fttol+1
  9997  00334A  C063  F03C         	movff	___fttol@lval+2,?___fttol+2
  9998  00334E  C064  F03D         	movff	___fttol@lval+3,?___fttol+3
  9999  003352  0012               	return	
 10000  003354                     __end_of___fttol:
 10001                           	opt stack 0
 10002                           tblptru	equ	0xFF8
 10003                           tblptrh	equ	0xFF7
 10004                           tblptrl	equ	0xFF6
 10005                           tablat	equ	0xFF5
 10006                           prodh	equ	0xFF4
 10007                           prodl	equ	0xFF3
 10008                           intcon	equ	0xFF2
 10009                           intcon2	equ	0xFF1
 10010                           indf0	equ	0xFEF
 10011                           postinc0	equ	0xFEE
 10012                           fsr0h	equ	0xFEA
 10013                           fsr0l	equ	0xFE9
 10014                           wreg	equ	0xFE8
 10015                           indf1	equ	0xFE7
 10016                           fsr1h	equ	0xFE2
 10017                           fsr1l	equ	0xFE1
 10018                           indf2	equ	0xFDF
 10019                           postinc2	equ	0xFDE
 10020                           postdec2	equ	0xFDD
 10021                           fsr2h	equ	0xFDA
 10022                           fsr2l	equ	0xFD9
 10023                           status	equ	0xFD8
 10024                           
 10025 ;; *************** function ___ftadd *****************
 10026 ;; Defined at:
 10027 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftadd.c"
 10028 ;; Parameters:    Size  Location     Type
 10029 ;;  f1              3   60[COMRAM] float 
 10030 ;;  f2              3   63[COMRAM] float 
 10031 ;; Auto vars:     Size  Location     Type
 10032 ;;  exp1            1    2[BANK0 ] unsigned char 
 10033 ;;  exp2            1    1[BANK0 ] unsigned char 
 10034 ;;  sign            1    0[BANK0 ] unsigned char 
 10035 ;; Return value:  Size  Location     Type
 10036 ;;                  3   60[COMRAM] float 
 10037 ;; Registers used:
 10038 ;;		wreg, status,2, status,0, cstack
 10039 ;; Tracked objects:
 10040 ;;		On entry : 0/0
 10041 ;;		On exit  : 0/0
 10042 ;;		Unchanged: 0/0
 10043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10044 ;;      Params:         6       0       0       0       0       0       0       0       0
 10045 ;;      Locals:         0       3       0       0       0       0       0       0       0
 10046 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10047 ;;      Totals:         9       3       0       0       0       0       0       0       0
 10048 ;;Total ram usage:       12 bytes
 10049 ;; Hardware stack levels used:    1
 10050 ;; Hardware stack levels required when called:    3
 10051 ;; This function calls:
 10052 ;;		___ftpack
 10053 ;; This function is called by:
 10054 ;;		_linearMove1Axis
 10055 ;;		_linearMove2Axis
 10056 ;;		_sprintf
 10057 ;;		___ftsub
 10058 ;; This function uses a non-reentrant model
 10059 ;;
 10060                           
 10061                           	psect	text38
 10062  002DE0                     __ptext38:
 10063                           	opt stack 0
 10064  002DE0                     ___ftadd:
 10065                           	opt stack 24
 10066                           
 10067                           ; BSR set to: 0
 10068                           ;incstack = 0
 10069  002DE0  C03F  F043         	movff	___ftadd@f1+2,??___ftadd
 10070  002DE4  6A44               	clrf	(??___ftadd+1)& (0+255),c
 10071  002DE6  6A45               	clrf	(??___ftadd+2)& (0+255),c
 10072  002DE8  343E               	rlcf	___ftadd@f1+1,w,c
 10073  002DEA  3643               	rlcf	??___ftadd& (0+255),f,c
 10074  002DEC  E301               	bnc	u5641
 10075  002DEE  8044               	bsf	(??___ftadd+1)& (0+255),0,c
 10076  002DF0                     u5641:
 10077  002DF0  5043               	movf	??___ftadd,w,c
 10078  002DF2  0100               	movlb	0	; () banked
 10079  002DF4  6F62               	movwf	___ftadd@exp1& (0+255),b
 10080  002DF6  C042  F043         	movff	___ftadd@f2+2,??___ftadd
 10081  002DFA  6A44               	clrf	(??___ftadd+1)& (0+255),c
 10082  002DFC  6A45               	clrf	(??___ftadd+2)& (0+255),c
 10083  002DFE  3441               	rlcf	___ftadd@f2+1,w,c
 10084  002E00  3643               	rlcf	??___ftadd& (0+255),f,c
 10085  002E02  E301               	bnc	u5651
 10086  002E04  8044               	bsf	(??___ftadd+1)& (0+255),0,c
 10087  002E06                     u5651:
 10088  002E06  5043               	movf	??___ftadd,w,c
 10089  002E08  0100               	movlb	0	; () banked
 10090  002E0A  6F61               	movwf	___ftadd@exp2& (0+255),b
 10091                           
 10092                           ; BSR set to: 0
 10093  002E0C  0100               	movlb	0	; () banked
 10094  002E0E  5162               	movf	___ftadd@exp1& (0+255),w,b
 10095  002E10  0100               	movlb	0	; () banked
 10096  002E12  B4D8               	btfsc	status,2,c
 10097  002E14  D00F               	goto	l839
 10098                           
 10099                           ; BSR set to: 0
 10100  002E16  0100               	movlb	0	; () banked
 10101  002E18  5161               	movf	___ftadd@exp2& (0+255),w,b
 10102  002E1A  0100               	movlb	0	; () banked
 10103  002E1C  5D62               	subwf	___ftadd@exp1& (0+255),w,b
 10104  002E1E  B0D8               	btfsc	status,0,c
 10105  002E20  D010               	goto	l5192
 10106                           
 10107                           ; BSR set to: 0
 10108  002E22  0100               	movlb	0	; () banked
 10109  002E24  5162               	movf	___ftadd@exp1& (0+255),w,b
 10110  002E26  0800               	sublw	0
 10111  002E28  0100               	movlb	0	; () banked
 10112  002E2A  2561               	addwf	___ftadd@exp2& (0+255),w,b
 10113  002E2C  6E43               	movwf	??___ftadd& (0+255),c
 10114  002E2E  0E18               	movlw	24
 10115  002E30  6443               	cpfsgt	??___ftadd,c
 10116  002E32  D007               	goto	l5192
 10117  002E34                     l839:
 10118                           
 10119                           ; BSR set to: 0
 10120  002E34  C040  F03D         	movff	___ftadd@f2,?___ftadd
 10121  002E38  C041  F03E         	movff	___ftadd@f2+1,?___ftadd+1
 10122  002E3C  C042  F03F         	movff	___ftadd@f2+2,?___ftadd+2
 10123  002E40  0012               	return	
 10124  002E42                     l5192:
 10125                           
 10126                           ; BSR set to: 0
 10127  002E42  0100               	movlb	0	; () banked
 10128  002E44  5161               	movf	___ftadd@exp2& (0+255),w,b
 10129  002E46  0100               	movlb	0	; () banked
 10130  002E48  B4D8               	btfsc	status,2,c
 10131  002E4A  D00F               	goto	l843
 10132                           
 10133                           ; BSR set to: 0
 10134  002E4C  0100               	movlb	0	; () banked
 10135  002E4E  5162               	movf	___ftadd@exp1& (0+255),w,b
 10136  002E50  0100               	movlb	0	; () banked
 10137  002E52  5D61               	subwf	___ftadd@exp2& (0+255),w,b
 10138  002E54  B0D8               	btfsc	status,0,c
 10139  002E56  D010               	goto	l5198
 10140                           
 10141                           ; BSR set to: 0
 10142  002E58  0100               	movlb	0	; () banked
 10143  002E5A  5161               	movf	___ftadd@exp2& (0+255),w,b
 10144  002E5C  0800               	sublw	0
 10145  002E5E  0100               	movlb	0	; () banked
 10146  002E60  2562               	addwf	___ftadd@exp1& (0+255),w,b
 10147  002E62  6E43               	movwf	??___ftadd& (0+255),c
 10148  002E64  0E18               	movlw	24
 10149  002E66  6443               	cpfsgt	??___ftadd,c
 10150  002E68  D007               	goto	l5198
 10151  002E6A                     l843:
 10152                           
 10153                           ; BSR set to: 0
 10154  002E6A  C03D  F03D         	movff	___ftadd@f1,?___ftadd
 10155  002E6E  C03E  F03E         	movff	___ftadd@f1+1,?___ftadd+1
 10156  002E72  C03F  F03F         	movff	___ftadd@f1+2,?___ftadd+2
 10157  002E76  0012               	return	
 10158  002E78                     l5198:
 10159                           
 10160                           ; BSR set to: 0
 10161  002E78  0E06               	movlw	6
 10162  002E7A  0100               	movlb	0	; () banked
 10163  002E7C  6F60               	movwf	___ftadd@sign& (0+255),b
 10164                           
 10165                           ; BSR set to: 0
 10166  002E7E  AE3F               	btfss	___ftadd@f1+2,7,c
 10167  002E80  D002               	goto	l5204
 10168                           
 10169                           ; BSR set to: 0
 10170  002E82  0100               	movlb	0	; () banked
 10171  002E84  8F60               	bsf	___ftadd@sign& (0+255),7,b
 10172  002E86                     l5204:
 10173                           
 10174                           ; BSR set to: 0
 10175  002E86  AE42               	btfss	___ftadd@f2+2,7,c
 10176  002E88  D002               	goto	l845
 10177                           
 10178                           ; BSR set to: 0
 10179  002E8A  0100               	movlb	0	; () banked
 10180  002E8C  8D60               	bsf	___ftadd@sign& (0+255),6,b
 10181  002E8E                     l845:
 10182                           
 10183                           ; BSR set to: 0
 10184  002E8E  8E3E               	bsf	___ftadd@f1+1,7,c
 10185                           
 10186                           ; BSR set to: 0
 10187  002E90  0EFF               	movlw	255
 10188  002E92  163D               	andwf	___ftadd@f1,f,c
 10189  002E94  0EFF               	movlw	255
 10190  002E96  163E               	andwf	___ftadd@f1+1,f,c
 10191  002E98  0E00               	movlw	0
 10192  002E9A  163F               	andwf	___ftadd@f1+2,f,c
 10193  002E9C  8E41               	bsf	___ftadd@f2+1,7,c
 10194                           
 10195                           ; BSR set to: 0
 10196  002E9E  0EFF               	movlw	255
 10197  002EA0  1640               	andwf	___ftadd@f2,f,c
 10198  002EA2  0EFF               	movlw	255
 10199  002EA4  1641               	andwf	___ftadd@f2+1,f,c
 10200  002EA6  0E00               	movlw	0
 10201  002EA8  1642               	andwf	___ftadd@f2+2,f,c
 10202                           
 10203                           ; BSR set to: 0
 10204  002EAA  0100               	movlb	0	; () banked
 10205  002EAC  5161               	movf	___ftadd@exp2& (0+255),w,b
 10206  002EAE  0100               	movlb	0	; () banked
 10207  002EB0  5D62               	subwf	___ftadd@exp1& (0+255),w,b
 10208  002EB2  B0D8               	btfsc	status,0,c
 10209  002EB4  D022               	goto	l5224
 10210  002EB6                     l5214:
 10211                           
 10212                           ; BSR set to: 0
 10213  002EB6  90D8               	bcf	status,0,c
 10214  002EB8  3640               	rlcf	___ftadd@f2,f,c
 10215  002EBA  3641               	rlcf	___ftadd@f2+1,f,c
 10216  002EBC  3642               	rlcf	___ftadd@f2+2,f,c
 10217  002EBE  0100               	movlb	0	; () banked
 10218  002EC0  0761               	decf	___ftadd@exp2& (0+255),f,b
 10219                           
 10220                           ; BSR set to: 0
 10221  002EC2  0100               	movlb	0	; () banked
 10222  002EC4  5162               	movf	___ftadd@exp1& (0+255),w,b
 10223  002EC6  0100               	movlb	0	; () banked
 10224  002EC8  1961               	xorwf	___ftadd@exp2& (0+255),w,b
 10225  002ECA  B4D8               	btfsc	status,2,c
 10226  002ECC  D00F               	goto	l5222
 10227                           
 10228                           ; BSR set to: 0
 10229  002ECE  0100               	movlb	0	; () banked
 10230  002ED0  0760               	decf	___ftadd@sign& (0+255),f,b
 10231  002ED2  C060  F043         	movff	___ftadd@sign,??___ftadd
 10232  002ED6  0E07               	movlw	7
 10233  002ED8  1643               	andwf	??___ftadd,f,c
 10234  002EDA  B4D8               	btfsc	status,2,c
 10235  002EDC  D007               	goto	l5222
 10236  002EDE  D7EB               	goto	l5214
 10237  002EE0                     l5220:
 10238                           
 10239                           ; BSR set to: 0
 10240  002EE0  90D8               	bcf	status,0,c
 10241  002EE2  323F               	rrcf	___ftadd@f1+2,f,c
 10242  002EE4  323E               	rrcf	___ftadd@f1+1,f,c
 10243  002EE6  323D               	rrcf	___ftadd@f1,f,c
 10244  002EE8  0100               	movlb	0	; () banked
 10245  002EEA  2B62               	incf	___ftadd@exp1& (0+255),f,b
 10246  002EEC                     l5222:
 10247                           
 10248                           ; BSR set to: 0
 10249  002EEC  0100               	movlb	0	; () banked
 10250  002EEE  5161               	movf	___ftadd@exp2& (0+255),w,b
 10251  002EF0  0100               	movlb	0	; () banked
 10252  002EF2  1962               	xorwf	___ftadd@exp1& (0+255),w,b
 10253  002EF4  B4D8               	btfsc	status,2,c
 10254  002EF6  D028               	goto	l854
 10255  002EF8  D7F3               	goto	l5220
 10256  002EFA                     l5224:
 10257                           
 10258                           ; BSR set to: 0
 10259  002EFA  0100               	movlb	0	; () banked
 10260  002EFC  5162               	movf	___ftadd@exp1& (0+255),w,b
 10261  002EFE  0100               	movlb	0	; () banked
 10262  002F00  5D61               	subwf	___ftadd@exp2& (0+255),w,b
 10263  002F02  B0D8               	btfsc	status,0,c
 10264  002F04  D021               	goto	l854
 10265  002F06                     l5226:
 10266                           
 10267                           ; BSR set to: 0
 10268  002F06  90D8               	bcf	status,0,c
 10269  002F08  363D               	rlcf	___ftadd@f1,f,c
 10270  002F0A  363E               	rlcf	___ftadd@f1+1,f,c
 10271  002F0C  363F               	rlcf	___ftadd@f1+2,f,c
 10272  002F0E  0100               	movlb	0	; () banked
 10273  002F10  0762               	decf	___ftadd@exp1& (0+255),f,b
 10274                           
 10275                           ; BSR set to: 0
 10276  002F12  0100               	movlb	0	; () banked
 10277  002F14  5162               	movf	___ftadd@exp1& (0+255),w,b
 10278  002F16  0100               	movlb	0	; () banked
 10279  002F18  1961               	xorwf	___ftadd@exp2& (0+255),w,b
 10280  002F1A  B4D8               	btfsc	status,2,c
 10281  002F1C  D00F               	goto	l5234
 10282                           
 10283                           ; BSR set to: 0
 10284  002F1E  0100               	movlb	0	; () banked
 10285  002F20  0760               	decf	___ftadd@sign& (0+255),f,b
 10286  002F22  C060  F043         	movff	___ftadd@sign,??___ftadd
 10287  002F26  0E07               	movlw	7
 10288  002F28  1643               	andwf	??___ftadd,f,c
 10289  002F2A  B4D8               	btfsc	status,2,c
 10290  002F2C  D007               	goto	l5234
 10291  002F2E  D7EB               	goto	l5226
 10292  002F30                     l5232:
 10293                           
 10294                           ; BSR set to: 0
 10295  002F30  90D8               	bcf	status,0,c
 10296  002F32  3242               	rrcf	___ftadd@f2+2,f,c
 10297  002F34  3241               	rrcf	___ftadd@f2+1,f,c
 10298  002F36  3240               	rrcf	___ftadd@f2,f,c
 10299  002F38  0100               	movlb	0	; () banked
 10300  002F3A  2B61               	incf	___ftadd@exp2& (0+255),f,b
 10301  002F3C                     l5234:
 10302                           
 10303                           ; BSR set to: 0
 10304  002F3C  0100               	movlb	0	; () banked
 10305  002F3E  5161               	movf	___ftadd@exp2& (0+255),w,b
 10306  002F40  0100               	movlb	0	; () banked
 10307  002F42  1962               	xorwf	___ftadd@exp1& (0+255),w,b
 10308  002F44  A4D8               	btfss	status,2,c
 10309  002F46  D7F4               	goto	l5232
 10310  002F48                     l854:
 10311                           
 10312                           ; BSR set to: 0
 10313  002F48  0100               	movlb	0	; () banked
 10314  002F4A  AF60               	btfss	___ftadd@sign& (0+255),7,b
 10315  002F4C  D00C               	goto	l863
 10316                           
 10317                           ; BSR set to: 0
 10318  002F4E  0EFF               	movlw	255
 10319  002F50  1A3D               	xorwf	___ftadd@f1,f,c
 10320  002F52  0EFF               	movlw	255
 10321  002F54  1A3E               	xorwf	___ftadd@f1+1,f,c
 10322  002F56  0EFF               	movlw	255
 10323  002F58  1A3F               	xorwf	___ftadd@f1+2,f,c
 10324  002F5A  0E01               	movlw	1
 10325  002F5C  263D               	addwf	___ftadd@f1,f,c
 10326  002F5E  0E00               	movlw	0
 10327  002F60  223E               	addwfc	___ftadd@f1+1,f,c
 10328  002F62  0E00               	movlw	0
 10329  002F64  223F               	addwfc	___ftadd@f1+2,f,c
 10330  002F66                     l863:
 10331                           
 10332                           ; BSR set to: 0
 10333  002F66  0100               	movlb	0	; () banked
 10334  002F68  AD60               	btfss	___ftadd@sign& (0+255),6,b
 10335  002F6A  D00C               	goto	l5240
 10336                           
 10337                           ; BSR set to: 0
 10338  002F6C  0EFF               	movlw	255
 10339  002F6E  1A40               	xorwf	___ftadd@f2,f,c
 10340  002F70  0EFF               	movlw	255
 10341  002F72  1A41               	xorwf	___ftadd@f2+1,f,c
 10342  002F74  0EFF               	movlw	255
 10343  002F76  1A42               	xorwf	___ftadd@f2+2,f,c
 10344  002F78  0E01               	movlw	1
 10345  002F7A  2640               	addwf	___ftadd@f2,f,c
 10346  002F7C  0E00               	movlw	0
 10347  002F7E  2241               	addwfc	___ftadd@f2+1,f,c
 10348  002F80  0E00               	movlw	0
 10349  002F82  2242               	addwfc	___ftadd@f2+2,f,c
 10350  002F84                     l5240:
 10351                           
 10352                           ; BSR set to: 0
 10353  002F84  0E00               	movlw	0
 10354  002F86  0100               	movlb	0	; () banked
 10355  002F88  6F60               	movwf	___ftadd@sign& (0+255),b
 10356                           
 10357                           ; BSR set to: 0
 10358  002F8A  503D               	movf	___ftadd@f1,w,c
 10359  002F8C  2640               	addwf	___ftadd@f2,f,c
 10360  002F8E  503E               	movf	___ftadd@f1+1,w,c
 10361  002F90  2241               	addwfc	___ftadd@f2+1,f,c
 10362  002F92  503F               	movf	___ftadd@f1+2,w,c
 10363  002F94  2242               	addwfc	___ftadd@f2+2,f,c
 10364                           
 10365                           ; BSR set to: 0
 10366  002F96  AE42               	btfss	___ftadd@f2+2,7,c
 10367  002F98  D00F               	goto	l5250
 10368                           
 10369                           ; BSR set to: 0
 10370  002F9A  0EFF               	movlw	255
 10371  002F9C  1A40               	xorwf	___ftadd@f2,f,c
 10372  002F9E  0EFF               	movlw	255
 10373  002FA0  1A41               	xorwf	___ftadd@f2+1,f,c
 10374  002FA2  0EFF               	movlw	255
 10375  002FA4  1A42               	xorwf	___ftadd@f2+2,f,c
 10376  002FA6  0E01               	movlw	1
 10377  002FA8  2640               	addwf	___ftadd@f2,f,c
 10378  002FAA  0E00               	movlw	0
 10379  002FAC  2241               	addwfc	___ftadd@f2+1,f,c
 10380  002FAE  0E00               	movlw	0
 10381  002FB0  2242               	addwfc	___ftadd@f2+2,f,c
 10382                           
 10383                           ; BSR set to: 0
 10384  002FB2  0E01               	movlw	1
 10385  002FB4  0100               	movlb	0	; () banked
 10386  002FB6  6F60               	movwf	___ftadd@sign& (0+255),b
 10387  002FB8                     l5250:
 10388                           
 10389                           ; BSR set to: 0
 10390  002FB8  C040  F010         	movff	___ftadd@f2,___ftpack@arg
 10391  002FBC  C041  F011         	movff	___ftadd@f2+1,___ftpack@arg+1
 10392  002FC0  C042  F012         	movff	___ftadd@f2+2,___ftpack@arg+2
 10393  002FC4  C062  F013         	movff	___ftadd@exp1,___ftpack@exp
 10394  002FC8  C060  F014         	movff	___ftadd@sign,___ftpack@sign
 10395  002FCC  EC3D  F01C         	call	___ftpack	;wreg free
 10396  002FD0  C010  F03D         	movff	?___ftpack,?___ftadd
 10397  002FD4  C011  F03E         	movff	?___ftpack+1,?___ftadd+1
 10398  002FD8  C012  F03F         	movff	?___ftpack+2,?___ftadd+2
 10399  002FDC  0012               	return	
 10400  002FDE                     __end_of___ftadd:
 10401                           	opt stack 0
 10402                           tblptru	equ	0xFF8
 10403                           tblptrh	equ	0xFF7
 10404                           tblptrl	equ	0xFF6
 10405                           tablat	equ	0xFF5
 10406                           prodh	equ	0xFF4
 10407                           prodl	equ	0xFF3
 10408                           intcon	equ	0xFF2
 10409                           intcon2	equ	0xFF1
 10410                           indf0	equ	0xFEF
 10411                           postinc0	equ	0xFEE
 10412                           fsr0h	equ	0xFEA
 10413                           fsr0l	equ	0xFE9
 10414                           wreg	equ	0xFE8
 10415                           indf1	equ	0xFE7
 10416                           fsr1h	equ	0xFE2
 10417                           fsr1l	equ	0xFE1
 10418                           indf2	equ	0xFDF
 10419                           postinc2	equ	0xFDE
 10420                           postdec2	equ	0xFDD
 10421                           fsr2h	equ	0xFDA
 10422                           fsr2l	equ	0xFD9
 10423                           status	equ	0xFD8
 10424                           
 10425 ;; *************** function _atof *****************
 10426 ;; Defined at:
 10427 ;;		line 200 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\atof.c"
 10428 ;; Parameters:    Size  Location     Type
 10429 ;;  s               2   62[COMRAM] PTR const unsigned char 
 10430 ;;		 -> NULL(0), uart_str(40), 
 10431 ;; Auto vars:     Size  Location     Type
 10432 ;;		None
 10433 ;; Return value:  Size  Location     Type
 10434 ;;                  3   62[COMRAM] PTR const unsigned char 
 10435 ;; Registers used:
 10436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10437 ;; Tracked objects:
 10438 ;;		On entry : 0/0
 10439 ;;		On exit  : 0/0
 10440 ;;		Unchanged: 0/0
 10441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10442 ;;      Params:         3       0       0       0       0       0       0       0       0
 10443 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10444 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10445 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10446 ;;Total ram usage:        3 bytes
 10447 ;; Hardware stack levels used:    1
 10448 ;; Hardware stack levels required when called:    5
 10449 ;; This function calls:
 10450 ;;		_strtod
 10451 ;; This function is called by:
 10452 ;;		_parseGcode
 10453 ;; This function uses a non-reentrant model
 10454 ;;
 10455                           
 10456                           	psect	text39
 10457  004286                     __ptext39:
 10458                           	opt stack 0
 10459  004286                     _atof:
 10460                           	opt stack 24
 10461                           
 10462                           ;incstack = 0
 10463  004286  C03F  F033         	movff	atof@s,strtod@s
 10464  00428A  C040  F034         	movff	atof@s+1,strtod@s+1
 10465  00428E  0E00               	movlw	0
 10466  004290  6E35               	movwf	strtod@res,c
 10467  004292  0E00               	movlw	0
 10468  004294  6E36               	movwf	strtod@res+1,c
 10469  004296  ECA4  F00F         	call	_strtod	;wreg free
 10470  00429A  C033  F03F         	movff	?_strtod,?_atof
 10471  00429E  C034  F040         	movff	?_strtod+1,?_atof+1
 10472  0042A2  C035  F041         	movff	?_strtod+2,?_atof+2
 10473  0042A6  0012               	return	
 10474  0042A8                     __end_of_atof:
 10475                           	opt stack 0
 10476                           tblptru	equ	0xFF8
 10477                           tblptrh	equ	0xFF7
 10478                           tblptrl	equ	0xFF6
 10479                           tablat	equ	0xFF5
 10480                           prodh	equ	0xFF4
 10481                           prodl	equ	0xFF3
 10482                           intcon	equ	0xFF2
 10483                           intcon2	equ	0xFF1
 10484                           indf0	equ	0xFEF
 10485                           postinc0	equ	0xFEE
 10486                           fsr0h	equ	0xFEA
 10487                           fsr0l	equ	0xFE9
 10488                           wreg	equ	0xFE8
 10489                           indf1	equ	0xFE7
 10490                           fsr1h	equ	0xFE2
 10491                           fsr1l	equ	0xFE1
 10492                           indf2	equ	0xFDF
 10493                           postinc2	equ	0xFDE
 10494                           postdec2	equ	0xFDD
 10495                           fsr2h	equ	0xFDA
 10496                           fsr2l	equ	0xFD9
 10497                           status	equ	0xFD8
 10498                           
 10499 ;; *************** function _strtod *****************
 10500 ;; Defined at:
 10501 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\atof.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;  s               2   50[COMRAM] PTR const unsigned char 
 10504 ;;		 -> NULL(0), uart_str(40), 
 10505 ;;  res             2   52[COMRAM] PTR PTR const unsigned c
 10506 ;;		 -> NULL(0), 
 10507 ;; Auto vars:     Size  Location     Type
 10508 ;;  _u              4   58[COMRAM] struct .
 10509 ;;  expon           1   57[COMRAM] char 
 10510 ;;  flags           1   56[COMRAM] unsigned char 
 10511 ;;  eexp            1   55[COMRAM] char 
 10512 ;; Return value:  Size  Location     Type
 10513 ;;                  3   50[COMRAM] char 
 10514 ;; Registers used:
 10515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10516 ;; Tracked objects:
 10517 ;;		On entry : 0/0
 10518 ;;		On exit  : 0/0
 10519 ;;		Unchanged: 0/0
 10520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10521 ;;      Params:         4       0       0       0       0       0       0       0       0
 10522 ;;      Locals:         7       0       0       0       0       0       0       0       0
 10523 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10524 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10525 ;;Total ram usage:       12 bytes
 10526 ;; Hardware stack levels used:    1
 10527 ;; Hardware stack levels required when called:    4
 10528 ;; This function calls:
 10529 ;;		___altoft
 10530 ;;		___ftdiv
 10531 ;;		___ftge
 10532 ;;		___ftmul
 10533 ;;		___ftneg
 10534 ;;		___lmul
 10535 ;;		_isdigit
 10536 ;;		_isspace
 10537 ;; This function is called by:
 10538 ;;		_atof
 10539 ;; This function uses a non-reentrant model
 10540 ;;
 10541                           
 10542                           	psect	text40
 10543  001F48                     __ptext40:
 10544                           	opt stack 0
 10545  001F48                     _strtod:
 10546                           	opt stack 24
 10547                           
 10548                           ;incstack = 0
 10549  001F48  5035               	movf	strtod@res,w,c
 10550  001F4A  1036               	iorwf	strtod@res+1,w,c
 10551  001F4C  B4D8               	btfsc	status,2,c
 10552  001F4E  D00B               	goto	l5868
 10553  001F50  C035  FFD9         	movff	strtod@res,fsr2l
 10554  001F54  C036  FFDA         	movff	strtod@res+1,fsr2h
 10555  001F58  C033  FFDE         	movff	strtod@s,postinc2
 10556  001F5C  C034  FFDD         	movff	strtod@s+1,postdec2
 10557  001F60  D002               	goto	l5868
 10558  001F62                     l5866:
 10559  001F62  4A33               	infsnz	strtod@s,f,c
 10560  001F64  2A34               	incf	strtod@s+1,f,c
 10561  001F66                     l5868:
 10562  001F66  C033  FFD9         	movff	strtod@s,fsr2l
 10563  001F6A  C034  FFDA         	movff	strtod@s+1,fsr2h
 10564  001F6E  50DF               	movf	indf2,w,c
 10565  001F70  6E38               	movwf	strtod@eexp,c
 10566  001F72  5038               	movf	strtod@eexp,w,c
 10567  001F74  EC0C  F021         	call	_isspace
 10568  001F78  B0D8               	btfsc	status,0,c
 10569  001F7A  D7F3               	goto	l5866
 10570  001F7C  0E00               	movlw	0
 10571  001F7E  6E39               	movwf	strtod@flags,c
 10572  001F80  0E2D               	movlw	45
 10573  001F82  1838               	xorwf	strtod@eexp,w,c
 10574  001F84  A4D8               	btfss	status,2,c
 10575  001F86  D003               	goto	l5878
 10576  001F88  0E01               	movlw	1
 10577  001F8A  6E39               	movwf	strtod@flags,c
 10578  001F8C  D004               	goto	l5880
 10579  001F8E                     l5878:
 10580  001F8E  0E2B               	movlw	43
 10581  001F90  1838               	xorwf	strtod@eexp,w,c
 10582  001F92  A4D8               	btfss	status,2,c
 10583  001F94  D002               	goto	l5882
 10584  001F96                     l5880:
 10585  001F96  4A33               	infsnz	strtod@s,f,c
 10586  001F98  2A34               	incf	strtod@s+1,f,c
 10587  001F9A                     l5882:
 10588  001F9A  0E00               	movlw	0
 10589  001F9C  6E38               	movwf	strtod@eexp,c
 10590  001F9E  0E00               	movlw	0
 10591  001FA0  6E3B               	movwf	strtod@_u,c
 10592  001FA2  0E00               	movlw	0
 10593  001FA4  6E3C               	movwf	strtod@_u+1,c
 10594  001FA6  0E00               	movlw	0
 10595  001FA8  6E3D               	movwf	strtod@_u+2,c
 10596  001FAA  0E00               	movlw	0
 10597  001FAC  6E3E               	movwf	strtod@_u+3,c
 10598  001FAE  0E00               	movlw	0
 10599  001FB0  6E3A               	movwf	strtod@expon,c
 10600  001FB2                     l5888:
 10601  001FB2  B839               	btfsc	strtod@flags,4,c
 10602  001FB4  D00A               	goto	l5894
 10603  001FB6  C033  FFD9         	movff	strtod@s,fsr2l
 10604  001FBA  C034  FFDA         	movff	strtod@s+1,fsr2h
 10605  001FBE  0E2E               	movlw	46
 10606  001FC0  18DE               	xorwf	postinc2,w,c
 10607  001FC2  A4D8               	btfss	status,2,c
 10608  001FC4  D002               	goto	l5894
 10609  001FC6  8839               	bsf	strtod@flags,4,c
 10610  001FC8  D03C               	goto	l693
 10611  001FCA                     l5894:
 10612  001FCA  C033  FFD9         	movff	strtod@s,fsr2l
 10613  001FCE  C034  FFDA         	movff	strtod@s+1,fsr2h
 10614  001FD2  50DF               	movf	indf2,w,c
 10615  001FD4  EC54  F021         	call	_isdigit
 10616  001FD8  A0D8               	btfss	status,0,c
 10617  001FDA  D036               	goto	l5912
 10618  001FDC  8239               	bsf	strtod@flags,1,c
 10619  001FDE  0E08               	movlw	8
 10620  001FE0  1838               	xorwf	strtod@eexp,w,c
 10621  001FE2  B4D8               	btfsc	status,2,c
 10622  001FE4  D02C               	goto	l691
 10623  001FE6  B839               	btfsc	strtod@flags,4,c
 10624  001FE8  063A               	decf	strtod@expon,f,c
 10625  001FEA  2A38               	incf	strtod@eexp,f,c
 10626  001FEC  C03B  F010         	movff	strtod@_u,___lmul@multiplier
 10627  001FF0  C03C  F011         	movff	strtod@_u+1,___lmul@multiplier+1
 10628  001FF4  C03D  F012         	movff	strtod@_u+2,___lmul@multiplier+2
 10629  001FF8  C03E  F013         	movff	strtod@_u+3,___lmul@multiplier+3
 10630  001FFC  0E0A               	movlw	10
 10631  001FFE  6E14               	movwf	___lmul@multiplicand,c
 10632  002000  0E00               	movlw	0
 10633  002002  6E15               	movwf	___lmul@multiplicand+1,c
 10634  002004  0E00               	movlw	0
 10635  002006  6E16               	movwf	___lmul@multiplicand+2,c
 10636  002008  0E00               	movlw	0
 10637  00200A  6E17               	movwf	___lmul@multiplicand+3,c
 10638  00200C  EC19  F01F         	call	___lmul	;wreg free
 10639  002010  C010  F03B         	movff	?___lmul,strtod@_u
 10640  002014  C011  F03C         	movff	?___lmul+1,strtod@_u+1
 10641  002018  C012  F03D         	movff	?___lmul+2,strtod@_u+2
 10642  00201C  C013  F03E         	movff	?___lmul+3,strtod@_u+3
 10643  002020  C033  FFD9         	movff	strtod@s,fsr2l
 10644  002024  C034  FFDA         	movff	strtod@s+1,fsr2h
 10645  002028  50DF               	movf	indf2,w,c
 10646  00202A  6E37               	movwf	??_strtod& (0+255),c
 10647  00202C  0ED0               	movlw	208
 10648  00202E  2637               	addwf	??_strtod,f,c
 10649  002030  5037               	movf	??_strtod,w,c
 10650  002032  263B               	addwf	strtod@_u,f,c
 10651  002034  0E00               	movlw	0
 10652  002036  223C               	addwfc	strtod@_u+1,f,c
 10653  002038  223D               	addwfc	strtod@_u+2,f,c
 10654  00203A  223E               	addwfc	strtod@_u+3,f,c
 10655  00203C  D002               	goto	l693
 10656  00203E                     l691:
 10657  00203E  A839               	btfss	strtod@flags,4,c
 10658  002040  2A3A               	incf	strtod@expon,f,c
 10659  002042                     l693:
 10660  002042  4A33               	infsnz	strtod@s,f,c
 10661  002044  2A34               	incf	strtod@s+1,f,c
 10662  002046  D7B5               	goto	l5888
 10663  002048                     l5912:
 10664  002048  0E00               	movlw	0
 10665  00204A  6E38               	movwf	strtod@eexp,c
 10666  00204C  C033  FFD9         	movff	strtod@s,fsr2l
 10667  002050  C034  FFDA         	movff	strtod@s+1,fsr2h
 10668  002054  0E65               	movlw	101
 10669  002056  18DE               	xorwf	postinc2,w,c
 10670  002058  B4D8               	btfsc	status,2,c
 10671  00205A  D008               	goto	l5918
 10672  00205C  C033  FFD9         	movff	strtod@s,fsr2l
 10673  002060  C034  FFDA         	movff	strtod@s+1,fsr2h
 10674  002064  0E45               	movlw	69
 10675  002066  18DE               	xorwf	postinc2,w,c
 10676  002068  A4D8               	btfss	status,2,c
 10677  00206A  D05E               	goto	l5950
 10678  00206C                     l5918:
 10679  00206C  4A33               	infsnz	strtod@s,f,c
 10680  00206E  2A34               	incf	strtod@s+1,f,c
 10681  002070  C033  FFD9         	movff	strtod@s,fsr2l
 10682  002074  C034  FFDA         	movff	strtod@s+1,fsr2h
 10683  002078  0E2D               	movlw	45
 10684  00207A  18DE               	xorwf	postinc2,w,c
 10685  00207C  A4D8               	btfss	status,2,c
 10686  00207E  D002               	goto	l5922
 10687  002080  8639               	bsf	strtod@flags,3,c
 10688  002082  D008               	goto	l5926
 10689  002084                     l5922:
 10690  002084  C033  FFD9         	movff	strtod@s,fsr2l
 10691  002088  C034  FFDA         	movff	strtod@s+1,fsr2h
 10692  00208C  0E2B               	movlw	43
 10693  00208E  18DE               	xorwf	postinc2,w,c
 10694  002090  A4D8               	btfss	status,2,c
 10695  002092  D002               	goto	l5928
 10696  002094                     l5926:
 10697  002094  4A33               	infsnz	strtod@s,f,c
 10698  002096  2A34               	incf	strtod@s+1,f,c
 10699  002098                     l5928:
 10700  002098  C033  FFD9         	movff	strtod@s,fsr2l
 10701  00209C  C034  FFDA         	movff	strtod@s+1,fsr2h
 10702  0020A0  0E30               	movlw	48
 10703  0020A2  18DE               	xorwf	postinc2,w,c
 10704  0020A4  B4D8               	btfsc	status,2,c
 10705  0020A6  D7F6               	goto	l5926
 10706  0020A8  C033  FFD9         	movff	strtod@s,fsr2l
 10707  0020AC  C034  FFDA         	movff	strtod@s+1,fsr2h
 10708  0020B0  50DF               	movf	indf2,w,c
 10709  0020B2  EC54  F021         	call	_isdigit
 10710  0020B6  A0D8               	btfss	status,0,c
 10711  0020B8  D035               	goto	l5946
 10712  0020BA  C033  FFD9         	movff	strtod@s,fsr2l
 10713  0020BE  C034  FFDA         	movff	strtod@s+1,fsr2h
 10714  0020C2  50DF               	movf	indf2,w,c
 10715  0020C4  0FD0               	addlw	208
 10716  0020C6  6E38               	movwf	strtod@eexp,c
 10717  0020C8  4A33               	infsnz	strtod@s,f,c
 10718  0020CA  2A34               	incf	strtod@s+1,f,c
 10719  0020CC  C033  FFD9         	movff	strtod@s,fsr2l
 10720  0020D0  C034  FFDA         	movff	strtod@s+1,fsr2h
 10721  0020D4  50DF               	movf	indf2,w,c
 10722  0020D6  EC54  F021         	call	_isdigit
 10723  0020DA  A0D8               	btfss	status,0,c
 10724  0020DC  D023               	goto	l5946
 10725  0020DE  C033  FFD9         	movff	strtod@s,fsr2l
 10726  0020E2  C034  FFDA         	movff	strtod@s+1,fsr2h
 10727  0020E6  50DF               	movf	indf2,w,c
 10728  0020E8  6E37               	movwf	??_strtod& (0+255),c
 10729  0020EA  5038               	movf	strtod@eexp,w,c
 10730  0020EC  0D0A               	mullw	10
 10731  0020EE  50F3               	movf	prodl,w,c
 10732  0020F0  2437               	addwf	??_strtod,w,c
 10733  0020F2  0FD0               	addlw	208
 10734  0020F4  6E38               	movwf	strtod@eexp,c
 10735  0020F6  4A33               	infsnz	strtod@s,f,c
 10736  0020F8  2A34               	incf	strtod@s+1,f,c
 10737  0020FA  C033  FFD9         	movff	strtod@s,fsr2l
 10738  0020FE  C034  FFDA         	movff	strtod@s+1,fsr2h
 10739  002102  50DF               	movf	indf2,w,c
 10740  002104  EC54  F021         	call	_isdigit
 10741  002108  A0D8               	btfss	status,0,c
 10742  00210A  D00C               	goto	l5946
 10743  00210C  C033  FFD9         	movff	strtod@s,fsr2l
 10744  002110  C034  FFDA         	movff	strtod@s+1,fsr2h
 10745  002114  50DF               	movf	indf2,w,c
 10746  002116  6E37               	movwf	??_strtod& (0+255),c
 10747  002118  5038               	movf	strtod@eexp,w,c
 10748  00211A  0D0A               	mullw	10
 10749  00211C  50F3               	movf	prodl,w,c
 10750  00211E  2437               	addwf	??_strtod,w,c
 10751  002120  0FD0               	addlw	208
 10752  002122  6E38               	movwf	strtod@eexp,c
 10753  002124                     l5946:
 10754  002124  B639               	btfsc	strtod@flags,3,c
 10755  002126  6C38               	negf	strtod@eexp,c
 10756  002128                     l5950:
 10757  002128  5038               	movf	strtod@eexp,w,c
 10758  00212A  263A               	addwf	strtod@expon,f,c
 10759  00212C  5035               	movf	strtod@res,w,c
 10760  00212E  1036               	iorwf	strtod@res+1,w,c
 10761  002130  A4D8               	btfss	status,2,c
 10762  002132  A239               	btfss	strtod@flags,1,c
 10763  002134  D008               	goto	l5958
 10764  002136  C035  FFD9         	movff	strtod@res,fsr2l
 10765  00213A  C036  FFDA         	movff	strtod@res+1,fsr2h
 10766  00213E  C033  FFDE         	movff	strtod@s,postinc2
 10767  002142  C034  FFDD         	movff	strtod@s+1,postdec2
 10768  002146                     l5958:
 10769  002146  C03B  F018         	movff	strtod@_u,___altoft@c
 10770  00214A  C03C  F019         	movff	strtod@_u+1,___altoft@c+1
 10771  00214E  C03D  F01A         	movff	strtod@_u+2,___altoft@c+2
 10772  002152  C03E  F01B         	movff	strtod@_u+3,___altoft@c+3
 10773  002156  ECDA  F01D         	call	___altoft	;wreg free
 10774  00215A  C018  F03B         	movff	?___altoft,strtod@_u
 10775  00215E  C019  F03C         	movff	?___altoft+1,strtod@_u+1
 10776  002162  C01A  F03D         	movff	?___altoft+2,strtod@_u+2
 10777  002166  503B               	movf	strtod@_u,w,c
 10778  002168  103C               	iorwf	strtod@_u+1,w,c
 10779  00216A  103D               	iorwf	strtod@_u+2,w,c
 10780  00216C  A4D8               	btfss	status,2,c
 10781  00216E  D007               	goto	l5966
 10782  002170  0E00               	movlw	0
 10783  002172  6E33               	movwf	?_strtod,c
 10784  002174  0E00               	movlw	0
 10785  002176  6E34               	movwf	?_strtod+1,c
 10786  002178  0E00               	movlw	0
 10787  00217A  6E35               	movwf	?_strtod+2,c
 10788  00217C  0012               	return	
 10789  00217E                     l5966:
 10790  00217E  AE3A               	btfss	strtod@expon,7,c
 10791  002180  D056               	goto	l5994
 10792  002182  6C3A               	negf	strtod@expon,c
 10793  002184  D016               	goto	l5974
 10794  002186                     l5970:
 10795  002186  C03B  F01C         	movff	strtod@_u,___ftdiv@f1
 10796  00218A  C03C  F01D         	movff	strtod@_u+1,___ftdiv@f1+1
 10797  00218E  C03D  F01E         	movff	strtod@_u+2,___ftdiv@f1+2
 10798  002192  0E03               	movlw	3
 10799  002194  6E1F               	movwf	___ftdiv@f2,c
 10800  002196  0E15               	movlw	21
 10801  002198  6E20               	movwf	___ftdiv@f2+1,c
 10802  00219A  0E50               	movlw	80
 10803  00219C  6E21               	movwf	___ftdiv@f2+2,c
 10804  00219E  ECA7  F01A         	call	___ftdiv	;wreg free
 10805  0021A2  C01C  F03B         	movff	?___ftdiv,strtod@_u
 10806  0021A6  C01D  F03C         	movff	?___ftdiv+1,strtod@_u+1
 10807  0021AA  C01E  F03D         	movff	?___ftdiv+2,strtod@_u+2
 10808  0021AE  0EF6               	movlw	246
 10809  0021B0  263A               	addwf	strtod@expon,f,c
 10810  0021B2                     l5974:
 10811  0021B2  503A               	movf	strtod@expon,w,c
 10812  0021B4  0A80               	xorlw	128
 10813  0021B6  0F76               	addlw	-138
 10814  0021B8  A0D8               	btfss	status,0,c
 10815  0021BA  D016               	goto	l5980
 10816  0021BC  D7E4               	goto	l5970
 10817  0021BE                     l5976:
 10818  0021BE  C03B  F01C         	movff	strtod@_u,___ftdiv@f1
 10819  0021C2  C03C  F01D         	movff	strtod@_u+1,___ftdiv@f1+1
 10820  0021C6  C03D  F01E         	movff	strtod@_u+2,___ftdiv@f1+2
 10821  0021CA  0E00               	movlw	0
 10822  0021CC  6E1F               	movwf	___ftdiv@f2,c
 10823  0021CE  0E20               	movlw	32
 10824  0021D0  6E20               	movwf	___ftdiv@f2+1,c
 10825  0021D2  0E41               	movlw	65
 10826  0021D4  6E21               	movwf	___ftdiv@f2+2,c
 10827  0021D6  ECA7  F01A         	call	___ftdiv	;wreg free
 10828  0021DA  C01C  F03B         	movff	?___ftdiv,strtod@_u
 10829  0021DE  C01D  F03C         	movff	?___ftdiv+1,strtod@_u+1
 10830  0021E2  C01E  F03D         	movff	?___ftdiv+2,strtod@_u+2
 10831  0021E6  063A               	decf	strtod@expon,f,c
 10832  0021E8                     l5980:
 10833  0021E8  503A               	movf	strtod@expon,w,c
 10834  0021EA  A4D8               	btfss	status,2,c
 10835  0021EC  D7E8               	goto	l5976
 10836  0021EE  C03B  F010         	movff	strtod@_u,___ftge@ff1
 10837  0021F2  C03C  F011         	movff	strtod@_u+1,___ftge@ff1+1
 10838  0021F6  C03D  F012         	movff	strtod@_u+2,___ftge@ff1+2
 10839  0021FA  0E00               	movlw	0
 10840  0021FC  6E13               	movwf	___ftge@ff2,c
 10841  0021FE  0E80               	movlw	128
 10842  002200  6E14               	movwf	___ftge@ff2+1,c
 10843  002202  0E00               	movlw	0
 10844  002204  6E15               	movwf	___ftge@ff2+2,c
 10845  002206  EC94  F01C         	call	___ftge	;wreg free
 10846  00220A  B0D8               	btfsc	status,0,c
 10847  00220C  D061               	goto	l720
 10848  00220E  A039               	btfss	strtod@flags,0,c
 10849  002210  D007               	goto	l5990
 10850  002212                     l5986:
 10851  002212  0E00               	movlw	0
 10852  002214  6E33               	movwf	?_strtod,c
 10853  002216  0E80               	movlw	128
 10854  002218  6E34               	movwf	?_strtod+1,c
 10855  00221A  0E80               	movlw	128
 10856  00221C  6E35               	movwf	?_strtod+2,c
 10857  00221E  0012               	return	
 10858  002220                     l5990:
 10859  002220  0E00               	movlw	0
 10860  002222  6E33               	movwf	?_strtod,c
 10861  002224  0E80               	movlw	128
 10862  002226  6E34               	movwf	?_strtod+1,c
 10863  002228  0E00               	movlw	0
 10864  00222A  6E35               	movwf	?_strtod+2,c
 10865  00222C  0012               	return	
 10866  00222E                     l5994:
 10867  00222E  503A               	movf	strtod@expon,w,c
 10868  002230  0A80               	xorlw	128
 10869  002232  0F7F               	addlw	-129
 10870  002234  B0D8               	btfsc	status,0,c
 10871  002236  D017               	goto	l6002
 10872  002238  D04B               	goto	l720
 10873  00223A                     l5998:
 10874  00223A  C03B  F024         	movff	strtod@_u,___ftmul@f1
 10875  00223E  C03C  F025         	movff	strtod@_u+1,___ftmul@f1+1
 10876  002242  C03D  F026         	movff	strtod@_u+2,___ftmul@f1+2
 10877  002246  0E03               	movlw	3
 10878  002248  6E27               	movwf	___ftmul@f2,c
 10879  00224A  0E15               	movlw	21
 10880  00224C  6E28               	movwf	___ftmul@f2+1,c
 10881  00224E  0E50               	movlw	80
 10882  002250  6E29               	movwf	___ftmul@f2+2,c
 10883  002252  EC2D  F01A         	call	___ftmul	;wreg free
 10884  002256  C024  F03B         	movff	?___ftmul,strtod@_u
 10885  00225A  C025  F03C         	movff	?___ftmul+1,strtod@_u+1
 10886  00225E  C026  F03D         	movff	?___ftmul+2,strtod@_u+2
 10887  002262  0EF6               	movlw	246
 10888  002264  263A               	addwf	strtod@expon,f,c
 10889  002266                     l6002:
 10890  002266  0E0A               	movlw	10
 10891  002268  603A               	cpfslt	strtod@expon,c
 10892  00226A  D7E7               	goto	l5998
 10893  00226C  D015               	goto	l6008
 10894  00226E                     l6004:
 10895  00226E  C03B  F024         	movff	strtod@_u,___ftmul@f1
 10896  002272  C03C  F025         	movff	strtod@_u+1,___ftmul@f1+1
 10897  002276  C03D  F026         	movff	strtod@_u+2,___ftmul@f1+2
 10898  00227A  0E00               	movlw	0
 10899  00227C  6E27               	movwf	___ftmul@f2,c
 10900  00227E  0E20               	movlw	32
 10901  002280  6E28               	movwf	___ftmul@f2+1,c
 10902  002282  0E41               	movlw	65
 10903  002284  6E29               	movwf	___ftmul@f2+2,c
 10904  002286  EC2D  F01A         	call	___ftmul	;wreg free
 10905  00228A  C024  F03B         	movff	?___ftmul,strtod@_u
 10906  00228E  C025  F03C         	movff	?___ftmul+1,strtod@_u+1
 10907  002292  C026  F03D         	movff	?___ftmul+2,strtod@_u+2
 10908  002296  063A               	decf	strtod@expon,f,c
 10909  002298                     l6008:
 10910  002298  503A               	movf	strtod@expon,w,c
 10911  00229A  A4D8               	btfss	status,2,c
 10912  00229C  D7E8               	goto	l6004
 10913  00229E  0EFF               	movlw	255
 10914  0022A0  6E10               	movwf	___ftge@ff1,c
 10915  0022A2  0E7F               	movlw	127
 10916  0022A4  6E11               	movwf	___ftge@ff1+1,c
 10917  0022A6  0E7F               	movlw	127
 10918  0022A8  6E12               	movwf	___ftge@ff1+2,c
 10919  0022AA  C03B  F013         	movff	strtod@_u,___ftge@ff2
 10920  0022AE  C03C  F014         	movff	strtod@_u+1,___ftge@ff2+1
 10921  0022B2  C03D  F015         	movff	strtod@_u+2,___ftge@ff2+2
 10922  0022B6  EC94  F01C         	call	___ftge	;wreg free
 10923  0022BA  B0D8               	btfsc	status,0,c
 10924  0022BC  D009               	goto	l720
 10925  0022BE  B039               	btfsc	strtod@flags,0,c
 10926  0022C0  D7A8               	goto	l5986
 10927  0022C2  0E00               	movlw	0
 10928  0022C4  6E33               	movwf	?_strtod,c
 10929  0022C6  0E80               	movlw	128
 10930  0022C8  6E34               	movwf	?_strtod+1,c
 10931  0022CA  0E00               	movlw	0
 10932  0022CC  6E35               	movwf	?_strtod+2,c
 10933  0022CE  0012               	return	
 10934  0022D0                     l720:
 10935  0022D0  A039               	btfss	strtod@flags,0,c
 10936  0022D2  D00E               	goto	l6024
 10937  0022D4  C03B  F010         	movff	strtod@_u,___ftneg@f1
 10938  0022D8  C03C  F011         	movff	strtod@_u+1,___ftneg@f1+1
 10939  0022DC  C03D  F012         	movff	strtod@_u+2,___ftneg@f1+2
 10940  0022E0  EC31  F021         	call	___ftneg	;wreg free
 10941  0022E4  C010  F03B         	movff	?___ftneg,strtod@_u
 10942  0022E8  C011  F03C         	movff	?___ftneg+1,strtod@_u+1
 10943  0022EC  C012  F03D         	movff	?___ftneg+2,strtod@_u+2
 10944  0022F0                     l6024:
 10945  0022F0  C03B  F033         	movff	strtod@_u,?_strtod
 10946  0022F4  C03C  F034         	movff	strtod@_u+1,?_strtod+1
 10947  0022F8  C03D  F035         	movff	strtod@_u+2,?_strtod+2
 10948  0022FC  0012               	return	
 10949  0022FE                     __end_of_strtod:
 10950                           	opt stack 0
 10951                           tblptru	equ	0xFF8
 10952                           tblptrh	equ	0xFF7
 10953                           tblptrl	equ	0xFF6
 10954                           tablat	equ	0xFF5
 10955                           prodh	equ	0xFF4
 10956                           prodl	equ	0xFF3
 10957                           intcon	equ	0xFF2
 10958                           intcon2	equ	0xFF1
 10959                           indf0	equ	0xFEF
 10960                           postinc0	equ	0xFEE
 10961                           fsr0h	equ	0xFEA
 10962                           fsr0l	equ	0xFE9
 10963                           wreg	equ	0xFE8
 10964                           indf1	equ	0xFE7
 10965                           fsr1h	equ	0xFE2
 10966                           fsr1l	equ	0xFE1
 10967                           indf2	equ	0xFDF
 10968                           postinc2	equ	0xFDE
 10969                           postdec2	equ	0xFDD
 10970                           fsr2h	equ	0xFDA
 10971                           fsr2l	equ	0xFD9
 10972                           status	equ	0xFD8
 10973                           
 10974 ;; *************** function _isspace *****************
 10975 ;; Defined at:
 10976 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\isspace.c"
 10977 ;; Parameters:    Size  Location     Type
 10978 ;;  c               1    wreg     unsigned char 
 10979 ;; Auto vars:     Size  Location     Type
 10980 ;;  c               1   17[COMRAM] unsigned char 
 10981 ;; Return value:  Size  Location     Type
 10982 ;;		None               void
 10983 ;; Registers used:
 10984 ;;		wreg, status,2, status,0
 10985 ;; Tracked objects:
 10986 ;;		On entry : 0/0
 10987 ;;		On exit  : 0/0
 10988 ;;		Unchanged: 0/0
 10989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10990 ;;      Params:         0       0       0       0       0       0       0       0       0
 10991 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10992 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10993 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10994 ;;Total ram usage:        3 bytes
 10995 ;; Hardware stack levels used:    1
 10996 ;; Hardware stack levels required when called:    2
 10997 ;; This function calls:
 10998 ;;		Nothing
 10999 ;; This function is called by:
 11000 ;;		_strtod
 11001 ;; This function uses a non-reentrant model
 11002 ;;
 11003                           
 11004                           	psect	text41
 11005  004218                     __ptext41:
 11006                           	opt stack 0
 11007  004218                     _isspace:
 11008                           	opt stack 25
 11009                           
 11010                           ;incstack = 0
 11011                           ;isspace@c stored from wreg
 11012  004218  6E12               	movwf	isspace@c,c
 11013  00421A  0E01               	movlw	1
 11014  00421C  6E11               	movwf	_isspace$1747,c
 11015  00421E  0E20               	movlw	32
 11016  004220  1812               	xorwf	isspace@c,w,c
 11017  004222  B4D8               	btfsc	status,2,c
 11018  004224  D008               	goto	l3838
 11019  004226  0E0E               	movlw	14
 11020  004228  6012               	cpfslt	isspace@c,c
 11021  00422A  D003               	goto	l3836
 11022  00422C  0E09               	movlw	9
 11023  00422E  6012               	cpfslt	isspace@c,c
 11024  004230  D002               	goto	l3838
 11025  004232                     l3836:
 11026  004232  0E00               	movlw	0
 11027  004234  6E11               	movwf	_isspace$1747,c
 11028  004236                     l3838:
 11029  004236  C011  F010         	movff	_isspace$1747,??_isspace
 11030  00423A  3010               	rrcf	??_isspace,w,c
 11031  00423C  0012               	return	
 11032  00423E                     __end_of_isspace:
 11033                           	opt stack 0
 11034                           tblptru	equ	0xFF8
 11035                           tblptrh	equ	0xFF7
 11036                           tblptrl	equ	0xFF6
 11037                           tablat	equ	0xFF5
 11038                           prodh	equ	0xFF4
 11039                           prodl	equ	0xFF3
 11040                           intcon	equ	0xFF2
 11041                           intcon2	equ	0xFF1
 11042                           indf0	equ	0xFEF
 11043                           postinc0	equ	0xFEE
 11044                           fsr0h	equ	0xFEA
 11045                           fsr0l	equ	0xFE9
 11046                           wreg	equ	0xFE8
 11047                           indf1	equ	0xFE7
 11048                           fsr1h	equ	0xFE2
 11049                           fsr1l	equ	0xFE1
 11050                           indf2	equ	0xFDF
 11051                           postinc2	equ	0xFDE
 11052                           postdec2	equ	0xFDD
 11053                           fsr2h	equ	0xFDA
 11054                           fsr2l	equ	0xFD9
 11055                           status	equ	0xFD8
 11056                           
 11057 ;; *************** function _isdigit *****************
 11058 ;; Defined at:
 11059 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\isdigit.c"
 11060 ;; Parameters:    Size  Location     Type
 11061 ;;  c               1    wreg     unsigned char 
 11062 ;; Auto vars:     Size  Location     Type
 11063 ;;  c               1   17[COMRAM] unsigned char 
 11064 ;; Return value:  Size  Location     Type
 11065 ;;		None               void
 11066 ;; Registers used:
 11067 ;;		wreg, status,2, status,0
 11068 ;; Tracked objects:
 11069 ;;		On entry : 0/0
 11070 ;;		On exit  : 0/0
 11071 ;;		Unchanged: 0/0
 11072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11073 ;;      Params:         0       0       0       0       0       0       0       0       0
 11074 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11075 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11076 ;;      Totals:         3       0       0       0       0       0       0       0       0
 11077 ;;Total ram usage:        3 bytes
 11078 ;; Hardware stack levels used:    1
 11079 ;; Hardware stack levels required when called:    2
 11080 ;; This function calls:
 11081 ;;		Nothing
 11082 ;; This function is called by:
 11083 ;;		_sprintf
 11084 ;;		_strtod
 11085 ;; This function uses a non-reentrant model
 11086 ;;
 11087                           
 11088                           	psect	text42
 11089  0042A8                     __ptext42:
 11090                           	opt stack 0
 11091  0042A8                     _isdigit:
 11092                           	opt stack 26
 11093                           
 11094                           ;incstack = 0
 11095                           ;isdigit@c stored from wreg
 11096  0042A8  6E12               	movwf	isdigit@c,c
 11097  0042AA  0E00               	movlw	0
 11098  0042AC  6E11               	movwf	_isdigit$1744,c
 11099  0042AE  0E3A               	movlw	58
 11100  0042B0  6012               	cpfslt	isdigit@c,c
 11101  0042B2  D005               	goto	l3790
 11102  0042B4  0E2F               	movlw	47
 11103  0042B6  6412               	cpfsgt	isdigit@c,c
 11104  0042B8  D002               	goto	l3790
 11105  0042BA  0E01               	movlw	1
 11106  0042BC  6E11               	movwf	_isdigit$1744,c
 11107  0042BE                     l3790:
 11108  0042BE  C011  F010         	movff	_isdigit$1744,??_isdigit
 11109  0042C2  3010               	rrcf	??_isdigit,w,c
 11110  0042C4  0012               	return	
 11111  0042C6                     __end_of_isdigit:
 11112                           	opt stack 0
 11113                           tblptru	equ	0xFF8
 11114                           tblptrh	equ	0xFF7
 11115                           tblptrl	equ	0xFF6
 11116                           tablat	equ	0xFF5
 11117                           prodh	equ	0xFF4
 11118                           prodl	equ	0xFF3
 11119                           intcon	equ	0xFF2
 11120                           intcon2	equ	0xFF1
 11121                           indf0	equ	0xFEF
 11122                           postinc0	equ	0xFEE
 11123                           fsr0h	equ	0xFEA
 11124                           fsr0l	equ	0xFE9
 11125                           wreg	equ	0xFE8
 11126                           indf1	equ	0xFE7
 11127                           fsr1h	equ	0xFE2
 11128                           fsr1l	equ	0xFE1
 11129                           indf2	equ	0xFDF
 11130                           postinc2	equ	0xFDE
 11131                           postdec2	equ	0xFDD
 11132                           fsr2h	equ	0xFDA
 11133                           fsr2l	equ	0xFD9
 11134                           status	equ	0xFD8
 11135                           
 11136 ;; *************** function ___lmul *****************
 11137 ;; Defined at:
 11138 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\Umul32.c"
 11139 ;; Parameters:    Size  Location     Type
 11140 ;;  multiplier      4   15[COMRAM] unsigned long 
 11141 ;;  multiplicand    4   19[COMRAM] unsigned long 
 11142 ;; Auto vars:     Size  Location     Type
 11143 ;;  product         4   23[COMRAM] unsigned long 
 11144 ;; Return value:  Size  Location     Type
 11145 ;;                  4   15[COMRAM] unsigned long 
 11146 ;; Registers used:
 11147 ;;		wreg, status,2, status,0
 11148 ;; Tracked objects:
 11149 ;;		On entry : 0/0
 11150 ;;		On exit  : 0/0
 11151 ;;		Unchanged: 0/0
 11152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11153 ;;      Params:         8       0       0       0       0       0       0       0       0
 11154 ;;      Locals:         4       0       0       0       0       0       0       0       0
 11155 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11156 ;;      Totals:        12       0       0       0       0       0       0       0       0
 11157 ;;Total ram usage:       12 bytes
 11158 ;; Hardware stack levels used:    1
 11159 ;; Hardware stack levels required when called:    2
 11160 ;; This function calls:
 11161 ;;		Nothing
 11162 ;; This function is called by:
 11163 ;;		_strtod
 11164 ;; This function uses a non-reentrant model
 11165 ;;
 11166                           
 11167                           	psect	text43
 11168  003E32                     __ptext43:
 11169                           	opt stack 0
 11170  003E32                     ___lmul:
 11171                           	opt stack 25
 11172                           
 11173                           ;incstack = 0
 11174  003E32  0E00               	movlw	0
 11175  003E34  6E18               	movwf	___lmul@product,c
 11176  003E36  0E00               	movlw	0
 11177  003E38  6E19               	movwf	___lmul@product+1,c
 11178  003E3A  0E00               	movlw	0
 11179  003E3C  6E1A               	movwf	___lmul@product+2,c
 11180  003E3E  0E00               	movlw	0
 11181  003E40  6E1B               	movwf	___lmul@product+3,c
 11182  003E42                     l3796:
 11183  003E42  A010               	btfss	___lmul@multiplier,0,c
 11184  003E44  D008               	goto	l3800
 11185  003E46  5014               	movf	___lmul@multiplicand,w,c
 11186  003E48  2618               	addwf	___lmul@product,f,c
 11187  003E4A  5015               	movf	___lmul@multiplicand+1,w,c
 11188  003E4C  2219               	addwfc	___lmul@product+1,f,c
 11189  003E4E  5016               	movf	___lmul@multiplicand+2,w,c
 11190  003E50  221A               	addwfc	___lmul@product+2,f,c
 11191  003E52  5017               	movf	___lmul@multiplicand+3,w,c
 11192  003E54  221B               	addwfc	___lmul@product+3,f,c
 11193  003E56                     l3800:
 11194  003E56  90D8               	bcf	status,0,c
 11195  003E58  3614               	rlcf	___lmul@multiplicand,f,c
 11196  003E5A  3615               	rlcf	___lmul@multiplicand+1,f,c
 11197  003E5C  3616               	rlcf	___lmul@multiplicand+2,f,c
 11198  003E5E  3617               	rlcf	___lmul@multiplicand+3,f,c
 11199  003E60  90D8               	bcf	status,0,c
 11200  003E62  3213               	rrcf	___lmul@multiplier+3,f,c
 11201  003E64  3212               	rrcf	___lmul@multiplier+2,f,c
 11202  003E66  3211               	rrcf	___lmul@multiplier+1,f,c
 11203  003E68  3210               	rrcf	___lmul@multiplier,f,c
 11204  003E6A  5010               	movf	___lmul@multiplier,w,c
 11205  003E6C  1011               	iorwf	___lmul@multiplier+1,w,c
 11206  003E6E  1012               	iorwf	___lmul@multiplier+2,w,c
 11207  003E70  1013               	iorwf	___lmul@multiplier+3,w,c
 11208  003E72  A4D8               	btfss	status,2,c
 11209  003E74  D7E6               	goto	l3796
 11210  003E76  C018  F010         	movff	___lmul@product,?___lmul
 11211  003E7A  C019  F011         	movff	___lmul@product+1,?___lmul+1
 11212  003E7E  C01A  F012         	movff	___lmul@product+2,?___lmul+2
 11213  003E82  C01B  F013         	movff	___lmul@product+3,?___lmul+3
 11214  003E86  0012               	return		;funcret
 11215  003E88                     __end_of___lmul:
 11216                           	opt stack 0
 11217                           tblptru	equ	0xFF8
 11218                           tblptrh	equ	0xFF7
 11219                           tblptrl	equ	0xFF6
 11220                           tablat	equ	0xFF5
 11221                           prodh	equ	0xFF4
 11222                           prodl	equ	0xFF3
 11223                           intcon	equ	0xFF2
 11224                           intcon2	equ	0xFF1
 11225                           indf0	equ	0xFEF
 11226                           postinc0	equ	0xFEE
 11227                           fsr0h	equ	0xFEA
 11228                           fsr0l	equ	0xFE9
 11229                           wreg	equ	0xFE8
 11230                           indf1	equ	0xFE7
 11231                           fsr1h	equ	0xFE2
 11232                           fsr1l	equ	0xFE1
 11233                           indf2	equ	0xFDF
 11234                           postinc2	equ	0xFDE
 11235                           postdec2	equ	0xFDD
 11236                           fsr2h	equ	0xFDA
 11237                           fsr2l	equ	0xFD9
 11238                           status	equ	0xFD8
 11239                           
 11240 ;; *************** function ___ftneg *****************
 11241 ;; Defined at:
 11242 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftneg.c"
 11243 ;; Parameters:    Size  Location     Type
 11244 ;;  f1              3   15[COMRAM] float 
 11245 ;; Auto vars:     Size  Location     Type
 11246 ;;		None
 11247 ;; Return value:  Size  Location     Type
 11248 ;;                  3   15[COMRAM] float 
 11249 ;; Registers used:
 11250 ;;		wreg, status,2, status,0
 11251 ;; Tracked objects:
 11252 ;;		On entry : 0/0
 11253 ;;		On exit  : 0/0
 11254 ;;		Unchanged: 0/0
 11255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11256 ;;      Params:         3       0       0       0       0       0       0       0       0
 11257 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11258 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11259 ;;      Totals:         3       0       0       0       0       0       0       0       0
 11260 ;;Total ram usage:        3 bytes
 11261 ;; Hardware stack levels used:    1
 11262 ;; Hardware stack levels required when called:    2
 11263 ;; This function calls:
 11264 ;;		Nothing
 11265 ;; This function is called by:
 11266 ;;		_linearMove1Axis
 11267 ;;		_linearMove2Axis
 11268 ;;		_sprintf
 11269 ;;		_strtod
 11270 ;; This function uses a non-reentrant model
 11271 ;;
 11272                           
 11273                           	psect	text44
 11274  004262                     __ptext44:
 11275                           	opt stack 0
 11276  004262                     ___ftneg:
 11277                           	opt stack 26
 11278                           
 11279                           ;incstack = 0
 11280  004262  5010               	movf	___ftneg@f1,w,c
 11281  004264  1011               	iorwf	___ftneg@f1+1,w,c
 11282  004266  1012               	iorwf	___ftneg@f1+2,w,c
 11283  004268  B4D8               	btfsc	status,2,c
 11284  00426A  D006               	goto	l913
 11285  00426C  0E00               	movlw	0
 11286  00426E  1A10               	xorwf	___ftneg@f1,f,c
 11287  004270  0E00               	movlw	0
 11288  004272  1A11               	xorwf	___ftneg@f1+1,f,c
 11289  004274  0E80               	movlw	128
 11290  004276  1A12               	xorwf	___ftneg@f1+2,f,c
 11291  004278                     l913:
 11292  004278  C010  F010         	movff	___ftneg@f1,?___ftneg
 11293  00427C  C011  F011         	movff	___ftneg@f1+1,?___ftneg+1
 11294  004280  C012  F012         	movff	___ftneg@f1+2,?___ftneg+2
 11295  004284  0012               	return		;funcret
 11296  004286                     __end_of___ftneg:
 11297                           	opt stack 0
 11298                           tblptru	equ	0xFF8
 11299                           tblptrh	equ	0xFF7
 11300                           tblptrl	equ	0xFF6
 11301                           tablat	equ	0xFF5
 11302                           prodh	equ	0xFF4
 11303                           prodl	equ	0xFF3
 11304                           intcon	equ	0xFF2
 11305                           intcon2	equ	0xFF1
 11306                           indf0	equ	0xFEF
 11307                           postinc0	equ	0xFEE
 11308                           fsr0h	equ	0xFEA
 11309                           fsr0l	equ	0xFE9
 11310                           wreg	equ	0xFE8
 11311                           indf1	equ	0xFE7
 11312                           fsr1h	equ	0xFE2
 11313                           fsr1l	equ	0xFE1
 11314                           indf2	equ	0xFDF
 11315                           postinc2	equ	0xFDE
 11316                           postdec2	equ	0xFDD
 11317                           fsr2h	equ	0xFDA
 11318                           fsr2l	equ	0xFD9
 11319                           status	equ	0xFD8
 11320                           
 11321 ;; *************** function ___ftmul *****************
 11322 ;; Defined at:
 11323 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftmul.c"
 11324 ;; Parameters:    Size  Location     Type
 11325 ;;  f1              3   35[COMRAM] float 
 11326 ;;  f2              3   38[COMRAM] float 
 11327 ;; Auto vars:     Size  Location     Type
 11328 ;;  f3_as_produc    3   45[COMRAM] unsigned um
 11329 ;;  sign            1   49[COMRAM] unsigned char 
 11330 ;;  cntr            1   48[COMRAM] unsigned char 
 11331 ;;  exp             1   44[COMRAM] unsigned char 
 11332 ;; Return value:  Size  Location     Type
 11333 ;;                  3   35[COMRAM] float 
 11334 ;; Registers used:
 11335 ;;		wreg, status,2, status,0, cstack
 11336 ;; Tracked objects:
 11337 ;;		On entry : 0/0
 11338 ;;		On exit  : 0/0
 11339 ;;		Unchanged: 0/0
 11340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11341 ;;      Params:         6       0       0       0       0       0       0       0       0
 11342 ;;      Locals:         6       0       0       0       0       0       0       0       0
 11343 ;;      Temps:          3       0       0       0       0       0       0       0       0
 11344 ;;      Totals:        15       0       0       0       0       0       0       0       0
 11345 ;;Total ram usage:       15 bytes
 11346 ;; Hardware stack levels used:    1
 11347 ;; Hardware stack levels required when called:    3
 11348 ;; This function calls:
 11349 ;;		___ftpack
 11350 ;; This function is called by:
 11351 ;;		_linearMove1Axis
 11352 ;;		_linearMove2Axis
 11353 ;;		_fround
 11354 ;;		_scale
 11355 ;;		_sprintf
 11356 ;;		_strtod
 11357 ;; This function uses a non-reentrant model
 11358 ;;
 11359                           
 11360                           	psect	text45
 11361  00345A                     __ptext45:
 11362                           	opt stack 0
 11363  00345A                     ___ftmul:
 11364                           	opt stack 24
 11365                           
 11366                           ;incstack = 0
 11367  00345A  C026  F02A         	movff	___ftmul@f1+2,??___ftmul
 11368  00345E  6A2B               	clrf	(??___ftmul+1)& (0+255),c
 11369  003460  6A2C               	clrf	(??___ftmul+2)& (0+255),c
 11370  003462  3425               	rlcf	___ftmul@f1+1,w,c
 11371  003464  362A               	rlcf	??___ftmul& (0+255),f,c
 11372  003466  E301               	bnc	u5901
 11373  003468  802B               	bsf	(??___ftmul+1)& (0+255),0,c
 11374  00346A                     u5901:
 11375  00346A  502A               	movf	??___ftmul,w,c
 11376  00346C  6E2D               	movwf	___ftmul@exp,c
 11377  00346E  502D               	movf	___ftmul@exp,w,c
 11378  003470  A4D8               	btfss	status,2,c
 11379  003472  D007               	goto	l5306
 11380  003474  0E00               	movlw	0
 11381  003476  6E24               	movwf	?___ftmul,c
 11382  003478  0E00               	movlw	0
 11383  00347A  6E25               	movwf	?___ftmul+1,c
 11384  00347C  0E00               	movlw	0
 11385  00347E  6E26               	movwf	?___ftmul+2,c
 11386  003480  0012               	return	
 11387  003482                     l5306:
 11388  003482  C029  F02A         	movff	___ftmul@f2+2,??___ftmul
 11389  003486  6A2B               	clrf	(??___ftmul+1)& (0+255),c
 11390  003488  6A2C               	clrf	(??___ftmul+2)& (0+255),c
 11391  00348A  3428               	rlcf	___ftmul@f2+1,w,c
 11392  00348C  362A               	rlcf	??___ftmul& (0+255),f,c
 11393  00348E  E301               	bnc	u5921
 11394  003490  802B               	bsf	(??___ftmul+1)& (0+255),0,c
 11395  003492                     u5921:
 11396  003492  502A               	movf	??___ftmul,w,c
 11397  003494  6E32               	movwf	___ftmul@sign,c
 11398  003496  5032               	movf	___ftmul@sign,w,c
 11399  003498  A4D8               	btfss	status,2,c
 11400  00349A  D007               	goto	l5312
 11401  00349C  0E00               	movlw	0
 11402  00349E  6E24               	movwf	?___ftmul,c
 11403  0034A0  0E00               	movlw	0
 11404  0034A2  6E25               	movwf	?___ftmul+1,c
 11405  0034A4  0E00               	movlw	0
 11406  0034A6  6E26               	movwf	?___ftmul+2,c
 11407  0034A8  0012               	return	
 11408  0034AA                     l5312:
 11409  0034AA  5032               	movf	___ftmul@sign,w,c
 11410  0034AC  0F7B               	addlw	123
 11411  0034AE  262D               	addwf	___ftmul@exp,f,c
 11412  0034B0  C026  F032         	movff	___ftmul@f1+2,___ftmul@sign
 11413  0034B4  5029               	movf	___ftmul@f2+2,w,c
 11414  0034B6  1A32               	xorwf	___ftmul@sign,f,c
 11415  0034B8  0E80               	movlw	128
 11416  0034BA  1632               	andwf	___ftmul@sign,f,c
 11417  0034BC  8E25               	bsf	___ftmul@f1+1,7,c
 11418  0034BE  8E28               	bsf	___ftmul@f2+1,7,c
 11419  0034C0  0EFF               	movlw	255
 11420  0034C2  1627               	andwf	___ftmul@f2,f,c
 11421  0034C4  0EFF               	movlw	255
 11422  0034C6  1628               	andwf	___ftmul@f2+1,f,c
 11423  0034C8  0E00               	movlw	0
 11424  0034CA  1629               	andwf	___ftmul@f2+2,f,c
 11425  0034CC  0E00               	movlw	0
 11426  0034CE  6E2E               	movwf	___ftmul@f3_as_product,c
 11427  0034D0  0E00               	movlw	0
 11428  0034D2  6E2F               	movwf	___ftmul@f3_as_product+1,c
 11429  0034D4  0E00               	movlw	0
 11430  0034D6  6E30               	movwf	___ftmul@f3_as_product+2,c
 11431  0034D8  0E07               	movlw	7
 11432  0034DA  6E31               	movwf	___ftmul@cntr,c
 11433  0034DC                     l5326:
 11434  0034DC  A024               	btfss	___ftmul@f1,0,c
 11435  0034DE  D006               	goto	l5330
 11436  0034E0  5027               	movf	___ftmul@f2,w,c
 11437  0034E2  262E               	addwf	___ftmul@f3_as_product,f,c
 11438  0034E4  5028               	movf	___ftmul@f2+1,w,c
 11439  0034E6  222F               	addwfc	___ftmul@f3_as_product+1,f,c
 11440  0034E8  5029               	movf	___ftmul@f2+2,w,c
 11441  0034EA  2230               	addwfc	___ftmul@f3_as_product+2,f,c
 11442  0034EC                     l5330:
 11443  0034EC  90D8               	bcf	status,0,c
 11444  0034EE  3226               	rrcf	___ftmul@f1+2,f,c
 11445  0034F0  3225               	rrcf	___ftmul@f1+1,f,c
 11446  0034F2  3224               	rrcf	___ftmul@f1,f,c
 11447  0034F4  90D8               	bcf	status,0,c
 11448  0034F6  3627               	rlcf	___ftmul@f2,f,c
 11449  0034F8  3628               	rlcf	___ftmul@f2+1,f,c
 11450  0034FA  3629               	rlcf	___ftmul@f2+2,f,c
 11451  0034FC  2E31               	decfsz	___ftmul@cntr,f,c
 11452  0034FE  D7EE               	goto	l5326
 11453  003500  0E09               	movlw	9
 11454  003502  6E31               	movwf	___ftmul@cntr,c
 11455  003504                     l5336:
 11456  003504  A024               	btfss	___ftmul@f1,0,c
 11457  003506  D006               	goto	l5340
 11458  003508  5027               	movf	___ftmul@f2,w,c
 11459  00350A  262E               	addwf	___ftmul@f3_as_product,f,c
 11460  00350C  5028               	movf	___ftmul@f2+1,w,c
 11461  00350E  222F               	addwfc	___ftmul@f3_as_product+1,f,c
 11462  003510  5029               	movf	___ftmul@f2+2,w,c
 11463  003512  2230               	addwfc	___ftmul@f3_as_product+2,f,c
 11464  003514                     l5340:
 11465  003514  90D8               	bcf	status,0,c
 11466  003516  3226               	rrcf	___ftmul@f1+2,f,c
 11467  003518  3225               	rrcf	___ftmul@f1+1,f,c
 11468  00351A  3224               	rrcf	___ftmul@f1,f,c
 11469  00351C  90D8               	bcf	status,0,c
 11470  00351E  3230               	rrcf	___ftmul@f3_as_product+2,f,c
 11471  003520  322F               	rrcf	___ftmul@f3_as_product+1,f,c
 11472  003522  322E               	rrcf	___ftmul@f3_as_product,f,c
 11473  003524  2E31               	decfsz	___ftmul@cntr,f,c
 11474  003526  D7EE               	goto	l5336
 11475  003528  C02E  F010         	movff	___ftmul@f3_as_product,___ftpack@arg
 11476  00352C  C02F  F011         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 11477  003530  C030  F012         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 11478  003534  C02D  F013         	movff	___ftmul@exp,___ftpack@exp
 11479  003538  C032  F014         	movff	___ftmul@sign,___ftpack@sign
 11480  00353C  EC3D  F01C         	call	___ftpack	;wreg free
 11481  003540  C010  F024         	movff	?___ftpack,?___ftmul
 11482  003544  C011  F025         	movff	?___ftpack+1,?___ftmul+1
 11483  003548  C012  F026         	movff	?___ftpack+2,?___ftmul+2
 11484  00354C  0012               	return	
 11485  00354E                     __end_of___ftmul:
 11486                           	opt stack 0
 11487                           tblptru	equ	0xFF8
 11488                           tblptrh	equ	0xFF7
 11489                           tblptrl	equ	0xFF6
 11490                           tablat	equ	0xFF5
 11491                           prodh	equ	0xFF4
 11492                           prodl	equ	0xFF3
 11493                           intcon	equ	0xFF2
 11494                           intcon2	equ	0xFF1
 11495                           indf0	equ	0xFEF
 11496                           postinc0	equ	0xFEE
 11497                           fsr0h	equ	0xFEA
 11498                           fsr0l	equ	0xFE9
 11499                           wreg	equ	0xFE8
 11500                           indf1	equ	0xFE7
 11501                           fsr1h	equ	0xFE2
 11502                           fsr1l	equ	0xFE1
 11503                           indf2	equ	0xFDF
 11504                           postinc2	equ	0xFDE
 11505                           postdec2	equ	0xFDD
 11506                           fsr2h	equ	0xFDA
 11507                           fsr2l	equ	0xFD9
 11508                           status	equ	0xFD8
 11509                           
 11510 ;; *************** function ___ftge *****************
 11511 ;; Defined at:
 11512 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftge.c"
 11513 ;; Parameters:    Size  Location     Type
 11514 ;;  ff1             3   15[COMRAM] float 
 11515 ;;  ff2             3   18[COMRAM] float 
 11516 ;; Auto vars:     Size  Location     Type
 11517 ;;		None
 11518 ;; Return value:  Size  Location     Type
 11519 ;;		None               void
 11520 ;; Registers used:
 11521 ;;		wreg, status,2, status,0
 11522 ;; Tracked objects:
 11523 ;;		On entry : 0/0
 11524 ;;		On exit  : 0/0
 11525 ;;		Unchanged: 0/0
 11526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11527 ;;      Params:         6       0       0       0       0       0       0       0       0
 11528 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11529 ;;      Temps:          3       0       0       0       0       0       0       0       0
 11530 ;;      Totals:         9       0       0       0       0       0       0       0       0
 11531 ;;Total ram usage:        9 bytes
 11532 ;; Hardware stack levels used:    1
 11533 ;; Hardware stack levels required when called:    2
 11534 ;; This function calls:
 11535 ;;		Nothing
 11536 ;; This function is called by:
 11537 ;;		_linearMove1Axis
 11538 ;;		_linearMove2Axis
 11539 ;;		_sprintf
 11540 ;;		_strtod
 11541 ;; This function uses a non-reentrant model
 11542 ;;
 11543                           
 11544                           	psect	text46
 11545  003928                     __ptext46:
 11546                           	opt stack 0
 11547  003928                     ___ftge:
 11548                           	opt stack 26
 11549                           
 11550                           ;incstack = 0
 11551  003928  AE12               	btfss	___ftge@ff1+2,7,c
 11552  00392A  D016               	goto	l3464
 11553  00392C  C010  F016         	movff	___ftge@ff1,??___ftge
 11554  003930  C011  F017         	movff	___ftge@ff1+1,??___ftge+1
 11555  003934  C012  F018         	movff	___ftge@ff1+2,??___ftge+2
 11556  003938  1E16               	comf	??___ftge,f,c
 11557  00393A  1E17               	comf	??___ftge+1,f,c
 11558  00393C  1E18               	comf	??___ftge+2,f,c
 11559  00393E  2A16               	incf	??___ftge,f,c
 11560  003940  0E00               	movlw	0
 11561  003942  2217               	addwfc	??___ftge+1,f,c
 11562  003944  2218               	addwfc	??___ftge+2,f,c
 11563  003946  0E00               	movlw	0
 11564  003948  2416               	addwf	??___ftge,w,c
 11565  00394A  6E10               	movwf	___ftge@ff1,c
 11566  00394C  0E00               	movlw	0
 11567  00394E  2017               	addwfc	??___ftge+1,w,c
 11568  003950  6E11               	movwf	___ftge@ff1+1,c
 11569  003952  0E80               	movlw	128
 11570  003954  2018               	addwfc	??___ftge+2,w,c
 11571  003956  6E12               	movwf	___ftge@ff1+2,c
 11572  003958                     l3464:
 11573  003958  AE15               	btfss	___ftge@ff2+2,7,c
 11574  00395A  D016               	goto	l3468
 11575  00395C  C013  F016         	movff	___ftge@ff2,??___ftge
 11576  003960  C014  F017         	movff	___ftge@ff2+1,??___ftge+1
 11577  003964  C015  F018         	movff	___ftge@ff2+2,??___ftge+2
 11578  003968  1E16               	comf	??___ftge,f,c
 11579  00396A  1E17               	comf	??___ftge+1,f,c
 11580  00396C  1E18               	comf	??___ftge+2,f,c
 11581  00396E  2A16               	incf	??___ftge,f,c
 11582  003970  0E00               	movlw	0
 11583  003972  2217               	addwfc	??___ftge+1,f,c
 11584  003974  2218               	addwfc	??___ftge+2,f,c
 11585  003976  0E00               	movlw	0
 11586  003978  2416               	addwf	??___ftge,w,c
 11587  00397A  6E13               	movwf	___ftge@ff2,c
 11588  00397C  0E00               	movlw	0
 11589  00397E  2017               	addwfc	??___ftge+1,w,c
 11590  003980  6E14               	movwf	___ftge@ff2+1,c
 11591  003982  0E80               	movlw	128
 11592  003984  2018               	addwfc	??___ftge+2,w,c
 11593  003986  6E15               	movwf	___ftge@ff2+2,c
 11594  003988                     l3468:
 11595  003988  0E00               	movlw	0
 11596  00398A  1A10               	xorwf	___ftge@ff1,f,c
 11597  00398C  0E00               	movlw	0
 11598  00398E  1A11               	xorwf	___ftge@ff1+1,f,c
 11599  003990  0E80               	movlw	128
 11600  003992  1A12               	xorwf	___ftge@ff1+2,f,c
 11601  003994  0E00               	movlw	0
 11602  003996  1A13               	xorwf	___ftge@ff2,f,c
 11603  003998  0E00               	movlw	0
 11604  00399A  1A14               	xorwf	___ftge@ff2+1,f,c
 11605  00399C  0E80               	movlw	128
 11606  00399E  1A15               	xorwf	___ftge@ff2+2,f,c
 11607  0039A0  5013               	movf	___ftge@ff2,w,c
 11608  0039A2  5C10               	subwf	___ftge@ff1,w,c
 11609  0039A4  5014               	movf	___ftge@ff2+1,w,c
 11610  0039A6  5811               	subwfb	___ftge@ff1+1,w,c
 11611  0039A8  5015               	movf	___ftge@ff2+2,w,c
 11612  0039AA  5812               	subwfb	___ftge@ff1+2,w,c
 11613  0039AC  B0D8               	btfsc	status,0,c
 11614  0039AE  D002               	goto	l3474
 11615  0039B0  90D8               	bcf	status,0,c
 11616  0039B2  0012               	return	
 11617  0039B4                     l3474:
 11618  0039B4  80D8               	bsf	status,0,c
 11619  0039B6  0012               	return	
 11620  0039B8                     __end_of___ftge:
 11621                           	opt stack 0
 11622                           tblptru	equ	0xFF8
 11623                           tblptrh	equ	0xFF7
 11624                           tblptrl	equ	0xFF6
 11625                           tablat	equ	0xFF5
 11626                           prodh	equ	0xFF4
 11627                           prodl	equ	0xFF3
 11628                           intcon	equ	0xFF2
 11629                           intcon2	equ	0xFF1
 11630                           indf0	equ	0xFEF
 11631                           postinc0	equ	0xFEE
 11632                           fsr0h	equ	0xFEA
 11633                           fsr0l	equ	0xFE9
 11634                           wreg	equ	0xFE8
 11635                           indf1	equ	0xFE7
 11636                           fsr1h	equ	0xFE2
 11637                           fsr1l	equ	0xFE1
 11638                           indf2	equ	0xFDF
 11639                           postinc2	equ	0xFDE
 11640                           postdec2	equ	0xFDD
 11641                           fsr2h	equ	0xFDA
 11642                           fsr2l	equ	0xFD9
 11643                           status	equ	0xFD8
 11644                           
 11645 ;; *************** function ___ftdiv *****************
 11646 ;; Defined at:
 11647 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftdiv.c"
 11648 ;; Parameters:    Size  Location     Type
 11649 ;;  f1              3   27[COMRAM] float 
 11650 ;;  f2              3   30[COMRAM] float 
 11651 ;; Auto vars:     Size  Location     Type
 11652 ;;  f3              3   37[COMRAM] float 
 11653 ;;  sign            1   41[COMRAM] unsigned char 
 11654 ;;  exp             1   40[COMRAM] unsigned char 
 11655 ;;  cntr            1   36[COMRAM] unsigned char 
 11656 ;; Return value:  Size  Location     Type
 11657 ;;                  3   27[COMRAM] float 
 11658 ;; Registers used:
 11659 ;;		wreg, status,2, status,0, cstack
 11660 ;; Tracked objects:
 11661 ;;		On entry : 0/0
 11662 ;;		On exit  : 0/0
 11663 ;;		Unchanged: 0/0
 11664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11665 ;;      Params:         6       0       0       0       0       0       0       0       0
 11666 ;;      Locals:         6       0       0       0       0       0       0       0       0
 11667 ;;      Temps:          3       0       0       0       0       0       0       0       0
 11668 ;;      Totals:        15       0       0       0       0       0       0       0       0
 11669 ;;Total ram usage:       15 bytes
 11670 ;; Hardware stack levels used:    1
 11671 ;; Hardware stack levels required when called:    3
 11672 ;; This function calls:
 11673 ;;		___ftpack
 11674 ;; This function is called by:
 11675 ;;		_linearMove1Axis
 11676 ;;		_linearMove2Axis
 11677 ;;		_calculate_motordelay
 11678 ;;		_moveToSwitch
 11679 ;;		_strtod
 11680 ;; This function uses a non-reentrant model
 11681 ;;
 11682                           
 11683                           	psect	text47
 11684  00354E                     __ptext47:
 11685                           	opt stack 0
 11686  00354E                     ___ftdiv:
 11687                           	opt stack 23
 11688                           
 11689                           ;incstack = 0
 11690  00354E  C01E  F022         	movff	___ftdiv@f1+2,??___ftdiv
 11691  003552  6A23               	clrf	(??___ftdiv+1)& (0+255),c
 11692  003554  6A24               	clrf	(??___ftdiv+2)& (0+255),c
 11693  003556  341D               	rlcf	___ftdiv@f1+1,w,c
 11694  003558  3622               	rlcf	??___ftdiv& (0+255),f,c
 11695  00355A  E301               	bnc	u5851
 11696  00355C  8023               	bsf	(??___ftdiv+1)& (0+255),0,c
 11697  00355E                     u5851:
 11698  00355E  5022               	movf	??___ftdiv,w,c
 11699  003560  6E29               	movwf	___ftdiv@exp,c
 11700  003562  5029               	movf	___ftdiv@exp,w,c
 11701  003564  A4D8               	btfss	status,2,c
 11702  003566  D007               	goto	l5260
 11703  003568  0E00               	movlw	0
 11704  00356A  6E1C               	movwf	?___ftdiv,c
 11705  00356C  0E00               	movlw	0
 11706  00356E  6E1D               	movwf	?___ftdiv+1,c
 11707  003570  0E00               	movlw	0
 11708  003572  6E1E               	movwf	?___ftdiv+2,c
 11709  003574  0012               	return	
 11710  003576                     l5260:
 11711  003576  C021  F022         	movff	___ftdiv@f2+2,??___ftdiv
 11712  00357A  6A23               	clrf	(??___ftdiv+1)& (0+255),c
 11713  00357C  6A24               	clrf	(??___ftdiv+2)& (0+255),c
 11714  00357E  3420               	rlcf	___ftdiv@f2+1,w,c
 11715  003580  3622               	rlcf	??___ftdiv& (0+255),f,c
 11716  003582  E301               	bnc	u5871
 11717  003584  8023               	bsf	(??___ftdiv+1)& (0+255),0,c
 11718  003586                     u5871:
 11719  003586  5022               	movf	??___ftdiv,w,c
 11720  003588  6E2A               	movwf	___ftdiv@sign,c
 11721  00358A  502A               	movf	___ftdiv@sign,w,c
 11722  00358C  A4D8               	btfss	status,2,c
 11723  00358E  D007               	goto	l5266
 11724  003590  0E00               	movlw	0
 11725  003592  6E1C               	movwf	?___ftdiv,c
 11726  003594  0E00               	movlw	0
 11727  003596  6E1D               	movwf	?___ftdiv+1,c
 11728  003598  0E00               	movlw	0
 11729  00359A  6E1E               	movwf	?___ftdiv+2,c
 11730  00359C  0012               	return	
 11731  00359E                     l5266:
 11732  00359E  0E00               	movlw	0
 11733  0035A0  6E26               	movwf	___ftdiv@f3,c
 11734  0035A2  0E00               	movlw	0
 11735  0035A4  6E27               	movwf	___ftdiv@f3+1,c
 11736  0035A6  0E00               	movlw	0
 11737  0035A8  6E28               	movwf	___ftdiv@f3+2,c
 11738  0035AA  502A               	movf	___ftdiv@sign,w,c
 11739  0035AC  0F89               	addlw	137
 11740  0035AE  5E29               	subwf	___ftdiv@exp,f,c
 11741  0035B0  C01E  F02A         	movff	___ftdiv@f1+2,___ftdiv@sign
 11742  0035B4  5021               	movf	___ftdiv@f2+2,w,c
 11743  0035B6  1A2A               	xorwf	___ftdiv@sign,f,c
 11744  0035B8  0E80               	movlw	128
 11745  0035BA  162A               	andwf	___ftdiv@sign,f,c
 11746  0035BC  8E1D               	bsf	___ftdiv@f1+1,7,c
 11747  0035BE  0EFF               	movlw	255
 11748  0035C0  161C               	andwf	___ftdiv@f1,f,c
 11749  0035C2  0EFF               	movlw	255
 11750  0035C4  161D               	andwf	___ftdiv@f1+1,f,c
 11751  0035C6  0E00               	movlw	0
 11752  0035C8  161E               	andwf	___ftdiv@f1+2,f,c
 11753  0035CA  8E20               	bsf	___ftdiv@f2+1,7,c
 11754  0035CC  0EFF               	movlw	255
 11755  0035CE  161F               	andwf	___ftdiv@f2,f,c
 11756  0035D0  0EFF               	movlw	255
 11757  0035D2  1620               	andwf	___ftdiv@f2+1,f,c
 11758  0035D4  0E00               	movlw	0
 11759  0035D6  1621               	andwf	___ftdiv@f2+2,f,c
 11760  0035D8  0E18               	movlw	24
 11761  0035DA  6E25               	movwf	___ftdiv@cntr,c
 11762  0035DC                     l5286:
 11763  0035DC  90D8               	bcf	status,0,c
 11764  0035DE  3626               	rlcf	___ftdiv@f3,f,c
 11765  0035E0  3627               	rlcf	___ftdiv@f3+1,f,c
 11766  0035E2  3628               	rlcf	___ftdiv@f3+2,f,c
 11767  0035E4  501F               	movf	___ftdiv@f2,w,c
 11768  0035E6  5C1C               	subwf	___ftdiv@f1,w,c
 11769  0035E8  5020               	movf	___ftdiv@f2+1,w,c
 11770  0035EA  581D               	subwfb	___ftdiv@f1+1,w,c
 11771  0035EC  5021               	movf	___ftdiv@f2+2,w,c
 11772  0035EE  581E               	subwfb	___ftdiv@f1+2,w,c
 11773  0035F0  A0D8               	btfss	status,0,c
 11774  0035F2  D007               	goto	l874
 11775  0035F4  501F               	movf	___ftdiv@f2,w,c
 11776  0035F6  5E1C               	subwf	___ftdiv@f1,f,c
 11777  0035F8  5020               	movf	___ftdiv@f2+1,w,c
 11778  0035FA  5A1D               	subwfb	___ftdiv@f1+1,f,c
 11779  0035FC  5021               	movf	___ftdiv@f2+2,w,c
 11780  0035FE  5A1E               	subwfb	___ftdiv@f1+2,f,c
 11781  003600  8026               	bsf	___ftdiv@f3,0,c
 11782  003602                     l874:
 11783  003602  90D8               	bcf	status,0,c
 11784  003604  361C               	rlcf	___ftdiv@f1,f,c
 11785  003606  361D               	rlcf	___ftdiv@f1+1,f,c
 11786  003608  361E               	rlcf	___ftdiv@f1+2,f,c
 11787  00360A  2E25               	decfsz	___ftdiv@cntr,f,c
 11788  00360C  D7E7               	goto	l5286
 11789  00360E  C026  F010         	movff	___ftdiv@f3,___ftpack@arg
 11790  003612  C027  F011         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11791  003616  C028  F012         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11792  00361A  C029  F013         	movff	___ftdiv@exp,___ftpack@exp
 11793  00361E  C02A  F014         	movff	___ftdiv@sign,___ftpack@sign
 11794  003622  EC3D  F01C         	call	___ftpack	;wreg free
 11795  003626  C010  F01C         	movff	?___ftpack,?___ftdiv
 11796  00362A  C011  F01D         	movff	?___ftpack+1,?___ftdiv+1
 11797  00362E  C012  F01E         	movff	?___ftpack+2,?___ftdiv+2
 11798  003632  0012               	return	
 11799  003634                     __end_of___ftdiv:
 11800                           	opt stack 0
 11801                           tblptru	equ	0xFF8
 11802                           tblptrh	equ	0xFF7
 11803                           tblptrl	equ	0xFF6
 11804                           tablat	equ	0xFF5
 11805                           prodh	equ	0xFF4
 11806                           prodl	equ	0xFF3
 11807                           intcon	equ	0xFF2
 11808                           intcon2	equ	0xFF1
 11809                           indf0	equ	0xFEF
 11810                           postinc0	equ	0xFEE
 11811                           fsr0h	equ	0xFEA
 11812                           fsr0l	equ	0xFE9
 11813                           wreg	equ	0xFE8
 11814                           indf1	equ	0xFE7
 11815                           fsr1h	equ	0xFE2
 11816                           fsr1l	equ	0xFE1
 11817                           indf2	equ	0xFDF
 11818                           postinc2	equ	0xFDE
 11819                           postdec2	equ	0xFDD
 11820                           fsr2h	equ	0xFDA
 11821                           fsr2l	equ	0xFD9
 11822                           status	equ	0xFD8
 11823                           
 11824 ;; *************** function ___altoft *****************
 11825 ;; Defined at:
 11826 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\altoft.c"
 11827 ;; Parameters:    Size  Location     Type
 11828 ;;  c               4   23[COMRAM] long 
 11829 ;; Auto vars:     Size  Location     Type
 11830 ;;  sign            1   32[COMRAM] unsigned char 
 11831 ;;  exp             1   31[COMRAM] unsigned char 
 11832 ;; Return value:  Size  Location     Type
 11833 ;;                  3   23[COMRAM] float 
 11834 ;; Registers used:
 11835 ;;		wreg, status,2, status,0, cstack
 11836 ;; Tracked objects:
 11837 ;;		On entry : 0/0
 11838 ;;		On exit  : 0/0
 11839 ;;		Unchanged: 0/0
 11840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11841 ;;      Params:         4       0       0       0       0       0       0       0       0
 11842 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11843 ;;      Temps:          4       0       0       0       0       0       0       0       0
 11844 ;;      Totals:        10       0       0       0       0       0       0       0       0
 11845 ;;Total ram usage:       10 bytes
 11846 ;; Hardware stack levels used:    1
 11847 ;; Hardware stack levels required when called:    3
 11848 ;; This function calls:
 11849 ;;		___ftpack
 11850 ;; This function is called by:
 11851 ;;		_strtod
 11852 ;; This function uses a non-reentrant model
 11853 ;;
 11854                           
 11855                           	psect	text48
 11856  003BB4                     __ptext48:
 11857                           	opt stack 0
 11858  003BB4                     ___altoft:
 11859                           	opt stack 24
 11860                           
 11861                           ;incstack = 0
 11862  003BB4  0E00               	movlw	0
 11863  003BB6  6E21               	movwf	___altoft@sign,c
 11864  003BB8  0E8E               	movlw	142
 11865  003BBA  6E20               	movwf	___altoft@exp,c
 11866  003BBC  AE1B               	btfss	___altoft@c+3,7,c
 11867  003BBE  D011               	goto	l5636
 11868  003BC0  1E1B               	comf	___altoft@c+3,f,c
 11869  003BC2  1E1A               	comf	___altoft@c+2,f,c
 11870  003BC4  1E19               	comf	___altoft@c+1,f,c
 11871  003BC6  6C18               	negf	___altoft@c,c
 11872  003BC8  0E00               	movlw	0
 11873  003BCA  2219               	addwfc	___altoft@c+1,f,c
 11874  003BCC  221A               	addwfc	___altoft@c+2,f,c
 11875  003BCE  221B               	addwfc	___altoft@c+3,f,c
 11876  003BD0  0E01               	movlw	1
 11877  003BD2  6E21               	movwf	___altoft@sign,c
 11878  003BD4  D006               	goto	l5636
 11879  003BD6                     l5634:
 11880  003BD6  90D8               	bcf	status,0,c
 11881  003BD8  321B               	rrcf	___altoft@c+3,f,c
 11882  003BDA  321A               	rrcf	___altoft@c+2,f,c
 11883  003BDC  3219               	rrcf	___altoft@c+1,f,c
 11884  003BDE  3218               	rrcf	___altoft@c,f,c
 11885  003BE0  2A20               	incf	___altoft@exp,f,c
 11886  003BE2                     l5636:
 11887  003BE2  0E00               	movlw	0
 11888  003BE4  1418               	andwf	___altoft@c,w,c
 11889  003BE6  6E1C               	movwf	??___altoft& (0+255),c
 11890  003BE8  0E00               	movlw	0
 11891  003BEA  1419               	andwf	___altoft@c+1,w,c
 11892  003BEC  6E1D               	movwf	(??___altoft+1)& (0+255),c
 11893  003BEE  0E00               	movlw	0
 11894  003BF0  141A               	andwf	___altoft@c+2,w,c
 11895  003BF2  6E1E               	movwf	(??___altoft+2)& (0+255),c
 11896  003BF4  0EFF               	movlw	255
 11897  003BF6  141B               	andwf	___altoft@c+3,w,c
 11898  003BF8  6E1F               	movwf	(??___altoft+3)& (0+255),c
 11899  003BFA  501C               	movf	??___altoft,w,c
 11900  003BFC  101D               	iorwf	??___altoft+1,w,c
 11901  003BFE  101E               	iorwf	??___altoft+2,w,c
 11902  003C00  101F               	iorwf	??___altoft+3,w,c
 11903  003C02  A4D8               	btfss	status,2,c
 11904  003C04  D7E8               	goto	l5634
 11905  003C06  C018  F010         	movff	___altoft@c,___ftpack@arg
 11906  003C0A  C019  F011         	movff	___altoft@c+1,___ftpack@arg+1
 11907  003C0E  C01A  F012         	movff	___altoft@c+2,___ftpack@arg+2
 11908  003C12  C020  F013         	movff	___altoft@exp,___ftpack@exp
 11909  003C16  C021  F014         	movff	___altoft@sign,___ftpack@sign
 11910  003C1A  EC3D  F01C         	call	___ftpack	;wreg free
 11911  003C1E  C010  F018         	movff	?___ftpack,?___altoft
 11912  003C22  C011  F019         	movff	?___ftpack+1,?___altoft+1
 11913  003C26  C012  F01A         	movff	?___ftpack+2,?___altoft+2
 11914  003C2A  0012               	return	
 11915  003C2C                     __end_of___altoft:
 11916                           	opt stack 0
 11917                           tblptru	equ	0xFF8
 11918                           tblptrh	equ	0xFF7
 11919                           tblptrl	equ	0xFF6
 11920                           tablat	equ	0xFF5
 11921                           prodh	equ	0xFF4
 11922                           prodl	equ	0xFF3
 11923                           intcon	equ	0xFF2
 11924                           intcon2	equ	0xFF1
 11925                           indf0	equ	0xFEF
 11926                           postinc0	equ	0xFEE
 11927                           fsr0h	equ	0xFEA
 11928                           fsr0l	equ	0xFE9
 11929                           wreg	equ	0xFE8
 11930                           indf1	equ	0xFE7
 11931                           fsr1h	equ	0xFE2
 11932                           fsr1l	equ	0xFE1
 11933                           indf2	equ	0xFDF
 11934                           postinc2	equ	0xFDE
 11935                           postdec2	equ	0xFDD
 11936                           fsr2h	equ	0xFDA
 11937                           fsr2l	equ	0xFD9
 11938                           status	equ	0xFD8
 11939                           
 11940 ;; *************** function ___ftpack *****************
 11941 ;; Defined at:
 11942 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\float.c"
 11943 ;; Parameters:    Size  Location     Type
 11944 ;;  arg             3   15[COMRAM] unsigned um
 11945 ;;  exp             1   18[COMRAM] unsigned char 
 11946 ;;  sign            1   19[COMRAM] unsigned char 
 11947 ;; Auto vars:     Size  Location     Type
 11948 ;;		None
 11949 ;; Return value:  Size  Location     Type
 11950 ;;                  3   15[COMRAM] float 
 11951 ;; Registers used:
 11952 ;;		wreg, status,2, status,0
 11953 ;; Tracked objects:
 11954 ;;		On entry : 0/0
 11955 ;;		On exit  : 0/0
 11956 ;;		Unchanged: 0/0
 11957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11958 ;;      Params:         5       0       0       0       0       0       0       0       0
 11959 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11960 ;;      Temps:          3       0       0       0       0       0       0       0       0
 11961 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11962 ;;Total ram usage:        8 bytes
 11963 ;; Hardware stack levels used:    1
 11964 ;; Hardware stack levels required when called:    2
 11965 ;; This function calls:
 11966 ;;		Nothing
 11967 ;; This function is called by:
 11968 ;;		___altoft
 11969 ;;		___awtoft
 11970 ;;		___ftadd
 11971 ;;		___ftdiv
 11972 ;;		___ftmul
 11973 ;;		___lltoft
 11974 ;;		___lwtoft
 11975 ;; This function uses a non-reentrant model
 11976 ;;
 11977                           
 11978                           	psect	text49
 11979  00387A                     __ptext49:
 11980                           	opt stack 0
 11981  00387A                     ___ftpack:
 11982                           	opt stack 24
 11983                           
 11984                           ;incstack = 0
 11985  00387A  5013               	movf	___ftpack@exp,w,c
 11986  00387C  B4D8               	btfsc	status,2,c
 11987  00387E  D005               	goto	l5140
 11988  003880  5010               	movf	___ftpack@arg,w,c
 11989  003882  1011               	iorwf	___ftpack@arg+1,w,c
 11990  003884  1012               	iorwf	___ftpack@arg+2,w,c
 11991  003886  A4D8               	btfss	status,2,c
 11992  003888  D00C               	goto	l5146
 11993  00388A                     l5140:
 11994  00388A  0E00               	movlw	0
 11995  00388C  6E10               	movwf	?___ftpack,c
 11996  00388E  0E00               	movlw	0
 11997  003890  6E11               	movwf	?___ftpack+1,c
 11998  003892  0E00               	movlw	0
 11999  003894  6E12               	movwf	?___ftpack+2,c
 12000  003896  0012               	return	
 12001  003898                     l5144:
 12002  003898  2A13               	incf	___ftpack@exp,f,c
 12003  00389A  90D8               	bcf	status,0,c
 12004  00389C  3212               	rrcf	___ftpack@arg+2,f,c
 12005  00389E  3211               	rrcf	___ftpack@arg+1,f,c
 12006  0038A0  3210               	rrcf	___ftpack@arg,f,c
 12007  0038A2                     l5146:
 12008  0038A2  0E00               	movlw	0
 12009  0038A4  1410               	andwf	___ftpack@arg,w,c
 12010  0038A6  6E15               	movwf	??___ftpack& (0+255),c
 12011  0038A8  0E00               	movlw	0
 12012  0038AA  1411               	andwf	___ftpack@arg+1,w,c
 12013  0038AC  6E16               	movwf	(??___ftpack+1)& (0+255),c
 12014  0038AE  0EFE               	movlw	254
 12015  0038B0  1412               	andwf	___ftpack@arg+2,w,c
 12016  0038B2  6E17               	movwf	(??___ftpack+2)& (0+255),c
 12017  0038B4  5015               	movf	??___ftpack,w,c
 12018  0038B6  1016               	iorwf	??___ftpack+1,w,c
 12019  0038B8  1017               	iorwf	??___ftpack+2,w,c
 12020  0038BA  B4D8               	btfsc	status,2,c
 12021  0038BC  D00C               	goto	l5152
 12022  0038BE  D7EC               	goto	l5144
 12023  0038C0                     l5148:
 12024  0038C0  2A13               	incf	___ftpack@exp,f,c
 12025  0038C2  0E01               	movlw	1
 12026  0038C4  2610               	addwf	___ftpack@arg,f,c
 12027  0038C6  0E00               	movlw	0
 12028  0038C8  2211               	addwfc	___ftpack@arg+1,f,c
 12029  0038CA  0E00               	movlw	0
 12030  0038CC  2212               	addwfc	___ftpack@arg+2,f,c
 12031  0038CE  90D8               	bcf	status,0,c
 12032  0038D0  3212               	rrcf	___ftpack@arg+2,f,c
 12033  0038D2  3211               	rrcf	___ftpack@arg+1,f,c
 12034  0038D4  3210               	rrcf	___ftpack@arg,f,c
 12035  0038D6                     l5152:
 12036  0038D6  0E00               	movlw	0
 12037  0038D8  1410               	andwf	___ftpack@arg,w,c
 12038  0038DA  6E15               	movwf	??___ftpack& (0+255),c
 12039  0038DC  0E00               	movlw	0
 12040  0038DE  1411               	andwf	___ftpack@arg+1,w,c
 12041  0038E0  6E16               	movwf	(??___ftpack+1)& (0+255),c
 12042  0038E2  0EFF               	movlw	255
 12043  0038E4  1412               	andwf	___ftpack@arg+2,w,c
 12044  0038E6  6E17               	movwf	(??___ftpack+2)& (0+255),c
 12045  0038E8  5015               	movf	??___ftpack,w,c
 12046  0038EA  1016               	iorwf	??___ftpack+1,w,c
 12047  0038EC  1017               	iorwf	??___ftpack+2,w,c
 12048  0038EE  B4D8               	btfsc	status,2,c
 12049  0038F0  D006               	goto	l5156
 12050  0038F2  D7E6               	goto	l5148
 12051  0038F4                     l5154:
 12052  0038F4  0613               	decf	___ftpack@exp,f,c
 12053  0038F6  90D8               	bcf	status,0,c
 12054  0038F8  3610               	rlcf	___ftpack@arg,f,c
 12055  0038FA  3611               	rlcf	___ftpack@arg+1,f,c
 12056  0038FC  3612               	rlcf	___ftpack@arg+2,f,c
 12057  0038FE                     l5156:
 12058  0038FE  BE11               	btfsc	___ftpack@arg+1,7,c
 12059  003900  D003               	goto	l816
 12060  003902  0E02               	movlw	2
 12061  003904  6013               	cpfslt	___ftpack@exp,c
 12062  003906  D7F6               	goto	l5154
 12063  003908                     l816:
 12064  003908  A013               	btfss	___ftpack@exp,0,c
 12065  00390A  9E11               	bcf	___ftpack@arg+1,7,c
 12066  00390C  90D8               	bcf	status,0,c
 12067  00390E  3213               	rrcf	___ftpack@exp,f,c
 12068  003910  5013               	movf	___ftpack@exp,w,c
 12069  003912  1212               	iorwf	___ftpack@arg+2,f,c
 12070  003914  5014               	movf	___ftpack@sign,w,c
 12071  003916  A4D8               	btfss	status,2,c
 12072  003918  8E12               	bsf	___ftpack@arg+2,7,c
 12073  00391A  C010  F010         	movff	___ftpack@arg,?___ftpack
 12074  00391E  C011  F011         	movff	___ftpack@arg+1,?___ftpack+1
 12075  003922  C012  F012         	movff	___ftpack@arg+2,?___ftpack+2
 12076  003926  0012               	return	
 12077  003928                     __end_of___ftpack:
 12078                           	opt stack 0
 12079                           tblptru	equ	0xFF8
 12080                           tblptrh	equ	0xFF7
 12081                           tblptrl	equ	0xFF6
 12082                           tablat	equ	0xFF5
 12083                           prodh	equ	0xFF4
 12084                           prodl	equ	0xFF3
 12085                           intcon	equ	0xFF2
 12086                           intcon2	equ	0xFF1
 12087                           indf0	equ	0xFEF
 12088                           postinc0	equ	0xFEE
 12089                           fsr0h	equ	0xFEA
 12090                           fsr0l	equ	0xFE9
 12091                           wreg	equ	0xFE8
 12092                           indf1	equ	0xFE7
 12093                           fsr1h	equ	0xFE2
 12094                           fsr1l	equ	0xFE1
 12095                           indf2	equ	0xFDF
 12096                           postinc2	equ	0xFDE
 12097                           postdec2	equ	0xFDD
 12098                           fsr2h	equ	0xFDA
 12099                           fsr2l	equ	0xFD9
 12100                           status	equ	0xFD8
 12101                           
 12102 ;; *************** function _blinkInitLed *****************
 12103 ;; Defined at:
 12104 ;;		line 135 in file "system.c"
 12105 ;; Parameters:    Size  Location     Type
 12106 ;;		None
 12107 ;; Auto vars:     Size  Location     Type
 12108 ;;  i               1   23[COMRAM] unsigned char 
 12109 ;; Return value:  Size  Location     Type
 12110 ;;                  1    wreg      void 
 12111 ;; Registers used:
 12112 ;;		wreg, status,2, status,0, cstack
 12113 ;; Tracked objects:
 12114 ;;		On entry : 0/0
 12115 ;;		On exit  : 0/0
 12116 ;;		Unchanged: 0/0
 12117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12118 ;;      Params:         0       0       0       0       0       0       0       0       0
 12119 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12120 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12121 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12122 ;;Total ram usage:        1 bytes
 12123 ;; Hardware stack levels used:    1
 12124 ;; Hardware stack levels required when called:    3
 12125 ;; This function calls:
 12126 ;;		_delay_ms
 12127 ;; This function is called by:
 12128 ;;		_main
 12129 ;; This function uses a non-reentrant model
 12130 ;;
 12131                           
 12132                           	psect	text50
 12133  0041C6                     __ptext50:
 12134                           	opt stack 0
 12135  0041C6                     _blinkInitLed:
 12136                           	opt stack 27
 12137                           
 12138                           ;system.c: 137: char i;
 12139                           ;system.c: 139: for (i=0; i<5; ++i)
 12140                           
 12141                           ;incstack = 0
 12142  0041C6  0E00               	movlw	0
 12143  0041C8  6E18               	movwf	blinkInitLed@i,c
 12144  0041CA                     l6390:
 12145  0041CA  0E04               	movlw	4
 12146  0041CC  6418               	cpfsgt	blinkInitLed@i,c
 12147  0041CE  D001               	goto	l134
 12148  0041D0  0012               	return	
 12149  0041D2                     l134:
 12150                           
 12151                           ;system.c: 141: {
 12152                           ;system.c: 142: LATAbits.LATA0 = 0;
 12153  0041D2  9089               	bcf	3977,0,c	;volatile
 12154                           
 12155                           ;system.c: 143: delay_ms(150);
 12156  0041D4  0E00               	movlw	0
 12157  0041D6  6E11               	movwf	delay_ms@ms+1,c
 12158  0041D8  0E96               	movlw	150
 12159  0041DA  6E10               	movwf	delay_ms@ms,c
 12160  0041DC  ECE5  F01F         	call	_delay_ms	;wreg free
 12161                           
 12162                           ;system.c: 144: LATAbits.LATA0 = 1;
 12163  0041E0  8089               	bsf	3977,0,c	;volatile
 12164                           
 12165                           ;system.c: 145: delay_ms(150);
 12166  0041E2  0E00               	movlw	0
 12167  0041E4  6E11               	movwf	delay_ms@ms+1,c
 12168  0041E6  0E96               	movlw	150
 12169  0041E8  6E10               	movwf	delay_ms@ms,c
 12170  0041EA  ECE5  F01F         	call	_delay_ms	;wreg free
 12171  0041EE  2A18               	incf	blinkInitLed@i,f,c
 12172  0041F0  D7EC               	goto	l6390
 12173  0041F2                     __end_of_blinkInitLed:
 12174                           	opt stack 0
 12175                           tblptru	equ	0xFF8
 12176                           tblptrh	equ	0xFF7
 12177                           tblptrl	equ	0xFF6
 12178                           tablat	equ	0xFF5
 12179                           prodh	equ	0xFF4
 12180                           prodl	equ	0xFF3
 12181                           intcon	equ	0xFF2
 12182                           intcon2	equ	0xFF1
 12183                           indf0	equ	0xFEF
 12184                           postinc0	equ	0xFEE
 12185                           fsr0h	equ	0xFEA
 12186                           fsr0l	equ	0xFE9
 12187                           wreg	equ	0xFE8
 12188                           indf1	equ	0xFE7
 12189                           fsr1h	equ	0xFE2
 12190                           fsr1l	equ	0xFE1
 12191                           indf2	equ	0xFDF
 12192                           postinc2	equ	0xFDE
 12193                           postdec2	equ	0xFDD
 12194                           fsr2h	equ	0xFDA
 12195                           fsr2l	equ	0xFD9
 12196                           status	equ	0xFD8
 12197                           
 12198 ;; *************** function _delay_ms *****************
 12199 ;; Defined at:
 12200 ;;		line 119 in file "system.c"
 12201 ;; Parameters:    Size  Location     Type
 12202 ;;  ms              2   15[COMRAM] unsigned short 
 12203 ;; Auto vars:     Size  Location     Type
 12204 ;;  us              2   21[COMRAM] unsigned int 
 12205 ;;  current_time    2   19[COMRAM] unsigned int 
 12206 ;; Return value:  Size  Location     Type
 12207 ;;                  1    wreg      void 
 12208 ;; Registers used:
 12209 ;;		wreg, status,2, status,0
 12210 ;; Tracked objects:
 12211 ;;		On entry : 0/0
 12212 ;;		On exit  : 0/0
 12213 ;;		Unchanged: 0/0
 12214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12215 ;;      Params:         2       0       0       0       0       0       0       0       0
 12216 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12217 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12218 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12219 ;;Total ram usage:        8 bytes
 12220 ;; Hardware stack levels used:    1
 12221 ;; Hardware stack levels required when called:    2
 12222 ;; This function calls:
 12223 ;;		Nothing
 12224 ;; This function is called by:
 12225 ;;		_blinkInitLed
 12226 ;;		_execGcode
 12227 ;;		_linearMove1Axis
 12228 ;;		_linearMove2Axis
 12229 ;;		_moveToSwitch
 12230 ;; This function uses a non-reentrant model
 12231 ;;
 12232                           
 12233                           	psect	text51
 12234  003FCA                     __ptext51:
 12235                           	opt stack 0
 12236  003FCA                     _delay_ms:
 12237                           	opt stack 24
 12238                           
 12239                           ;system.c: 122: unsigned int current_time = SYSTEM_TIME;
 12240                           
 12241                           ;incstack = 0
 12242  003FCA  C049  F014         	movff	_SYSTEM_TIME,delay_ms@current_time
 12243  003FCE  C04A  F015         	movff	_SYSTEM_TIME+1,delay_ms@current_time+1
 12244                           
 12245                           ;system.c: 123: unsigned int us = (unsigned int)ms << 4;
 12246  003FD2  C010  F012         	movff	delay_ms@ms,??_delay_ms
 12247  003FD6  C011  F013         	movff	delay_ms@ms+1,??_delay_ms+1
 12248  003FDA  3A12               	swapf	??_delay_ms,f,c
 12249  003FDC  3A13               	swapf	??_delay_ms+1,f,c
 12250  003FDE  0EF0               	movlw	240
 12251  003FE0  1613               	andwf	??_delay_ms+1,f,c
 12252  003FE2  5012               	movf	??_delay_ms,w,c
 12253  003FE4  0B0F               	andlw	15
 12254  003FE6  1213               	iorwf	??_delay_ms+1,f,c
 12255  003FE8  0EF0               	movlw	240
 12256  003FEA  1612               	andwf	??_delay_ms,f,c
 12257  003FEC  C012  F016         	movff	??_delay_ms,delay_ms@us
 12258  003FF0  C013  F017         	movff	??_delay_ms+1,delay_ms@us+1
 12259  003FF4                     l5182:
 12260  003FF4  C014  F012         	movff	delay_ms@current_time,??_delay_ms
 12261  003FF8  C015  F013         	movff	delay_ms@current_time+1,??_delay_ms+1
 12262  003FFC  1E12               	comf	??_delay_ms,f,c
 12263  003FFE  1E13               	comf	??_delay_ms+1,f,c
 12264  004000  4A12               	infsnz	??_delay_ms,f,c
 12265  004002  2A13               	incf	??_delay_ms+1,f,c
 12266  004004  5049               	movf	_SYSTEM_TIME,w,c
 12267  004006  2612               	addwf	??_delay_ms,f,c
 12268  004008  504A               	movf	_SYSTEM_TIME+1,w,c
 12269  00400A  2213               	addwfc	??_delay_ms+1,f,c
 12270  00400C  5016               	movf	delay_ms@us,w,c
 12271  00400E  5C12               	subwf	??_delay_ms,w,c
 12272  004010  5017               	movf	delay_ms@us+1,w,c
 12273  004012  5813               	subwfb	??_delay_ms+1,w,c
 12274  004014  B0D8               	btfsc	status,0,c
 12275  004016  0012               	return	
 12276  004018  D7ED               	goto	l5182
 12277  00401A                     __end_of_delay_ms:
 12278                           	opt stack 0
 12279                           tblptru	equ	0xFF8
 12280                           tblptrh	equ	0xFF7
 12281                           tblptrl	equ	0xFF6
 12282                           tablat	equ	0xFF5
 12283                           prodh	equ	0xFF4
 12284                           prodl	equ	0xFF3
 12285                           intcon	equ	0xFF2
 12286                           intcon2	equ	0xFF1
 12287                           indf0	equ	0xFEF
 12288                           postinc0	equ	0xFEE
 12289                           fsr0h	equ	0xFEA
 12290                           fsr0l	equ	0xFE9
 12291                           wreg	equ	0xFE8
 12292                           indf1	equ	0xFE7
 12293                           fsr1h	equ	0xFE2
 12294                           fsr1l	equ	0xFE1
 12295                           indf2	equ	0xFDF
 12296                           postinc2	equ	0xFDE
 12297                           postdec2	equ	0xFDD
 12298                           fsr2h	equ	0xFDA
 12299                           fsr2l	equ	0xFD9
 12300                           status	equ	0xFD8
 12301                           
 12302 ;; *************** function _ISR *****************
 12303 ;; Defined at:
 12304 ;;		line 38 in file "interrupt.c"
 12305 ;; Parameters:    Size  Location     Type
 12306 ;;		None
 12307 ;; Auto vars:     Size  Location     Type
 12308 ;;		None
 12309 ;; Return value:  Size  Location     Type
 12310 ;;                  1    wreg      void 
 12311 ;; Registers used:
 12312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12313 ;; Tracked objects:
 12314 ;;		On entry : 0/0
 12315 ;;		On exit  : 0/0
 12316 ;;		Unchanged: 0/0
 12317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12318 ;;      Params:         0       0       0       0       0       0       0       0       0
 12319 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12320 ;;      Temps:         14       0       0       0       0       0       0       0       0
 12321 ;;      Totals:        14       0       0       0       0       0       0       0       0
 12322 ;;Total ram usage:       14 bytes
 12323 ;; Hardware stack levels used:    1
 12324 ;; Hardware stack levels required when called:    1
 12325 ;; This function calls:
 12326 ;;		_TMR0_interrupt
 12327 ;;		_UART_interrupt
 12328 ;; This function is called by:
 12329 ;;		Interrupt level 2
 12330 ;; This function uses a non-reentrant model
 12331 ;;
 12332                           
 12333                           	psect	intcode
 12334  000008                     __pintcode:
 12335                           	opt stack 0
 12336  000008                     _ISR:
 12337                           	opt stack 23
 12338                           
 12339                           ;incstack = 0
 12340  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12341  00000A  CFFA F002          	movff	pclath,??_ISR
 12342  00000E  CFFB F003          	movff	pclatu,??_ISR+1
 12343  000012  ED9D  F01D         	call	int_func,f	;refresh shadow registers
 12344                           pclatu	equ	0xFFB
 12345                           pclath	equ	0xFFA
 12346                           tblptru	equ	0xFF8
 12347                           tblptrh	equ	0xFF7
 12348                           tblptrl	equ	0xFF6
 12349                           tablat	equ	0xFF5
 12350                           prodh	equ	0xFF4
 12351                           prodl	equ	0xFF3
 12352                           intcon	equ	0xFF2
 12353                           intcon2	equ	0xFF1
 12354                           indf0	equ	0xFEF
 12355                           postinc0	equ	0xFEE
 12356                           fsr0h	equ	0xFEA
 12357                           fsr0l	equ	0xFE9
 12358                           wreg	equ	0xFE8
 12359                           indf1	equ	0xFE7
 12360                           fsr1h	equ	0xFE2
 12361                           fsr1l	equ	0xFE1
 12362                           indf2	equ	0xFDF
 12363                           postinc2	equ	0xFDE
 12364                           postdec2	equ	0xFDD
 12365                           fsr2h	equ	0xFDA
 12366                           fsr2l	equ	0xFD9
 12367                           status	equ	0xFD8
 12368                           
 12369                           	psect	intcode_body
 12370  003B3A                     __pintcode_body:
 12371                           	opt stack 23
 12372  003B3A                     int_func:
 12373                           	opt stack 23
 12374  003B3A  0006               	pop		; remove dummy address from shadow register refresh
 12375  003B3C  CFE9 F004          	movff	fsr0l,??_ISR+2
 12376  003B40  CFEA F005          	movff	fsr0h,??_ISR+3
 12377  003B44  CFE1 F006          	movff	fsr1l,??_ISR+4
 12378  003B48  CFE2 F007          	movff	fsr1h,??_ISR+5
 12379  003B4C  CFD9 F008          	movff	fsr2l,??_ISR+6
 12380  003B50  CFDA F009          	movff	fsr2h,??_ISR+7
 12381  003B54  CFF3 F00A          	movff	prodl,??_ISR+8
 12382  003B58  CFF4 F00B          	movff	prodh,??_ISR+9
 12383  003B5C  CFF6 F00C          	movff	tblptrl,??_ISR+10
 12384  003B60  CFF7 F00D          	movff	tblptrh,??_ISR+11
 12385  003B64  CFF8 F00E          	movff	tblptru,??_ISR+12
 12386  003B68  CFF5 F00F          	movff	tablat,??_ISR+13
 12387                           
 12388                           ;interrupt.c: 43: if (RCIF)
 12389  003B6C  BA9E               	btfsc	3998,5,c	;volatile
 12390                           
 12391                           ;interrupt.c: 44: {
 12392                           ;interrupt.c: 45: UART_interrupt();
 12393  003B6E  EC58  F020         	call	_UART_interrupt	;wreg free
 12394                           
 12395                           ;interrupt.c: 46: }
 12396                           ;interrupt.c: 48: if (TMR0IF)
 12397  003B72  B4F2               	btfsc	intcon,2,c	;volatile
 12398                           
 12399                           ;interrupt.c: 49: {
 12400                           ;interrupt.c: 50: TMR0_interrupt();
 12401  003B74  EC7B  F021         	call	_TMR0_interrupt	;wreg free
 12402  003B78  C00F  FFF5         	movff	??_ISR+13,tablat
 12403  003B7C  C00E  FFF8         	movff	??_ISR+12,tblptru
 12404  003B80  C00D  FFF7         	movff	??_ISR+11,tblptrh
 12405  003B84  C00C  FFF6         	movff	??_ISR+10,tblptrl
 12406  003B88  C00B  FFF4         	movff	??_ISR+9,prodh
 12407  003B8C  C00A  FFF3         	movff	??_ISR+8,prodl
 12408  003B90  C009  FFDA         	movff	??_ISR+7,fsr2h
 12409  003B94  C008  FFD9         	movff	??_ISR+6,fsr2l
 12410  003B98  C007  FFE2         	movff	??_ISR+5,fsr1h
 12411  003B9C  C006  FFE1         	movff	??_ISR+4,fsr1l
 12412  003BA0  C005  FFEA         	movff	??_ISR+3,fsr0h
 12413  003BA4  C004  FFE9         	movff	??_ISR+2,fsr0l
 12414  003BA8  C003  FFFB         	movff	??_ISR+1,pclatu
 12415  003BAC  C002  FFFA         	movff	??_ISR,pclath
 12416  003BB0  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12417  003BB2  0011               	retfie		f
 12418  003BB4                     __end_of_ISR:
 12419                           	opt stack 0
 12420                           pclatu	equ	0xFFB
 12421                           pclath	equ	0xFFA
 12422                           tblptru	equ	0xFF8
 12423                           tblptrh	equ	0xFF7
 12424                           tblptrl	equ	0xFF6
 12425                           tablat	equ	0xFF5
 12426                           prodh	equ	0xFF4
 12427                           prodl	equ	0xFF3
 12428                           intcon	equ	0xFF2
 12429                           intcon2	equ	0xFF1
 12430                           indf0	equ	0xFEF
 12431                           postinc0	equ	0xFEE
 12432                           fsr0h	equ	0xFEA
 12433                           fsr0l	equ	0xFE9
 12434                           wreg	equ	0xFE8
 12435                           indf1	equ	0xFE7
 12436                           fsr1h	equ	0xFE2
 12437                           fsr1l	equ	0xFE1
 12438                           indf2	equ	0xFDF
 12439                           postinc2	equ	0xFDE
 12440                           postdec2	equ	0xFDD
 12441                           fsr2h	equ	0xFDA
 12442                           fsr2l	equ	0xFD9
 12443                           status	equ	0xFD8
 12444                           
 12445 ;; *************** function _UART_interrupt *****************
 12446 ;; Defined at:
 12447 ;;		line 68 in file "interrupt.c"
 12448 ;; Parameters:    Size  Location     Type
 12449 ;;		None
 12450 ;; Auto vars:     Size  Location     Type
 12451 ;;  byte            1    0[COMRAM] unsigned char 
 12452 ;; Return value:  Size  Location     Type
 12453 ;;                  1    wreg      void 
 12454 ;; Registers used:
 12455 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12456 ;; Tracked objects:
 12457 ;;		On entry : 0/0
 12458 ;;		On exit  : 0/0
 12459 ;;		Unchanged: 0/0
 12460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12461 ;;      Params:         0       0       0       0       0       0       0       0       0
 12462 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12463 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12464 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12465 ;;Total ram usage:        1 bytes
 12466 ;; Hardware stack levels used:    1
 12467 ;; This function calls:
 12468 ;;		Nothing
 12469 ;; This function is called by:
 12470 ;;		_ISR
 12471 ;; This function uses a non-reentrant model
 12472 ;;
 12473                           
 12474                           	psect	text53
 12475  0040B0                     __ptext53:
 12476                           	opt stack 0
 12477  0040B0                     _UART_interrupt:
 12478                           	opt stack 23
 12479                           
 12480                           ;interrupt.c: 70: char byte = RCREG;
 12481                           
 12482                           ;incstack = 0
 12483  0040B0  CFAE F001          	movff	4014,UART_interrupt@byte	;volatile
 12484                           
 12485                           ;interrupt.c: 72: if (GCODE_PENDING == 1) {return;}
 12486  0040B4  044D               	decf	_GCODE_PENDING,w,c
 12487  0040B6  B4D8               	btfsc	status,2,c
 12488  0040B8  0012               	return	
 12489                           
 12490                           ;interrupt.c: 74: if (byte == '\n')
 12491  0040BA  0E0A               	movlw	10
 12492  0040BC  1801               	xorwf	UART_interrupt@byte,w,c
 12493  0040BE  A4D8               	btfss	status,2,c
 12494  0040C0  D00D               	goto	i2l5096
 12495                           
 12496                           ;interrupt.c: 75: {
 12497                           ;interrupt.c: 76: *ctr = '\0';
 12498  0040C2  C04E  FFD9         	movff	_ctr,fsr2l
 12499  0040C6  C04F  FFDA         	movff	_ctr+1,fsr2h
 12500  0040CA  0E00               	movlw	0
 12501  0040CC  6EDF               	movwf	indf2,c
 12502                           
 12503                           ;interrupt.c: 77: ctr = uart_str;
 12504  0040CE  0E00               	movlw	low _uart_str
 12505  0040D0  6E4E               	movwf	_ctr,c
 12506  0040D2  0E01               	movlw	high _uart_str
 12507  0040D4  6E4F               	movwf	_ctr+1,c
 12508                           
 12509                           ;interrupt.c: 78: GCODE_PENDING = 1;
 12510  0040D6  0E01               	movlw	1
 12511  0040D8  6E4D               	movwf	_GCODE_PENDING,c
 12512                           
 12513                           ;interrupt.c: 80: }
 12514  0040DA  0012               	return	
 12515  0040DC                     i2l5096:
 12516                           
 12517                           ;interrupt.c: 81: else
 12518                           ;interrupt.c: 82: {
 12519                           ;interrupt.c: 83: *ctr++ = byte;
 12520  0040DC  C04E  FFD9         	movff	_ctr,fsr2l
 12521  0040E0  C04F  FFDA         	movff	_ctr+1,fsr2h
 12522  0040E4  C001  FFDF         	movff	UART_interrupt@byte,indf2
 12523  0040E8  4A4E               	infsnz	_ctr,f,c
 12524  0040EA  2A4F               	incf	_ctr+1,f,c
 12525  0040EC  0012               	return	
 12526  0040EE                     __end_of_UART_interrupt:
 12527                           	opt stack 0
 12528                           pclatu	equ	0xFFB
 12529                           pclath	equ	0xFFA
 12530                           tblptru	equ	0xFF8
 12531                           tblptrh	equ	0xFF7
 12532                           tblptrl	equ	0xFF6
 12533                           tablat	equ	0xFF5
 12534                           prodh	equ	0xFF4
 12535                           prodl	equ	0xFF3
 12536                           intcon	equ	0xFF2
 12537                           intcon2	equ	0xFF1
 12538                           indf0	equ	0xFEF
 12539                           postinc0	equ	0xFEE
 12540                           fsr0h	equ	0xFEA
 12541                           fsr0l	equ	0xFE9
 12542                           wreg	equ	0xFE8
 12543                           indf1	equ	0xFE7
 12544                           fsr1h	equ	0xFE2
 12545                           fsr1l	equ	0xFE1
 12546                           indf2	equ	0xFDF
 12547                           postinc2	equ	0xFDE
 12548                           postdec2	equ	0xFDD
 12549                           fsr2h	equ	0xFDA
 12550                           fsr2l	equ	0xFD9
 12551                           status	equ	0xFD8
 12552                           
 12553 ;; *************** function _TMR0_interrupt *****************
 12554 ;; Defined at:
 12555 ;;		line 97 in file "interrupt.c"
 12556 ;; Parameters:    Size  Location     Type
 12557 ;;		None
 12558 ;; Auto vars:     Size  Location     Type
 12559 ;;		None
 12560 ;; Return value:  Size  Location     Type
 12561 ;;                  1    wreg      void 
 12562 ;; Registers used:
 12563 ;;		wreg, status,2, status,0
 12564 ;; Tracked objects:
 12565 ;;		On entry : 0/0
 12566 ;;		On exit  : 0/0
 12567 ;;		Unchanged: 0/0
 12568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12569 ;;      Params:         0       0       0       0       0       0       0       0       0
 12570 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12571 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12572 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12573 ;;Total ram usage:        0 bytes
 12574 ;; Hardware stack levels used:    1
 12575 ;; This function calls:
 12576 ;;		Nothing
 12577 ;; This function is called by:
 12578 ;;		_ISR
 12579 ;; This function uses a non-reentrant model
 12580 ;;
 12581                           
 12582                           	psect	text54
 12583  0042F6                     __ptext54:
 12584                           	opt stack 0
 12585  0042F6                     _TMR0_interrupt:
 12586                           	opt stack 23
 12587                           
 12588                           ;interrupt.c: 99: SYSTEM_TIME++;
 12589                           
 12590                           ;incstack = 0
 12591  0042F6  4A49               	infsnz	_SYSTEM_TIME,f,c
 12592  0042F8  2A4A               	incf	_SYSTEM_TIME+1,f,c
 12593                           
 12594                           ;interrupt.c: 103: TMR0L = 0xBC;
 12595  0042FA  0EBC               	movlw	188
 12596  0042FC  6ED6               	movwf	4054,c	;volatile
 12597                           
 12598                           ;interrupt.c: 107: TMR0IF = 0;
 12599  0042FE  94F2               	bcf	intcon,2,c	;volatile
 12600  004300  0012               	return		;funcret
 12601  004302                     __end_of_TMR0_interrupt:
 12602                           	opt stack 0
 12603                           pclatu	equ	0xFFB
 12604                           pclath	equ	0xFFA
 12605                           tblptru	equ	0xFF8
 12606                           tblptrh	equ	0xFF7
 12607                           tblptrl	equ	0xFF6
 12608                           tablat	equ	0xFF5
 12609                           prodh	equ	0xFF4
 12610                           prodl	equ	0xFF3
 12611                           intcon	equ	0xFF2
 12612                           intcon2	equ	0xFF1
 12613                           indf0	equ	0xFEF
 12614                           postinc0	equ	0xFEE
 12615                           fsr0h	equ	0xFEA
 12616                           fsr0l	equ	0xFE9
 12617                           wreg	equ	0xFE8
 12618                           indf1	equ	0xFE7
 12619                           fsr1h	equ	0xFE2
 12620                           fsr1l	equ	0xFE1
 12621                           indf2	equ	0xFDF
 12622                           postinc2	equ	0xFDE
 12623                           postdec2	equ	0xFDD
 12624                           fsr2h	equ	0xFDA
 12625                           fsr2l	equ	0xFD9
 12626                           status	equ	0xFD8
 12627                           pclatu	equ	0xFFB
 12628                           pclath	equ	0xFFA
 12629                           tblptru	equ	0xFF8
 12630                           tblptrh	equ	0xFF7
 12631                           tblptrl	equ	0xFF6
 12632                           tablat	equ	0xFF5
 12633                           prodh	equ	0xFF4
 12634                           prodl	equ	0xFF3
 12635                           intcon	equ	0xFF2
 12636                           intcon2	equ	0xFF1
 12637                           indf0	equ	0xFEF
 12638                           postinc0	equ	0xFEE
 12639                           fsr0h	equ	0xFEA
 12640                           fsr0l	equ	0xFE9
 12641                           wreg	equ	0xFE8
 12642                           indf1	equ	0xFE7
 12643                           fsr1h	equ	0xFE2
 12644                           fsr1l	equ	0xFE1
 12645                           indf2	equ	0xFDF
 12646                           postinc2	equ	0xFDE
 12647                           postdec2	equ	0xFDD
 12648                           fsr2h	equ	0xFDA
 12649                           fsr2l	equ	0xFD9
 12650                           status	equ	0xFD8
 12651                           
 12652                           	psect	rparam
 12653  0000                     pclatu	equ	0xFFB
 12654                           pclath	equ	0xFFA
 12655                           tblptru	equ	0xFF8
 12656                           tblptrh	equ	0xFF7
 12657                           tblptrl	equ	0xFF6
 12658                           tablat	equ	0xFF5
 12659                           prodh	equ	0xFF4
 12660                           prodl	equ	0xFF3
 12661                           intcon	equ	0xFF2
 12662                           intcon2	equ	0xFF1
 12663                           indf0	equ	0xFEF
 12664                           postinc0	equ	0xFEE
 12665                           fsr0h	equ	0xFEA
 12666                           fsr0l	equ	0xFE9
 12667                           wreg	equ	0xFE8
 12668                           indf1	equ	0xFE7
 12669                           fsr1h	equ	0xFE2
 12670                           fsr1l	equ	0xFE1
 12671                           indf2	equ	0xFDF
 12672                           postinc2	equ	0xFDE
 12673                           postdec2	equ	0xFDD
 12674                           fsr2h	equ	0xFDA
 12675                           fsr2l	equ	0xFD9
 12676                           status	equ	0xFD8
 12677                           
 12678                           	psect	temp
 12679  000050                     btemp:
 12680                           	opt stack 0
 12681  000050                     	ds	1
 12682  0000                     int$flags	set	btemp
 12683                           pclatu	equ	0xFFB
 12684                           pclath	equ	0xFFA
 12685                           tblptru	equ	0xFF8
 12686                           tblptrh	equ	0xFF7
 12687                           tblptrl	equ	0xFF6
 12688                           tablat	equ	0xFF5
 12689                           prodh	equ	0xFF4
 12690                           prodl	equ	0xFF3
 12691                           intcon	equ	0xFF2
 12692                           intcon2	equ	0xFF1
 12693                           indf0	equ	0xFEF
 12694                           postinc0	equ	0xFEE
 12695                           fsr0h	equ	0xFEA
 12696                           fsr0l	equ	0xFE9
 12697                           wreg	equ	0xFE8
 12698                           indf1	equ	0xFE7
 12699                           fsr1h	equ	0xFE2
 12700                           fsr1l	equ	0xFE1
 12701                           indf2	equ	0xFDF
 12702                           postinc2	equ	0xFDE
 12703                           postdec2	equ	0xFDD
 12704                           fsr2h	equ	0xFDA
 12705                           fsr2l	equ	0xFD9
 12706                           status	equ	0xFD8


Data Sizes:
    Strings     102
    Constant    118
    Data        5
    BSS         57
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      79
    BANK0           160    131     143
    BANK1           256      0      40
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 40
		 -> NULL(NULL[0]), uart_str(BANK1[40]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 40
		 -> NULL(NULL[0]), uart_str(BANK1[40]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 40
		 -> NULL(NULL[0]), uart_str(BANK1[40]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 40
		 -> NULL(NULL[0]), uart_str(BANK1[40]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_2(CODE[2]), STR_1(CODE[2]), uart_str(BANK1[40]), 

    memset@p1	PTR void  size(2) Largest target is 40
		 -> parseGcode@Gparsed(BANK0[16]), uart_str(BANK1[40]), 

    memset@p	PTR unsigned char  size(2) Largest target is 40
		 -> parseGcode@Gparsed(BANK0[16]), uart_str(BANK1[40]), 

    atof@s	PTR const unsigned char  size(2) Largest target is 40
		 -> NULL(NULL[0]), uart_str(BANK1[40]), 

    strtod@s	PTR const unsigned char  size(2) Largest target is 40
		 -> NULL(NULL[0]), uart_str(BANK1[40]), 

    strtod@res	PTR PTR const unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_4(CODE[16]), STR_3(CODE[19]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> parseGcode@finalposition(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    execGcode@Gparsed	PTR struct G_token_ size(2) Largest target is 16
		 -> parseGcode@Gparsed(BANK0[16]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 40
		 -> NULL(NULL[0]), uart_str(BANK1[40]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 40
		 -> STR_2(CODE[2]), STR_1(CODE[2]), NULL(NULL[0]), uart_str(BANK1[40]), 

    parseGcode@Gcode	PTR unsigned char  size(2) Largest target is 40
		 -> uart_str(BANK1[40]), 

    sp__memset	PTR void  size(2) Largest target is 40
		 -> parseGcode@Gparsed(BANK0[16]), uart_str(BANK1[40]), 

    parseGcode@comment_delim	PTR unsigned char  size(2) Largest target is 40
		 -> STR_2(CODE[2]), STR_1(CODE[2]), NULL(NULL[0]), uart_str(BANK1[40]), 

    parseGcode@buf	PTR unsigned char  size(2) Largest target is 40
		 -> NULL(NULL[0]), uart_str(BANK1[40]), 

    writeUSBstring@string	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[15]), STR_7(CODE[15]), STR_6(CODE[18]), STR_5(CODE[17]), 
		 -> parseGcode@finalposition(BANK0[40]), 

    ctr	PTR unsigned char  size(2) Largest target is 40
		 -> uart_str(BANK1[40]), 


Critical Paths under _main in COMRAM

    _setupUSB->___aldiv
    _writeUSBstring->_writeUSB
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _sprintf->___ftadd
    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    _linearMove2Axis->___ftadd
    _calculate_motordelay->___fttol
    ___wmul->___awdiv
    ___lwdiv->___wmul
    ___ftsub->___ftadd
    _moveToSwitch->___fttol
    ___awtoft->___ftpack
    _linearMove1Axis->___ftadd
    ___lwtoft->___ftpack
    ___fttol->_scale
    ___ftadd->_fround
    _atof->_strtod
    _strtod->___ftmul
    ___ftmul->___wmul
    ___ftdiv->___awtoft
    ___altoft->___ftpack
    _blinkInitLed->_delay_ms

Critical Paths under _ISR in COMRAM

    _ISR->_UART_interrupt

Critical Paths under _main in BANK0

    _main->_parseGcode
    _parseGcode->_execGcode
    _sprintf->___ftsub
    _execGcode->_linearMove2Axis
    _linearMove2Axis->_calculate_motordelay
    _calculate_motordelay->___fttol
    ___ftsub->___ftadd
    _homeAxis->_linearMove1Axis
    _moveToSwitch->___fttol
    _linearMove1Axis->___fttol

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  252097
                       _blinkInitLed
                         _parseGcode
                          _setupGPIO
                    _setupInterrupts
                    _setupOscillator
                         _setupTimer
                           _setupUSB
 ---------------------------------------------------------------------------------
 (1) _setupUSB                                             6     4      2     734
                                             29 COMRAM     6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     556
                                             15 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _setupTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupOscillator                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupInterrupts                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupGPIO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _parseGcode                                          64    62      2  250734
                                             67 BANK0     64    62      2
                               _atof
                          _execGcode
                             _memset
                            _sprintf
                             _strchr
                             _strtok
                     _writeUSBstring
 ---------------------------------------------------------------------------------
 (2) _writeUSBstring                                       5     3      2     432
                                             16 COMRAM     5     3      2
                           _writeUSB
 ---------------------------------------------------------------------------------
 (3) _writeUSB                                             1     1      0      22
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4    1838
                                             28 COMRAM     4     0      4
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (3) _strspn                                               7     3      4     691
                                             21 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              7     3      4     691
                                             21 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strchr                                               6     2      4     472
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             50    37     13   63859
                                              9 BANK0     42    29     13
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   13950
                                             50 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   13671
                                             50 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1448
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1580
                                             21 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                             15 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     574
                                             15 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2823
                                             23 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     543
                                             15 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     418
                                             15 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     480
                                             15 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _execGcode                                           14    12      2  162711
                                             53 BANK0     14    12      2
                            ___fttol
                           _delay_ms
                           _delay_us
                           _homeAxis
                    _linearMove1Axis
                    _linearMove2Axis
 ---------------------------------------------------------------------------------
 (3) _linearMove2Axis                                     35    27      8   84351
                                             24 BANK0     29    21      8
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lwdiv
                           ___lwtoft
               _calculate_motordelay
                           _delay_ms
                           _delay_us
                    _linearMove1Axis
 ---------------------------------------------------------------------------------
 (4) _calculate_motordelay                                22    16      6   16428
                                             66 COMRAM     2     2      0
                                              6 BANK0     18    12      6
                            ___ftdiv
                            ___ftmul (ARG)
                            ___fttol
                            ___lwdiv
                           ___lwtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2975
                                             29 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4    1058
                                             35 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6195
                                              3 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) _homeAxis                                             1     1      0   42546
                                             21 BANK0      1     1      0
                    _linearMove1Axis
                       _moveToSwitch
 ---------------------------------------------------------------------------------
 (4) _moveToSwitch                                         7     5      2   12338
                                             66 COMRAM     2     0      2
                                              6 BANK0      5     5      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
                           _delay_ms
                           _delay_us
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    2854
                                             23 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _linearMove1Axis                                     17    12      5   30115
                                              6 BANK0     15    10      5
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lwtoft
                           _delay_ms
                           _delay_us
 ---------------------------------------------------------------------------------
 (5) _delay_us                                             6     4      2    1685
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___lwtoft                                             3     0      3    3522
                                             23 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4    2047
                                             57 COMRAM     9     5      4
                                              0 BANK0      6     6      0
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5523
                                             60 COMRAM     9     3      6
                                              0 BANK0      3     3      0
                            ___ftneg (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) _atof                                                 3     0      3   20173
                                             62 COMRAM     3     0      3
                             _strtod
 ---------------------------------------------------------------------------------
 (3) _strtod                                              12     8      4   20065
                                             50 COMRAM    12     8      4
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (4) _isspace                                              3     3      0      90
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     322
                                             15 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     557
                                             15 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    7250
                                             35 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    2184
                                             15 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    4718
                                             27 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2925
                                             23 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2644
                                             15 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _blinkInitLed                                         1     1      0     629
                                             23 COMRAM     1     1      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (5) _delay_ms                                             8     6      2     561
                                             15 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 14    14      0      45
                                              1 COMRAM    14    14      0
                     _TMR0_interrupt
                     _UART_interrupt
 ---------------------------------------------------------------------------------
 (8) _UART_interrupt                                       1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR0_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _blinkInitLed
     _delay_ms
   _parseGcode
     _atof
       _strtod
         ___altoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___lmul
         _isdigit
         _isspace
     _execGcode
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _delay_ms
       _delay_us
       _homeAxis
         _linearMove1Axis
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lwtoft
             ___ftpack
           _delay_ms
           _delay_us
         _moveToSwitch
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _delay_ms
           _delay_us
       _linearMove1Axis
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lwtoft
           ___ftpack
         _delay_ms
         _delay_us
       _linearMove2Axis
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lwdiv
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft
           ___ftpack
         _calculate_motordelay
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lwdiv (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _delay_ms
         _delay_us
         _linearMove1Axis
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lwtoft
             ___ftpack
           _delay_ms
           _delay_us
     _memset
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _strchr
     _strtok
       _strcspn
         _strchr
       _strspn
         _strchr
     _writeUSBstring
       _writeUSB
   _setupGPIO
   _setupInterrupts
   _setupOscillator
   _setupTimer
   _setupUSB
     ___aldiv

 _ISR (ROOT)
   _TMR0_interrupt
   _UART_interrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      28       7       15.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     83      8F       5       89.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      4F       1       84.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     106      20        0.0%
DATA                 0      0     106       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Sat Jul 08 18:15:53 2017

                 ??_TMR0_interrupt 0001                       ___altoft@exp 0020  
                    ___altoft@sign 0021                                 l61 42EC  
                               l57 37B8                       ___awdiv@sign 001B  
                      __CFG_BOR$ON 000000                ___wmul@multiplicand 0020  
                      __CFG_BORV$3 000000                       __CFG_CP0$OFF 000000  
                     __CFG_CP1$OFF 000000                       __CFG_CP2$OFF 000000  
                     __CFG_CP3$OFF 000000                       ___ftadd@exp1 0062  
                     ___ftadd@exp2 0061                       ___ftadd@sign 0060  
                              l300 1276                                l134 41D2  
                              l305 1340                                l242 2626  
                              l315 1594                                l244 262A  
                              l245 262E                                l270 19DC  
                              l246 2632                                l255 18E8  
                              l280 1AC6                                l266 1914  
                              l275 1A6A                                l267 1946  
                              l285 1B1E                                l720 22D0  
                              l297 11AC                                l299 1236  
                              l816 3908                                l913 4278  
                              l498 0E56                                l691 203E  
                              l843 2E6A                                l693 2042  
                              l845 2E8E                                l854 2F48  
                              l863 2F66                                l839 2E34  
                              l784 3226                                l881 3070  
                              l874 3602                                l882 3098  
                              l968 3AAC                                l888 30FE  
                              l978 3DC4                                _GIE 007F97  
                     __CFG_CPB$OFF 000000                       __CFG_CPD$OFF 000000  
                              _ISR 0008          linearMove2Axis@singleaxis 0083  
                              _ctr 004E                linearMove1Axis@axis 0074  
                     ___awmod@sign 0015                                prod 000FF3  
                              wreg 000FE8                       __CFG_FOSC$HS 000000  
                     __CFG_LVP$OFF 000000                               ?_ISR 0001  
                     ___ftdiv@cntr 0025                   ??_writeUSBstring 0013  
                     ___ftdiv@sign 002A                       __CFG_WDT$OFF 000000  
                             l1021 3ED0                               l1221 3FC0  
                             l1231 3F70                               l1193 3870  
                             l1188 37DA                               l4200 312E  
                             l5002 375C                               l4220 318E  
                             l4206 314C                               l4150 3036  
                             l4240 31EC                               l4144 300A  
                             l5008 37A4                               l6002 2266  
                             l4250 3214                               l5140 388A  
                             l6004 226E                               l5220 2EE0  
                             l5204 2E86                               l4252 3220  
                             l4244 31FC                               l4228 31BE  
                             l4180 30C4                               l5222 2EEC  
                             l5214 2EB6                               l3534 3E9E  
                             l4430 3A6E                               l6030 3DDC  
                             l4190 30EC                               l5152 38D6  
                             l5144 3898                               l3464 3958  
                             l5312 34AA                               l3800 3E56  
                             l6024 22F0                               l6008 2298  
                             l5240 2F84                               l5232 2F30  
                             l5224 2EFA                               l3536 3EA6  
                             l6112 250A                               l6032 3DE8  
                             l4192 30F8                               l4184 30D4  
                             l3560 3CCC                               l5154 38F4  
                             l5146 38A2                               l3474 39B4  
                             l5330 34EC                               l5306 3482  
                             l5250 2FB8                               l5234 2F3C  
                             l5226 2F06                               l5402 3342  
                             l3546 3EC6                               l3538 3EAA  
                             l6130 2580                               l6122 2558  
                             l6050 232E                               l4426 3A5E  
                             l4450 3D92                               l6202 0972  
                             l3554 3C9C                               l5156 38FE  
                             l5148 38C0                               l5260 3576  
                             l3468 3988                               l5340 3514  
                             l5500 1A90                               l6116 250E  
                             l6108 2506                               l4428 3A6A  
                             l6220 09DE                               l6212 099E  
                             l6204 0988                               l4524 3868  
                             l4516 3828                               l4508 37EC  
                             l5182 3FF4                               l5326 34DC  
                             l5502 1AA6                               l5430 1746  
                             l6150 25D8                               l6142 25B0  
                             l6126 257C                               l6070 23AE  
                             l4438 3A9E                               l4454 3DB6  
                             l4446 3D82                               l3910 3C7A  
                             l3902 3C5A                               l6302 0D34  
                             l6230 0A24                               l6214 09C4  
                             l4470 3F34                               l5336 3504  
                             l5192 2E42                               l5176 4104  
                             l5512 1AE8                               l6136 2584  
                             l6064 23A0                               l6160 25E0  
                             l4448 3D8E                               l3904 3C62  
                             l6208 0998                               l4480 3F8C  
                             l4472 3F3C                               l5266 359E  
                             l5514 1AFE                               l5450 17E8  
                             l5442 17BA                               l5426 1700  
                             l5418 16D2                               l6154 25DC  
                             l6058 2362                               l6162 2614  
                             l3850 39CC                               l3906 3C66  
                             l3914 3C84                               l6330 0E5A  
                             l6306 0D60                               l4490 3AFE  
                             l3836 4232                               l5524 1B40  
                             l5460 18A0                               l5356 4176  
                             l5612 3422                               l5604 33FA  
                             l6172 263A                               l6148 25CE  
                             l6324 0E24                               l6308 0D68  
                             l6316 0DFC                               l6260 0B76  
                             l6420 2C82                               l4900 3696  
                             l5286 35DC                               l3790 42BE  
                             l3838 4236                               l5198 2E78  
                             l5366 3268                               l5526 1B54  
                             l5454 182E                               l5438 1774  
                             l5622 344C                               l5702 1318  
                             l6166 2636                               l6174 2674  
                             l6078 23E0                               l4494 41A4  
                             l3862 39F2                               l3918 3C92  
                             l6342 0EDC                               l6326 0E38  
                             l6318 0E0A                               l6270 0BFE  
                             l6262 0BA6                               l6254 0B3A  
                             l6246 0AD2                               l6190 0904  
                             l4478 3F84                               l4486 3AC4  
                             l6430 2CF8                               l4910 36CA  
                             l4902 369A                               l5384 32DE  
                             l5464 18A4                               l5560 278A  
                             l6088 243A                               l3864 39FA  
                             l3856 39DC                               l6360 0FEA  
                             l6352 0FC2                               l6264 0BBC  
                             l6184 08EC                               l6440 2D3C  
                             l5634 3BD6                               l5394 330C  
                             l5562 27B0                               l5554 2740  
                             l5546 2702                               l5706 13B0  
                             l5730 1454                               l6098 24A4  
                             l6178 2678                               l4498 41B4  
                             l3882 3A32                               l3874 3A1A  
                             l3866 39FE                               l6354 0FD0  
                             l6338 0E8A                               l6290 0CEE  
                             l6274 0C24                               l6258 0B60  
                             l6362 0FF8                               l6450 2DA6  
                             l6418 2C64                               l4914 36D8  
                             l5636 3BE2                               l3796 3E42  
                             l5396 331C                               l5388 32F2  
                             l5484 19FE                               l5556 2754  
                             l5732 1460                               l5820 2B9C  
                             l5812 2ADC                               l6380 10A2  
                             l6372 1046                               l6284 0C82  
                             l6452 2DB4                               l6390 41CA  
                             l5398 3326                               l5486 1A14  
                             l5646 403C                               l5574 28A0  
                             l5558 275E                               l5566 27EA  
                             l5670 1182                               l5662 1122  
                             l5654 10F8                               l3878 3A24  
                             l3894 3C40                               l6198 0936  
                             l6382 10A8                               l6446 2D8A  
                             l6454 2DC2                               l4918 36EE  
                             l5912 2048                               l5592 33A6  
                             l5576 293C                               l5728 143E  
                             l5840 1D30                               l6376 1076  
                             l6368 101E                               l6288 0CE8  
                             l6384 10C4                               l6448 2D98  
                             l5922 2084                               l5770 15F8  
                             l5754 14EE                               l5666 1126  
                             l5658 10FC                               l3898 3C4C  
                             l5834 1C8C                               l5588 3380  
                             l5692 1294                               l5676 120A  
                             l5852 1E80                               l5844 1D54  
                             l4892 3668                               l6468 414A  
                             l5926 2094                               l5950 2128  
                             l5918 206C                               l4886 3650  
                             l5928 2098                               l5880 1F96  
                             l5792 1686                               l5768 15BE  
                             l5696 12C2                               l5970 2186  
                             l5946 2124                               l5882 1F9A  
                             l5866 1F62                               l5794 169A  
                             l5698 12EA                               l5858 1F24  
                             l4898 368A                               l5980 21E8  
                             l5868 1F66                               l5990 2220  
                             l5974 21B2                               l5966 217E  
                             l5958 2146                               l5894 1FCA  
                             l5878 1F8E                               l5976 21BE  
                             l5888 1FB2                               l5986 2212  
                             l5994 222E                               l5998 223A  
                             STR_1 08DB                               STR_2 08DB  
                             STR_3 0877                               STR_4 08AD  
                             STR_5 089C                               STR_6 088A  
                             STR_7 08CC                               STR_8 08BD  
                             _BRGH 007D62                               u4151 2FEE  
                             u3360 3CBC                               _IPEN 007E87  
                             u4171 301A                               u3380 3CF8  
                             u3367 3CB2                               u3387 3CEE  
                             _PEIE 007F96                               _RBIE 007F93  
                             _RBIF 007F90                               _RCIE 007CED  
                             _RCIF 007CF5                               u4750 3AF8  
                             u5615 40FA                               u4760 3B32  
                             u5641 2DF0                               u5651 2E06  
                             u7340 0E4E                               u7180 0A6A  
                             u5901 346A                               u4757 3AEE  
                             u4767 3B28                               u5921 3492  
                             u7185 0A5E                               u5851 355E  
                             u7470 2C64                               u5871 3586  
                             u5971 3248                               u7477 2C58  
                             u5990 3286                               u5995 327E  
                             _RPOS 0046                               _TRMT 007D61  
                             _XPOS 00E3                               _YPOS 00E6  
                             _ZPOS 00E9             ??_calculate_motordelay 0043  
                             _atof 4286                               _main 412A  
                     ___ftpack@arg 0010                       ___ftpack@exp 0013  
                             fsr0h 000FEA                               fsr1h 000FE2  
                             indf0 000FEF                               fsr0l 000FE9  
                             fsr2h 000FDA                               indf1 000FE7  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               btemp 0050  
                             pclat 000FFA            parseGcode@gcode_process 00CD  
                             prodh 000FF4                               prodl 000FF3  
                             start 0016               linearMove1Axis@steps 006B  
                    __CFG_IESO$OFF 000000                        _SYSTEM_TIME 0049  
                     _sprintf$2119 007C                      __CFG_MCLRE$ON 000000  
                     ___ftmul@cntr 0031                       ___param_bank 000010  
                     ___ftmul@sign 0032               linearMove2Axis@del_x 0086  
             linearMove2Axis@del_y 0089                              ??_ISR 0002  
                     ___fttol@exp1 0065                       ___fttol@lval 0061  
             linearMove2Axis@steps 008F                      __CFG_PLLDIV$1 000000  
                   __CFG_CCP2MX$ON 000000                    __end_of___aldiv 3700  
                            ?_atof 003F                              ?_main 0001  
                  __end_of___awdiv 3A3C                    __end_of___ftadd 2FDE  
                  __end_of___awmod 3C9C          _calculate_motordelay$2115 006E  
                  __end_of___ftdiv 3634                    __end_of___ftneg 4286  
                  __end_of___lldiv 3ABE                    __end_of___ftmul 354E  
                  ___awdiv@divisor 0018                    __end_of___llmod 3DD6  
                  __end_of___ftsub 4066                    __end_of___fttol 3354  
                  __end_of___lwdiv 3EDA                    ___awdiv@counter 001A  
                            _RCREG 000FAE                              _TMR0L 000FD6  
                            _SPBRG 000FAF                              _PORTA 000F80  
                            _PORTB 000F81                              _PORTC 000F82  
                            _PORTD 000F83                              _PORTE 000F84  
                    __CFG_USBDIV$1 000000                              _TXREG 000FAD  
                    __CFG_PWRT$OFF 000000                      __CFG_WRT0$OFF 000000  
                    __CFG_WRT1$OFF 000000                      __CFG_WRT2$OFF 000000  
              ___lmul@multiplicand 0014                      __CFG_WRT3$OFF 000000  
                     ___lltoft@exp 0020                     __CFG_EBTR0$OFF 000000  
                   __CFG_FCMEN$OFF 000000                     __CFG_EBTR1$OFF 000000  
                   __CFG_EBTR2$OFF 000000                     __CFG_EBTR3$OFF 000000  
                    __CFG_WRTB$OFF 000000                      __CFG_WRTC$OFF 000000  
                    __CFG_WRTD$OFF 000000                     __CFG_EBTRB$OFF 000000  
                    ___awtoft@sign 001B                    __end_of_dpowers 0829  
                            _scale 1B58                    __end_of_isdigit 42C6  
                    ___ftpack@sign 0014                              atof@s 003F  
                  __end_of_isspace 423E                              tablat 000FF5  
             __end_of_blinkInitLed 41F2                              status 000FD8  
                  __end_of_sprintf 10D2                    __end_of_strcspn 3FCA  
                   __CFG_ICPRT$OFF 000000                      parseGcode@buf 00E1  
             delay_ms@current_time 0014                    __initialization 3D08  
                     __end_of_atof 42A8                       __end_of_main 4162  
                           ??_atof 0042                             ??_main 0046  
                    ___fttol@sign1 0060                      __activetblptr 000002  
         __size_of_setupInterrupts 0012               __size_of__tdiv_to_l_ 0132  
                 __end_of___altoft 3C2C                   ___llmod@dividend 0010  
                           ?_scale 0033                   ___awdiv@dividend 0016  
                 __end_of___awtoft 419A                   __end_of___ftpack 3928  
                 __end_of___lltoft 3E32                    _linearMove1Axis 16BA  
                  _linearMove2Axis 10D2                             i2l5096 40DC  
                 __end_of___lwtoft 4262                             _TMR0IE 007F95  
                           _TMR0IF 007F92           __size_of_setupOscillator 0006  
                   __CFG_VREGEN$ON 000000                   __end_of_delay_ms 401A  
                 __end_of_delay_us 412A                     __CFG_XINST$OFF 000000  
                 __end_of__powers_ 0877                  moveToSwitch@delay 0069  
                           ___ftge 3928                             ___lmul 3E32  
                        ??___aldiv 0018                  moveToSwitch@limit 0066  
                           ___wmul 41F2                          ??___awdiv 001A  
                        ??___ftadd 0043                     __CFG_STVREN$ON 000000  
                        ??___awmod 0014                          ??___ftdiv 0022  
                moveToSwitch@speed 0043                   __end_of_homeAxis 40B0  
                        ??___ftneg 0013                          ??___lldiv 0018  
                        ??___ftmul 002A                          ??___llmod 0018  
                        ??___ftsub 0046                          ??___fttol 003E  
                        ??___lwdiv 0028                             _memset 419A  
                           _fround 2996                             clear_0 3D0E  
                           clear_1 3D1A                             clear_2 3D26  
                 ___awdiv@quotient 001C                    ___awmod@divisor 0012  
          parseGcode@finalposition 00A5           linearMove2Axis@singlearg 0080  
                  ___awmod@counter 0014                             _strchr 3C9C  
                           _strtod 1F48                             _strtok 37CA  
                           _strspn 3F2A              ___ftmul@f3_as_product 002E  
                     __pdataCOMRAM 004E                          ??_isdigit 0010  
                 __end_of_setupUSB 37CA                       __mediumconst 0000  
                        ??_isspace 0010                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
                        ??_sprintf 0076                          ??_strcspn 001A  
                     homeAxis@axis 0075                   __end_of_writeUSB 42F6  
                       __accesstop 0060            __end_of__initialization 3D62  
                       ___altoft@c 0018                    __CFG_PBADEN$OFF 000000  
                       ___ftadd@f1 003D                         ___ftadd@f2 0040  
                       ___ftge@ff1 0010                         ___ftge@ff2 0013  
                    ___rparam_used 000001            parseGcode@comment_delim 00CE  
                       ___ftdiv@f1 001C                         ___ftdiv@f2 001F  
                       ___ftdiv@f3 0026                         ___ftneg@f1 0010  
                       ___awtoft@c 0018                         ___ftmul@f1 0024  
                       ___ftmul@f2 0027                         ___ftsub@f1 0063  
                       ___ftsub@f2 0066                         ___fttol@f1 003A  
                   __pcstackCOMRAM 0001                       __pidataBANK0 4308  
                       ___lltoft@c 0018                      __end_of_scale 1F48  
                      parseGcode@i 00E0                         ___lwtoft@c 0018  
                       __div_to_l_ 3110            __end_of_linearMove1Axis 1B58  
             delay_us@current_time 0014            __end_of_linearMove2Axis 16BA  
        linearMove1Axis@calc_delay 0072              __size_of_blinkInitLed 002C  
                  __div_to_l_@exp1 001B                    __div_to_l_@cntr 001A  
                          ??_scale 0036                  ??_setupInterrupts 0010  
                  __div_to_l_@quot 0016                 __size_of_execGcode 037E  
                       __pbssBANK0 00E3                         __pbssBANK1 0100  
                    __div_to_l_@f1 0010                      __div_to_l_@f2 0013  
                          ?___ftge 0010                            ?___lmul 0010  
                          ?___wmul 001E                  ??_setupOscillator 0010  
                        ?___altoft 0018                            ?_memset 0010  
                          ?_fround 0033                     ___lmul@product 0018  
                        ?___awtoft 0018                       _blinkInitLed 41C6  
                        ?___ftpack 0010      calculate_motordelay@halfdelay 006C  
                        ?___lltoft 0018                            ?_strchr 0010  
                        ?___lwtoft 0018                            ?_strtod 0033  
                    execGcode@arg1 009D                      execGcode@arg2 0098  
                          ?_strtok 001D                            ?_strspn 0016  
                    execGcode@axis 00A2                 __size_of_setupGPIO 0050  
                    ?_moveToSwitch 0043            __size_of_UART_interrupt 003E  
                        ?_delay_ms 0010                          ?_delay_us 0010  
     calculate_motordelay@feedrate 0066                          ?_homeAxis 0001  
    __size_of_calculate_motordelay 031A               writeUSBstring@string 0011  
                __end_of__npowers_ 0850                            __Hparam 0000  
                       _scale$2118 0036                            __Lparam 0000  
                        ?_setupUSB 001E                            ___aldiv 3634  
                  __size_of___ftge 0090                            ___awdiv 39B8  
                  __size_of___lmul 0056                            ___ftadd 2DE0  
                          ___awmod 3C2C                            ___ftdiv 354E  
                          ___ftneg 4262                            ___lldiv 3A3C  
                  __size_of___wmul 0026                            ___ftmul 345A  
                          ___llmod 3D70                            ___ftsub 401A  
                          ___fttol 3238                            ___lwdiv 3E88  
                __end_of_execGcode 267C                       __psmallconst 0800  
                       ??___altoft 001C                            __pcinit 3D08  
                       ??___awtoft 001B                         ??___ftpack 0015  
                  __size_of_memset 002C                    __size_of_fround 0246  
                          __ramtop 0800                          ?_writeUSB 0001  
                       ??___lltoft 001C                            __ptext0 412A  
                          __ptext1 3700                            __ptext2 3634  
                          __ptext3 42C6                            __ptext4 4302  
                          __ptext5 42D8                            __ptext6 3EDA  
                          __ptext7 2BDC                            __ptext8 3ABE  
                          __ptext9 42EA                     ??_moveToSwitch 0045  
                       ??___lwtoft 001B                          _T0CONbits 000FD5  
                  __size_of_strchr 006C                       __size_of_ISR 3BAC  
                      ?__div_to_l_ 0010                    __size_of_strtod 03B6  
                  __size_of_strtok 00B0                    __size_of_strspn 0050  
                          _dpowers 0801                            _isdigit 42A8  
          __size_of_TMR0_interrupt 000C                         _parseGcode 2BDC  
                 ___awmod@dividend 0010                   ___aldiv@dividend 0010  
                          _isspace 4218                   ?_linearMove1Axis 0066  
                 ?_linearMove2Axis 0078                         ??_delay_ms 0012  
                       ??_delay_us 0012            linearMove1Axis@feedrate 0069  
                          _sprintf 08DE                            _strcspn 3F7A  
                   __pintcode_body 3B3A                         delay_ms@ms 0010  
             end_of_initialization 3D62                         delay_ms@us 0016  
                       delay_us@us 0010                         ??_homeAxis 0046  
                     writeUSB@byte 0010                            memset@c 0012  
                          memset@n 0014                            memset@p 0016  
                    __Lmediumconst 0000                            int_func 3B3A  
                __end_of_setupGPIO 3F2A                    ___lldiv@divisor 0014  
                  ___lldiv@counter 001C            __size_of_writeUSBstring 007C  
                        _RCSTAbits 000FAB                         ??_setupUSB 0020  
                 ___aldiv@quotient 001A                            postdec2 000FDD  
               UART_interrupt@byte 0001                            postinc0 000FEE  
                          postinc2 000FDE                     __tdiv_to_l_@f1 0010  
                   __tdiv_to_l_@f2 0013                      ??__tdiv_to_l_ 0016  
                          strtod@s 0033                            strspn@i 001B  
                       ??_writeUSB 0010                          _PORTBbits 000F81  
                       _setupTimer 42C6                    parseGcode@Gcode 00A3  
                        _TRISAbits 000F92                          _TRISBbits 000F93  
                        _TRISCbits 000F94                          _TRISDbits 000F95  
                        _TRISEbits 000F96                      _GCODE_PENDING 004D  
               linearMove1Axis@del 006D                 linearMove1Axis@arg 0066  
               linearMove2Axis@del 008C                        ___ftdiv@exp 0029  
                        _TXSTAbits 000FAC                __size_of__div_to_l_ 0128  
                      ___ftmul@exp 002D                     __end_of___ftge 39B8  
                       execGcode@i 009B                     __end_of___lmul 3E88  
                   __end_of___wmul 4218                        _BAUDCONbits 000FB8  
                    __pidataCOMRAM 430B                    _setupInterrupts 42D8  
                   __end_of_memset 41C6                     __end_of_fround 2BDC  
                   _UART_interrupt 40B0                     __end_of_strchr 3D08  
                      ?_parseGcode 00A3                     __end_of_strtod 22FE  
                   __end_of_strtok 387A                     __end_of_strspn 3F7A  
              start_initialization 3D08                        __end_of_ISR 3BB4  
              __end_of__tdiv_to_l_ 3110            linearMove2Axis@feedrate 007E  
            calculate_motordelay@i 0068              calculate_motordelay@x 0074  
                  _setupOscillator 4302                    ___llmod@divisor 0014  
                  ___llmod@counter 0018               __end_of_moveToSwitch 345A  
                 moveToSwitch@axis 0068                           ??___ftge 0016  
                         ??___lmul 0018                           ??___wmul 0022  
                      __pdataBANK0 00EC            linearMove2Axis@x_target 0078  
                 __CFG_LPT1OSC$OFF 000000            linearMove2Axis@y_target 007B  
                         ??_memset 0016                           ??_fround 0036  
           __end_of_UART_interrupt 40EE                      sprintf@tmpval 0089  
                      ?_setupTimer 0001                           ??_strchr 0014  
                         ??_strtod 0037                           ??_strtok 0021  
                         ??_strspn 001A                  __size_of___altoft 0078  
                       fround@prec 003C                     _TMR0_interrupt 42F6  
                __size_of___awtoft 0038                  __size_of___ftpack 00AE  
                __size_of___lltoft 005C                        __pbssCOMRAM 0046  
                __size_of___lwtoft 0024                      __pcstackBANK0 0060  
                     _isdigit$1744 0011                  __size_of_delay_ms 0050  
                __size_of_delay_us 003C                        sprintf@flag 0081  
                      sprintf@fval 008F                        sprintf@prec 008D  
                __size_of_homeAxis 004A                     _writeUSBstring 3ABE  
                 ___lwdiv@dividend 0024                      blinkInitLed@i 0018  
              __size_of_parseGcode 0204            __end_of_setupInterrupts 42EA  
                        __pintcode 0008                           ?___aldiv 0010  
                         ?___awdiv 0016                           ?___ftadd 003D  
                         ?___awmod 0010                           ?___ftdiv 001C  
                         ?___ftneg 0010                           ?___lldiv 0010  
                         ?___ftmul 0024                           ?___llmod 0010  
                         ?___ftsub 0063                          __npowers_ 0829  
                         ?___fttol 003A                           ?___lwdiv 0024  
                __size_of_setupUSB 00CA        calculate_motordelay@acc_max 0072  
                 setupUSB@baudrate 001E                    ?_UART_interrupt 0001  
           __end_of_TMR0_interrupt 4302                        __tdiv_to_l_ 2FDE  
     __end_of_calculate_motordelay 2996                       ??__div_to_l_ 0016  
                        _execGcode 22FE                        __smallconst 0800  
                execGcode@feedrate 00A0                           ?_isdigit 0001  
                __size_of_writeUSB 000C                           ?_isspace 0001  
          __end_of_setupOscillator 4308                   ___lwdiv@quotient 0028  
                         ?_sprintf 0069                     __size_of_scale 03F0  
                         ?_strcspn 0016                    ___aldiv@divisor 0014  
                  ___aldiv@counter 0018                     ___wmul@product 0022  
                         _LATAbits 000F89                           _LATBbits 000F8A  
                         _LATCbits 000F8B                           _LATDbits 000F8C  
           __end_of_writeUSBstring 3B3A                           _LATEbits 000F8D  
              __size_of_setupTimer 0012               _linearMove2Axis$2114 0084  
                  writeUSBstring@i 0015                 __end_of__div_to_l_ 3238  
calculate_motordelay@init_feedrate 0070                   __CFG_WDTPS$32768 000000  
                        _setupGPIO 3EDA                        strtod@flags 0039  
                      strtod@expon 003A                    ?_TMR0_interrupt 0001  
                       _ADCON1bits 000FC1                  ___wmul@multiplier 001E  
                       ?_execGcode 0095                       _isspace$1747 0011  
                ___lmul@multiplier 0010                        _INTCON2bits 000FF1  
            __size_of_moveToSwitch 0106           __size_of_linearMove1Axis 049E  
         __size_of_linearMove2Axis 05E8                    ?_writeUSBstring 0011  
                         __Hrparam 0000                           __Lrparam 0000  
                 ?_setupInterrupts 0001                         ?_setupGPIO 0001  
                 __size_of___aldiv 00CC                   __size_of___awdiv 0084  
                 __size_of___ftadd 01FE                   __size_of___awmod 0070  
                 __size_of___ftdiv 00E6                   __size_of___ftneg 0024  
                 __size_of___lldiv 0082                           ___altoft 3BB4  
                 __size_of___ftmul 00F4                   __size_of___llmod 0066  
                 __size_of___ftsub 004C                   __size_of___fttol 011C  
                 __size_of___lwdiv 0052                           ___awtoft 4162  
                         ___ftpack 387A                        _fround$2116 0039  
                      _fround$2117 0036                           ___lltoft 3DD6  
                 execGcode@Gparsed 0095                           ___lwtoft 423E  
                       sprintf@exp 0087                       _moveToSwitch 3354  
                       sprintf@val 0083                       ??_parseGcode 0046  
                 __size_of_isdigit 001E                           _delay_ms 3FCA  
                         _delay_us 40EE                    ___lwdiv@divisor 0026  
                 __size_of_isspace 0026                    ___lwdiv@counter 002A  
                 ?_setupOscillator 0001                           __ptext10 37CA  
                         __ptext11 3F2A                           __ptext20 3110  
                         __ptext12 3F7A                           __ptext21 3DD6  
                         __ptext13 3C9C                           __ptext30 401A  
                         __ptext22 3D70                           __ptext14 08DE  
                         __ptext31 4066                           __ptext23 3A3C  
                         __ptext15 1B58                           __ptext40 1F48  
                         __ptext32 3354                           __ptext24 419A  
                         __ptext16 2996                           __ptext41 4218  
                         __ptext33 4162                           __ptext25 22FE  
                         __ptext17 3C2C                           __ptext50 41C6  
                         __ptext42 42A8                           __ptext34 16BA  
                         __ptext26 10D2                           __ptext18 39B8  
                         __ptext51 3FCA                           __ptext43 3E32  
                         __ptext35 40EE                           __ptext27 267C  
                         __ptext19 2FDE                           __ptext44 4262  
                         __ptext36 423E                           __ptext28 41F2  
                         __ptext53 40B0                           __ptext45 345A  
                         __ptext37 3238                           __ptext29 3E88  
                         __ptext54 42F6                           __ptext46 3928  
                         __ptext38 2DE0                           __ptext47 354E  
                         __ptext39 4286                           __ptext48 3BB4  
                         __ptext49 387A                           __powers_ 0850  
        linearMove2Axis@calc_delay 0093                   __size_of_sprintf 07F4  
                 __size_of_strcspn 0050                           _homeAxis 4066  
                    __size_of_atof 0022                      __size_of_main 0038  
             _calculate_motordelay 267C                 __end_of_parseGcode 2DE0  
                         _setupUSB 3700                           _uart_str 0100  
                       strtod@eexp 0038                          setupUSB@x 0020  
                         int$flags 0050          calculate_motordelay@depth 0076  
                 linearMove1Axis@i 0070                   linearMove2Axis@i 0091  
                    ?_blinkInitLed 0001          calculate_motordelay@steps 006A  
                         _writeUSB 42EA                       ??_setupTimer 0010  
            __CFG_CPUDIV$OSC1_PLL2 000000                        ??_execGcode 0097  
                 _DEFAULT_FEEDRATE 00EC                           isdigit@c 0012  
                         memset@p1 0010                           scale@scl 0039  
                         intlevel2 0000                          sprintf@ap 007F  
                 __tdiv_to_l_@exp1 001E                   __tdiv_to_l_@cntr 001D  
                        sprintf@sp 0069                   __tdiv_to_l_@quot 0019  
                        strchr@chr 0012                          strchr@ptr 0010  
                         isspace@c 0012                   ___lldiv@dividend 0010  
            ?_calculate_motordelay 0066                          strcspn@s1 0016  
                        strcspn@s2 0018                 __end_of_setupTimer 42D8  
                       _OSCCONbits 000FD3                   ??_UART_interrupt 0001  
                ??_linearMove1Axis 0046                  ??_linearMove2Axis 0046  
                        strtod@res 0035                        ??_setupGPIO 0010  
                   ??_blinkInitLed 0018                       ?__tdiv_to_l_ 0010  
                         sprintf@c 0092                           sprintf@f 006B  
                 ___lldiv@quotient 0018                           strcspn@i 001B  
                     ___aldiv@sign 0019                           strtod@_u 003B  
                         strtok@s1 001D                           strtok@s2 001F  
                         strspn@s1 0016                           strspn@s2 0018  
                         strtok@sp 004B                  parseGcode@Gparsed 00D0  
